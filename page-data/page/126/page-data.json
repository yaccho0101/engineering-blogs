{"componentChunkName":"component---src-templates-blog-list-tsx","path":"/page/126","result":{"data":{"allPost":{"edges":[{"node":{"ID":178,"Title":"Becoming AI-First: How to Get There","Description":"<p>Deciding to adopt an AI-first strategy is the easy part. Figuring out how to implement it takes a little more effort. It requires a clear-eyed vision built around well-defined goals and a realistic execution plan. Being AI-first means setting up your organization for the future. By leveraging data, analytics, and automation, a company can gain [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.cloudera.com/becoming-ai-first-how-to-get-there/\">Becoming AI-First: How to Get There</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.cloudera.com\">Cloudera Blog</a>.</p>\n","PublishedAt":"2022-05-18 14:43:12+00:00","OriginURL":"https://blog.cloudera.com/becoming-ai-first-how-to-get-there/","SourceName":"Cloudera"}},{"node":{"ID":736,"Title":"Stripe Data Pipeline","Description":"Sync your Stripe data with your Redshift or Snowflake data warehouse.","PublishedAt":"2022-05-18 00:00:00+00:00","OriginURL":"https://stripe.com/data-pipeline","SourceName":"Stripe"}},{"node":{"ID":1218,"Title":"Blog: Kubernetes 1.24: Prevent unauthorised volume mode conversion","Description":"<p><strong>Author:</strong> Raunak Pradip Shah (Mirantis)</p>\n<p>Kubernetes v1.24 introduces a new alpha-level feature that prevents unauthorised users\nfrom modifying the volume mode of a <a href=\"https://kubernetes.io/docs/concepts/storage/persistent-volumes/\"><code>PersistentVolumeClaim</code></a> created from an\nexisting <a href=\"https://kubernetes.io/docs/concepts/storage/volume-snapshots/\"><code>VolumeSnapshot</code></a> in the Kubernetes cluster.</p>\n<h3 id=\"the-problem\">The problem</h3>\n<p>The <a href=\"https://kubernetes.io/docs/concepts/storage/persistent-volumes/#volume-mode\">Volume Mode</a> determines whether a volume\nis formatted into a filesystem or presented as a raw block device.</p>\n<p>Users can leverage the <code>VolumeSnapshot</code> feature, which has been stable since Kubernetes v1.20,\nto create a <code>PersistentVolumeClaim</code> (shortened as PVC) from an existing <code>VolumeSnapshot</code> in\nthe Kubernetes cluster. The PVC spec includes a <code>dataSource</code> field, which can point to an\nexisting <code>VolumeSnapshot</code> instance.\nVisit <a href=\"https://kubernetes.io/docs/concepts/storage/persistent-volumes/#create-persistent-volume-claim-from-volume-snapshot\">Create a PersistentVolumeClaim from a Volume Snapshot</a> for more details.</p>\n<p>When leveraging the above capability, there is no logic that validates whether the mode of the\noriginal volume, whose snapshot was taken, matches the mode of the newly created volume.</p>\n<p>This presents a security gap that allows malicious users to potentially exploit an\nas-yet-unknown vulnerability in the host operating system.</p>\n<p>Many popular storage backup vendors convert the volume mode during the course of a\nbackup operation, for efficiency purposes, which prevents Kubernetes from blocking\nthe operation completely and presents a challenge in distinguishing trusted\nusers from malicious ones.</p>\n<h3 id=\"preventing-unauthorised-users-from-converting-the-volume-mode\">Preventing unauthorised users from converting the volume mode</h3>\n<p>In this context, an authorised user is one who has access rights to perform <code>Update</code>\nor <code>Patch</code> operations on <code>VolumeSnapshotContents</code>, which is a cluster-level resource.<br>\nIt is upto the cluster administrator to provide these rights only to trusted users\nor applications, like backup vendors.</p>\n<p>If the alpha feature is <a href=\"https://kubernetes-csi.github.io/docs/\">enabled</a> in\n<code>snapshot-controller</code>, <code>snapshot-validation-webhook</code> and <code>external-provisioner</code>,\nthen unauthorised users will not be allowed to modify the volume mode of a PVC\nwhen it is being created from a <code>VolumeSnapshot</code>.</p>\n<p>To convert the volume mode, an authorised user must do the following:</p>\n<ol>\n<li>Identify the <code>VolumeSnapshot</code> that is to be used as the data source for a newly\ncreated PVC in the given namespace.</li>\n<li>Identify the <code>VolumeSnapshotContent</code> bound to the above <code>VolumeSnapshot</code>.</li>\n</ol>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-shell\" data-lang=\"shell\"><span style=\"display:flex;\"><span>kubectl get volumesnapshot -n &lt;namespace&gt;\n</span></span></code></pre></div><ol start=\"3\">\n<li>\n<p>Add the annotation <a href=\"https://kubernetes.io/docs/reference/labels-annotations-taints/#snapshot-storage-kubernetes-io-allowvolumemodechange\"><code>snapshot.storage.kubernetes.io/allowVolumeModeChange</code></a>\nto the <code>VolumeSnapshotContent</code>.</p>\n</li>\n<li>\n<p>This annotation can be added either via software or manually by the authorised\nuser. The <code>VolumeSnapshotContent</code> annotation must look like following manifest fragment:</p>\n</li>\n</ol>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex;\"><span><span style=\"color:#008000;font-weight:bold\">kind</span>:<span style=\"color:#bbb\"> </span>VolumeSnapshotContent<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">metadata</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">annotations</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>- <span style=\"color:#008000;font-weight:bold\">snapshot.storage.kubernetes.io/allowVolumeModeChange</span>:<span style=\"color:#bbb\"> </span><span style=\"color:#b44\">&#34;true&#34;</span><span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#00f;font-weight:bold\">...</span><span style=\"color:#bbb\">\n</span></span></span></code></pre></div><p><strong>Note</strong>: For pre-provisioned <code>VolumeSnapshotContents</code>, you must take an extra\nstep of setting <code>spec.sourceVolumeMode</code> field to either <code>Filesystem</code> or <code>Block</code>,\ndepending on the mode of the volume from which this snapshot was taken.</p>\n<p>An example is shown below:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex;\"><span><span style=\"color:#008000;font-weight:bold\">apiVersion</span>:<span style=\"color:#bbb\"> </span>snapshot.storage.k8s.io/v1<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">kind</span>:<span style=\"color:#bbb\"> </span>VolumeSnapshotContent<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">metadata</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">annotations</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>- <span style=\"color:#008000;font-weight:bold\">snapshot.storage.kubernetes.io/allowVolumeModeChange</span>:<span style=\"color:#bbb\"> </span><span style=\"color:#b44\">&#34;true&#34;</span><span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>new-snapshot-content-test<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">spec</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">deletionPolicy</span>:<span style=\"color:#bbb\"> </span>Delete<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">driver</span>:<span style=\"color:#bbb\"> </span>hostpath.csi.k8s.io<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">source</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">snapshotHandle</span>:<span style=\"color:#bbb\"> </span>7bdd0de3-aaeb-11e8-9aae-0242ac110002<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">sourceVolumeMode</span>:<span style=\"color:#bbb\"> </span>Filesystem<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">volumeSnapshotRef</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>new-snapshot-test<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">namespace</span>:<span style=\"color:#bbb\"> </span>default<span style=\"color:#bbb\">\n</span></span></span></code></pre></div><p>Repeat steps 1 to 3 for all <code>VolumeSnapshotContents</code> whose volume mode needs to be\nconverted during a backup or restore operation.</p>\n<p>If the annotation shown in step 4 above is present on a <code>VolumeSnapshotContent</code>\nobject, Kubernetes will not prevent the volume mode from being converted.\nUsers should keep this in mind before they attempt to add the annotation\nto any <code>VolumeSnapshotContent</code>.</p>\n<h3 id=\"what-s-next\">What's next</h3>\n<p><a href=\"https://kubernetes-csi.github.io/docs/\">Enable this feature</a> and let us know\nwhat you think!</p>\n<p>We hope this feature causes no disruption to existing workflows while preventing\nmalicious users from exploiting security vulnerabilities in their clusters.</p>\n<p>For any queries or issues, join <a href=\"https://slack.k8s.io/\">Kubernetes on Slack</a> and\ncreate a thread in the #sig-storage channel. Alternately, create an issue in the\nCSI external-snapshotter <a href=\"https://github.com/kubernetes-csi/external-snapshotter\">repository</a>.</p>","PublishedAt":"2022-05-18 00:00:00+00:00","OriginURL":"https://kubernetes.io/blog/2022/05/18/prevent-unauthorised-volume-mode-conversion-alpha/","SourceName":"Kubernetes"}},{"node":{"ID":748,"Title":"Better Load Balancing: Real-Time Dynamic Subsetting","Description":"<h1><span style=\"font-weight: 400;\">Overview</span></h1>\n<p><span style=\"font-weight: 400;\">Subsetting is a common technique used in load balancing for large-scale distributed systems. In this blog post, we will briefly introduce Uber’s current service mesh architecture that has been powering thousands of critical microservices in Uber since 2016. We </span>&#8230;</p>\n<p>The post <a rel=\"nofollow\" href=\"https://eng.uber.com/better-load-balancing-real-time-dynamic-subsetting/\">Better Load Balancing: Real-Time Dynamic Subsetting</a> appeared first on <a rel=\"nofollow\" href=\"https://eng.uber.com\">Uber Engineering Blog</a>.</p>\n","PublishedAt":"2022-05-17 16:30:26+00:00","OriginURL":"https://eng.uber.com/better-load-balancing-real-time-dynamic-subsetting/","SourceName":"Uber"}},{"node":{"ID":1053,"Title":"What We Talk About When We Talk About Quality Assurance.","Description":"<p>* This article is a translation of the Japanese article written on September 16, 2021. Hello! This is @myajiri, a QA engineer at Merpay. This article is for day 12 of Merpay Tech Openness Month 2021. After joining Merpay, PMs and engineers undergo a process of onboarding (training to understand our products and work). I&#8217;m [&hellip;]</p>\n","PublishedAt":"2022-05-17 11:00:22+00:00","OriginURL":"https://engineering.mercari.com/en/blog/entry/20210915-c9577ca624/","SourceName":"Mercari"}},{"node":{"ID":141,"Title":"Fighting the forces of clock skew when syncing password payloads","Description":"","PublishedAt":"2022-05-17 10:00:00+00:00","OriginURL":"https://dropbox.tech/application/dropbox-passwords-clock-skew-payload-sync-merge","SourceName":"Dropbox"}},{"node":{"ID":603,"Title":"WARP - A Web Application Rewrite Project","Description":"","PublishedAt":"2022-05-16 00:00:00+00:00","OriginURL":"https://tech.trivago.com/post/2022-05-16-warp-a-web-application-rewrite-project/","SourceName":"Trivago"}},{"node":{"ID":1219,"Title":"Blog: Kubernetes 1.24: Volume Populators Graduate to Beta","Description":"<p><strong>Author:</strong>\nBen Swartzlander (NetApp)</p>\n<p>The volume populators feature is now two releases old and entering beta! The <code>AnyVolumeDataSource</code> feature\ngate defaults to enabled in Kubernetes v1.24, which means that users can specify any custom resource\nas the data source of a PVC.</p>\n<p>An <a href=\"https://kubernetes.io/blog/2021/08/30/volume-populators-redesigned/\">earlier blog article</a> detailed how the\nvolume populators feature works. In short, a cluster administrator can install a CRD and\nassociated populator controller in the cluster, and any user who can create instances of\nthe CR can create pre-populated volumes by taking advantage of the populator.</p>\n<p>Multiple populators can be installed side by side for different purposes. The SIG storage\ncommunity is already seeing some implementations in public, and more prototypes should\nappear soon.</p>\n<p>Cluster administrations are <strong>strongly encouraged</strong> to install the\nvolume-data-source-validator controller and associated <code>VolumePopulator</code> CRD before installing\nany populators so that users can get feedback about invalid PVC data sources.</p>\n<h2 id=\"new-features\">New Features</h2>\n<p>The <a href=\"https://github.com/kubernetes-csi/lib-volume-populator\">lib-volume-populator</a> library\non which populators are built now includes metrics to help operators monitor and detect\nproblems. This library is now beta and latest release is v1.0.1.</p>\n<p>The <a href=\"https://github.com/kubernetes-csi/volume-data-source-validator\">volume data source validator</a>\ncontroller also has metrics support added, and is in beta. The <code>VolumePopulator</code> CRD is\nbeta and the latest release is v1.0.1.</p>\n<h2 id=\"trying-it-out\">Trying it out</h2>\n<p>To see how this works, you can install the sample &quot;hello&quot; populator and try it\nout.</p>\n<p>First install the volume-data-source-validator controller.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-shell\" data-lang=\"shell\"><span style=\"display:flex;\"><span>kubectl apply -f https://raw.githubusercontent.com/kubernetes-csi/volume-data-source-validator/v1.0.1/client/config/crd/populator.storage.k8s.io_volumepopulators.yaml\n</span></span><span style=\"display:flex;\"><span>kubectl apply -f https://raw.githubusercontent.com/kubernetes-csi/volume-data-source-validator/v1.0.1/deploy/kubernetes/rbac-data-source-validator.yaml\n</span></span><span style=\"display:flex;\"><span>kubectl apply -f https://raw.githubusercontent.com/kubernetes-csi/volume-data-source-validator/v1.0.1/deploy/kubernetes/setup-data-source-validator.yaml\n</span></span></code></pre></div><p>Next install the example populator.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-shell\" data-lang=\"shell\"><span style=\"display:flex;\"><span>kubectl apply -f https://raw.githubusercontent.com/kubernetes-csi/lib-volume-populator/v1.0.1/example/hello-populator/crd.yaml\n</span></span><span style=\"display:flex;\"><span>kubectl apply -f https://raw.githubusercontent.com/kubernetes-csi/lib-volume-populator/87a47467b86052819e9ad13d15036d65b9a32fbb/example/hello-populator/deploy.yaml\n</span></span></code></pre></div><p>Your cluster now has a new CustomResourceDefinition that provides a test API named Hello.\nCreate an instance of the <code>Hello</code> custom resource, with some text:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex;\"><span><span style=\"color:#008000;font-weight:bold\">apiVersion</span>:<span style=\"color:#bbb\"> </span>hello.example.com/v1alpha1<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">kind</span>:<span style=\"color:#bbb\"> </span>Hello<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">metadata</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>example-hello<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">spec</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">fileName</span>:<span style=\"color:#bbb\"> </span>example.txt<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">fileContents</span>:<span style=\"color:#bbb\"> </span>Hello, world!<span style=\"color:#bbb\">\n</span></span></span></code></pre></div><p>Create a PVC that refers to that CR as its data source.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex;\"><span><span style=\"color:#008000;font-weight:bold\">apiVersion</span>:<span style=\"color:#bbb\"> </span>v1<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">kind</span>:<span style=\"color:#bbb\"> </span>PersistentVolumeClaim<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">metadata</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>example-pvc<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">spec</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">accessModes</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>- ReadWriteOnce<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">resources</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">requests</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">storage</span>:<span style=\"color:#bbb\"> </span>10Mi<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">dataSourceRef</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">apiGroup</span>:<span style=\"color:#bbb\"> </span>hello.example.com<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">kind</span>:<span style=\"color:#bbb\"> </span>Hello<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>example-hello<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">volumeMode</span>:<span style=\"color:#bbb\"> </span>Filesystem<span style=\"color:#bbb\">\n</span></span></span></code></pre></div><p>Next, run a Job that reads the file in the PVC.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex;\"><span><span style=\"color:#008000;font-weight:bold\">apiVersion</span>:<span style=\"color:#bbb\"> </span>batch/v1<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">kind</span>:<span style=\"color:#bbb\"> </span>Job<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">metadata</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>example-job<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">spec</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">template</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">spec</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">containers</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>- <span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>example-container<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">image</span>:<span style=\"color:#bbb\"> </span>busybox:latest<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">command</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>- cat<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>- /mnt/example.txt<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">volumeMounts</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>- <span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>vol<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">mountPath</span>:<span style=\"color:#bbb\"> </span>/mnt<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">restartPolicy</span>:<span style=\"color:#bbb\"> </span>Never<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">volumes</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>- <span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>vol<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">persistentVolumeClaim</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">claimName</span>:<span style=\"color:#bbb\"> </span>example-pvc<span style=\"color:#bbb\">\n</span></span></span></code></pre></div><p>Wait for the job to complete (including all of its dependencies).</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-shell\" data-lang=\"shell\"><span style=\"display:flex;\"><span>kubectl <span style=\"color:#a2f\">wait</span> --for<span style=\"color:#666\">=</span><span style=\"color:#b8860b\">condition</span><span style=\"color:#666\">=</span>Complete job/example-job\n</span></span></code></pre></div><p>And last examine the log from the job.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-shell\" data-lang=\"shell\"><span style=\"display:flex;\"><span>kubectl logs job/example-job\n</span></span></code></pre></div><p>The output should be:</p>\n<pre tabindex=\"0\"><code class=\"language-terminal\" data-lang=\"terminal\">Hello, world!\n</code></pre><p>Note that the volume already contained a text file with the string contents from\nthe CR. This is only the simplest example. Actual populators can set up the volume\nto contain arbitrary contents.</p>\n<h2 id=\"how-to-write-your-own-volume-populator\">How to write your own volume populator</h2>\n<p>Developers interested in writing new poplators are encouraged to use the\n<a href=\"https://github.com/kubernetes-csi/lib-volume-populator\">lib-volume-populator</a> library\nand to only supply a small controller wrapper around the library, and a pod image\ncapable of attaching to volumes and writing the appropriate data to the volume.</p>\n<p>Individual populators can be extremely generic such that they work with every type\nof PVC, or they can do vendor specific things to rapidly fill a volume with data\nif the volume was provisioned by a specific CSI driver from the same vendor, for\nexample, by communicating directly with the storage for that volume.</p>\n<h2 id=\"how-can-i-learn-more\">How can I learn more?</h2>\n<p>The enhancement proposal,\n<a href=\"https://github.com/kubernetes/enhancements/tree/master/keps/sig-storage/1495-volume-populators\">Volume Populators</a>, includes lots of detail about the history and technical implementation\nof this feature.</p>\n<p><a href=\"https://kubernetes.io/docs/concepts/storage/persistent-volumes/#volume-populators-and-data-sources\">Volume populators and data sources</a>, within the documentation topic about persistent volumes,\nexplains how to use this feature in your cluster.</p>\n<p>Please get involved by joining the Kubernetes storage SIG to help us enhance this\nfeature. There are a lot of good ideas already and we'd be thrilled to have more!</p>","PublishedAt":"2022-05-16 00:00:00+00:00","OriginURL":"https://kubernetes.io/blog/2022/05/16/volume-populators-beta/","SourceName":"Kubernetes"}},{"node":{"ID":1054,"Title":"Detection Engineering and SOAR at Mercari","Description":"<p>This article is part of the Security Tech Blog Series: Spring Cleaning for Security, brought to you by David from the Security Engineering team. We hope this article can provide you with some useful pointers to kickstart your journey in threat detection, and get familiar with Mercari’s own SOC (security operations center) initiatives. Introduction In [&hellip;]</p>\n","PublishedAt":"2022-05-13 21:52:08+00:00","OriginURL":"https://engineering.mercari.com/en/blog/entry/20220513-detection-engineering-and-soar-at-mercari/","SourceName":"Mercari"}},{"node":{"ID":179,"Title":"Fine-Tune Fair to Capacity Scheduler in Relative Mode","Description":"<p>How to fine-tune CDP Capacity Scheduler configs in relative mode after fs2cs migration</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.cloudera.com/fine-tune-fair-to-capacity-scheduler-in-relative-mode/\">Fine-Tune Fair to Capacity Scheduler in Relative Mode</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.cloudera.com\">Cloudera Blog</a>.</p>\n","PublishedAt":"2022-05-13 15:00:14+00:00","OriginURL":"https://blog.cloudera.com/fine-tune-fair-to-capacity-scheduler-in-relative-mode/","SourceName":"Cloudera"}},{"node":{"ID":1220,"Title":"Blog: Kubernetes 1.24: gRPC container probes in beta","Description":"<p><strong>Author</strong>: Sergey Kanzhelev (Google)</p>\n<p>With Kubernetes 1.24 the gRPC probes functionality entered beta and is available by default.\nNow you can configure startup, liveness, and readiness probes for your gRPC app\nwithout exposing any HTTP endpoint, nor do you need an executable. Kubernetes can natively connect to your your workload via gRPC and query its status.</p>\n<h2 id=\"some-history\">Some history</h2>\n<p>It's useful to let the system managing your workload check that the app is\nhealthy, has started OK, and whether the app considers itself good to accept\ntraffic. Before the gRPC support was added, Kubernetes already allowed you to\ncheck for health based on running an executable from inside the container image,\nby making an HTTP request, or by checking whether a TCP connection succeeded.</p>\n<p>For most apps, those checks are enough. If your app provides a gRPC endpoint\nfor a health (or readiness) check, it is easy\nto repurpose the <code>exec</code> probe to use it for gRPC health checking.\nIn the blog article <a href=\"https://kubernetes.io/blog/2018/10/01/health-checking-grpc-servers-on-kubernetes/\">Health checking gRPC servers on Kubernetes</a>,\nAhmet Alp Balkan described how you can do that — a mechanism that still works today.</p>\n<p>There is a commonly used tool to enable this that was <a href=\"https://github.com/grpc-ecosystem/grpc-health-probe/commit/2df4478982e95c9a57d5fe3f555667f4365c025d\">created</a>\non August 21, 2018, and with\nthe first release at <a href=\"https://github.com/grpc-ecosystem/grpc-health-probe/releases/tag/v0.1.0-alpha.1\">Sep 19, 2018</a>.</p>\n<p>This approach for gRPC apps health checking is very popular. There are <a href=\"https://github.com/search?l=Dockerfile&amp;q=grpc_health_probe&amp;type=code\">3,626 Dockerfiles</a>\nwith the <code>grpc_health_probe</code> and <a href=\"https://github.com/search?l=YAML&amp;q=grpc_health_probe&amp;type=Code\">6,621 yaml</a> files that are discovered with the\nbasic search on GitHub (at the moment of writing). This is good indication of the tool popularity\nand the need to support this natively.</p>\n<p>Kubernetes v1.23 introduced an alpha-quality implementation of native support for\nquerying a workload status using gRPC. Because it was an alpha feature,\nthis was disabled by default for the v1.23 release.</p>\n<h2 id=\"using-the-feature\">Using the feature</h2>\n<p>We built gRPC health checking in similar way with other probes and believe\nit will be <a href=\"https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-a-grpc-liveness-probe\">easy to use</a>\nif you are familiar with other probe types in Kubernetes.\nThe natively supported health probe has many benefits over the workaround involving <code>grpc_health_probe</code> executable.</p>\n<p>With the native gRPC support you don't need to download and carry <code>10MB</code> of an additional executable with your image.\nExec probes are generally slower than a gRPC call as they require instantiating a new process to run an executable.\nIt also makes the checks less sensible for edge cases when the pod is running at maximum resources and has troubles\ninstantiating new processes.</p>\n<p>There are a few limitations though. Since configuring a client certificate for probes is hard,\nservices that require client authentication are not supported. The built-in probes are also\nnot checking the server certificates and ignore related problems.</p>\n<p>Built-in checks also cannot be configured to ignore certain types of errors\n(<code>grpc_health_probe</code> returns different exit codes for different errors),\nand cannot be &quot;chained&quot; to run the health check on multiple services in a single probe.</p>\n<p>But all these limitations are quite standard for gRPC and there are easy workarounds\nfor those.</p>\n<h2 id=\"try-it-for-yourself\">Try it for yourself</h2>\n<h3 id=\"cluster-level-setup\">Cluster-level setup</h3>\n<p>You can try this feature today. To try native gRPC probes, you can spin up a Kubernetes cluster\nyourself with the <code>GRPCContainerProbe</code> feature gate enabled, there are many <a href=\"https://kubernetes.io/docs/tasks/tools/\">tools available</a>.</p>\n<p>Since the feature gate <code>GRPCContainerProbe</code> is enabled by default in 1.24,\nmany vendors will have this functionality working out of the box.\nSo you may just create an 1.24 cluster on platform of your choice. Some vendors\nallow to enable alpha features on 1.23 clusters.</p>\n<p>For example, at the moment of writing, you can spin up the test cluster on GKE for a quick test.\nOther vendors may also have similar capabilities, especially if you\nare reading this blog post long after the Kubernetes 1.24 release.</p>\n<p>On GKE use the following command (note, version is <code>1.23</code> and <code>enable-kubernetes-alpha</code> are specified).</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-shell\" data-lang=\"shell\"><span style=\"display:flex;\"><span>gcloud container clusters create test-grpc <span style=\"color:#b62;font-weight:bold\">\\\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b62;font-weight:bold\"></span> --enable-kubernetes-alpha <span style=\"color:#b62;font-weight:bold\">\\\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b62;font-weight:bold\"></span> --no-enable-autorepair <span style=\"color:#b62;font-weight:bold\">\\\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b62;font-weight:bold\"></span> --no-enable-autoupgrade <span style=\"color:#b62;font-weight:bold\">\\\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b62;font-weight:bold\"></span> --release-channel<span style=\"color:#666\">=</span>rapid <span style=\"color:#b62;font-weight:bold\">\\\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b62;font-weight:bold\"></span> --cluster-version<span style=\"color:#666\">=</span>1.23\n</span></span></code></pre></div><p>You will also need to configure <code>kubectl</code> to access the cluster:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-shell\" data-lang=\"shell\"><span style=\"display:flex;\"><span>gcloud container clusters get-credentials test-grpc\n</span></span></code></pre></div><h3 id=\"trying-the-feature-out\">Trying the feature out</h3>\n<p>Let's create the pod to test how gRPC probes work. For this test we will use the <code>agnhost</code> image.\nThis is a k8s maintained image with that can be used for all sorts of workload testing.\nFor example, it has a useful <a href=\"https://github.com/kubernetes/kubernetes/blob/b2c5bd2a278288b5ef19e25bf7413ecb872577a4/test/images/agnhost/README.md#grpc-health-checking\">grpc-health-checking</a> module\nthat exposes two ports - one is serving health checking service,\nanother - http port to react on commands <code>make-serving</code> and <code>make-not-serving</code>.</p>\n<p>Here is an example pod definition. It starts the <code>grpc-health-checking</code> module,\nexposes ports <code>5000</code> and <code>8080</code>, and configures gRPC readiness probe:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex;\"><span><span style=\"color:#00f;font-weight:bold\">---</span><span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">apiVersion</span>:<span style=\"color:#bbb\"> </span>v1<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">kind</span>:<span style=\"color:#bbb\"> </span>Pod<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">metadata</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>test-grpc<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">spec</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">containers</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>- <span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>agnhost<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">image</span>:<span style=\"color:#bbb\"> </span>k8s.gcr.io/e2e-test-images/agnhost:2.35<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">command</span>:<span style=\"color:#bbb\"> </span>[<span style=\"color:#b44\">&#34;/agnhost&#34;</span>,<span style=\"color:#bbb\"> </span><span style=\"color:#b44\">&#34;grpc-health-checking&#34;</span>]<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">ports</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>- <span style=\"color:#008000;font-weight:bold\">containerPort</span>:<span style=\"color:#bbb\"> </span><span style=\"color:#666\">5000</span><span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>- <span style=\"color:#008000;font-weight:bold\">containerPort</span>:<span style=\"color:#bbb\"> </span><span style=\"color:#666\">8080</span><span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">readinessProbe</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">grpc</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">port</span>:<span style=\"color:#bbb\"> </span><span style=\"color:#666\">5000</span><span style=\"color:#bbb\">\n</span></span></span></code></pre></div><p>If the file called <code>test.yaml</code>, you can create the pod and check it's status.\nThe pod will be in ready state as indicated by the snippet of the output.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-shell\" data-lang=\"shell\"><span style=\"display:flex;\"><span>kubectl apply -f test.yaml\n</span></span><span style=\"display:flex;\"><span>kubectl describe test-grpc\n</span></span></code></pre></div><p>The output will contain something like this:</p>\n<pre tabindex=\"0\"><code>Conditions:\nType Status\nInitialized True\nReady True\nContainersReady True\nPodScheduled True\n</code></pre><p>Now let's change the health checking endpoint status to NOT_SERVING.\nIn order to call the http port of the Pod, let's create a port forward:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-shell\" data-lang=\"shell\"><span style=\"display:flex;\"><span>kubectl port-forward test-grpc 8080:8080\n</span></span></code></pre></div><p>You can <code>curl</code> to call the command...</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-shell\" data-lang=\"shell\"><span style=\"display:flex;\"><span>curl http://localhost:8080/make-not-serving\n</span></span></code></pre></div><p>... and in a few seconds the port status will switch to not ready.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-shell\" data-lang=\"shell\"><span style=\"display:flex;\"><span>kubectl describe pod test-grpc\n</span></span></code></pre></div><p>The output now will have:</p>\n<pre tabindex=\"0\"><code>Conditions:\nType Status\nInitialized True\nReady False\nContainersReady False\nPodScheduled True\n...\nWarning Unhealthy 2s (x6 over 42s) kubelet Readiness probe failed: service unhealthy (responded with &#34;NOT_SERVING&#34;)\n</code></pre><p>Once it is switched back, in about one second the Pod will get back to ready status:</p>\n<pre tabindex=\"0\"><code class=\"language-bsh\" data-lang=\"bsh\">curl http://localhost:8080/make-serving\nkubectl describe test-grpc\n</code></pre><p>The output indicates that the Pod went back to being <code>Ready</code>:</p>\n<pre tabindex=\"0\"><code>Conditions:\nType Status\nInitialized True\nReady True\nContainersReady True\nPodScheduled True\n</code></pre><p>This new built-in gRPC health probing on Kubernetes makes implementing a health-check via gRPC\nmuch easier than the older approach that relied on using a separate <code>exec</code> probe. Read through\nthe official\n<a href=\"https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-a-grpc-liveness-probe\">documentation</a>\nto learn more and provide feedback before the feature will be promoted to GA.</p>\n<h2 id=\"summary\">Summary</h2>\n<p>Kubernetes is a popular workload orchestration platform and we add features based on feedback and demand.\nFeatures like gRPC probes support is a minor improvement that will make life of many app developers\neasier and apps more resilient. Try it today and give feedback, before the feature went into GA.</p>","PublishedAt":"2022-05-13 00:00:00+00:00","OriginURL":"https://kubernetes.io/blog/2022/05/13/grpc-probes-now-in-beta/","SourceName":"Kubernetes"}},{"node":{"ID":448,"Title":"Ask an expert: Getting users to an ‘aha’ moment—fast","Description":"<figure><img src=\"https://mixpanel.com/wp-content/uploads/2022/05/AskAnExpert-PulkitAgrawal-1024x577.png\" class=\"type:primaryImage\" /></figure>\n<p>When you&#8217;re poking around inside of a new app, there&#8217;s no better feeling than finally getting it up and running and seeing firsthand how it can be useful to you. This is called an &#8220;aha&#8221; moment, and it&#8217;s something that all product leaders should be working toward getting their users to as fast as possible.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://mixpanel.com/blog/getting-to-the-aha-moment-fast/\">Ask an expert: Getting users to an &#8216;aha&#8217; moment—fast</a> appeared first on <a rel=\"nofollow\" href=\"https://mixpanel.com\">Mixpanel</a>.</p>\n","PublishedAt":"2022-05-12 20:49:16+00:00","OriginURL":"https://mixpanel.com/blog/getting-to-the-aha-moment-fast/","SourceName":"Mixpanel"}},{"node":{"ID":505,"Title":"Improving Distributed Caching Performance and Efficiency at Pinterest","Description":"","PublishedAt":"2022-05-12 18:11:47+00:00","OriginURL":"https://medium.com/pinterest-engineering/improving-distributed-caching-performance-and-efficiency-at-pinterest-92484b5fe39b?source=rss----4c5a5f6279b6---4","SourceName":"Pinterest"}},{"node":{"ID":403,"Title":"What are we optimizing for?","Description":"","PublishedAt":"2022-05-12 14:03:20+00:00","OriginURL":"https://medium.com/paypal-tech/what-are-we-optimizing-for-78583958701b?source=rss----6423323524ba---4","SourceName":"Paypal"}},{"node":{"ID":1055,"Title":"Improving the engineer experience","Description":"<p>This article is a translation of the Japanese article written on December 16, 2020. I’m yhanada from the Merpay Android Team, and I&#8217;m responsible for day 16 of Merpay Advent Calendar 2020. I&#8217;ve worked as a Mercari/Merpay Android engineer for four years as of this December. In addition to my normal team role developing features, [&hellip;]</p>\n","PublishedAt":"2022-05-12 11:00:16+00:00","OriginURL":"https://engineering.mercari.com/en/blog/entry/20201216-merpay-android-dex/","SourceName":"Mercari"}},{"node":{"ID":9,"Title":"My Journey to Airbnb — Kamini Dandapani","Description":"","PublishedAt":"2022-05-11 19:35:36+00:00","OriginURL":"https://medium.com/airbnb-engineering/my-journey-to-airbnb-kamini-dandapani-7f51f1fbb2bb?source=rss----53c7c27702d5---4","SourceName":"Airbnb"}},{"node":{"ID":540,"Title":"Delivering the ultimate Tinder Swipe Night experience by leveraging personalization at scale","Description":"","PublishedAt":"2022-05-11 18:38:36+00:00","OriginURL":"https://medium.com/tinder/delivering-the-ultimate-tinder-swipe-night-experience-by-leveraging-personalization-at-scale-e128ead42957?source=rss----906928af8599---4","SourceName":"Tinder"}},{"node":{"ID":1056,"Title":"Running distributed testing to reduce testing time","Description":"<p>* This article is a translation of the Japanese article written on December 6, 2021. Introduction Hello! I&#8217;m @goccy, from Merpay’s Architect Team. In this article, I would like to introduce a tool developed to accelerate our daily integration testing between microservices. Integration testing between microservices @zoncoen has written here in detail about our integration [&hellip;]</p>\n","PublishedAt":"2022-05-11 11:00:49+00:00","OriginURL":"https://engineering.mercari.com/en/blog/entry/20211206-5aa2ac7efc/","SourceName":"Mercari"}},{"node":{"ID":737,"Title":"Stripe Tax is available for more businesses","Description":"Stripe Tax can now be added to all Stripe Payments integrations to automatically calculate and collect sales tax, VAT, and GST via the new Orders API.","PublishedAt":"2022-05-10 00:00:00+00:00","OriginURL":"https://stripe.com/docs/orders","SourceName":"Stripe"}},{"node":{"ID":404,"Title":"How to Create Psychological Safety on Engineering Teams","Description":"","PublishedAt":"2022-05-09 17:10:49+00:00","OriginURL":"https://medium.com/paypal-tech/how-to-create-psychological-safety-on-engineering-teams-22b3aa6f68c2?source=rss----6423323524ba---4","SourceName":"Paypal"}},{"node":{"ID":34,"Title":"Introducing EM building blocks","Description":"<img width=\"1024\" height=\"683\" src=\"https://blog.asana.com/wp-content/post-images/xavi-cabrera-kn-UmDZQDjM-unsplash-1-1024x683.jpg\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"\" loading=\"lazy\" style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://blog.asana.com/wp-content/post-images/xavi-cabrera-kn-UmDZQDjM-unsplash-1-1024x683.jpg 1024w, https://blog.asana.com/wp-content/post-images/xavi-cabrera-kn-UmDZQDjM-unsplash-1-520x347.jpg 520w, https://blog.asana.com/wp-content/post-images/xavi-cabrera-kn-UmDZQDjM-unsplash-1-1536x1024.jpg 1536w, https://blog.asana.com/wp-content/post-images/xavi-cabrera-kn-UmDZQDjM-unsplash-1-1024x683@2x.jpg 2048w, https://blog.asana.com/wp-content/post-images/xavi-cabrera-kn-UmDZQDjM-unsplash-1-520x347@2x.jpg 1040w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /><p>At Asana, we have found using Will Larson’s staff engineer archetypes helpful for thinking about and discussing experienced engineer career growth. And the question arose: could we do something similar for Engineering Managers? Similar to individual contributors, engineering managers (EMs) also have different shapes of impact. It’s valuable to illustrate the variety of growth opportunities [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.asana.com/2022/05/introducing-em-building-blocks/\">Introducing EM building&nbsp;blocks</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.asana.com\">The Asana Blog</a>.</p>\n","PublishedAt":"2022-05-09 17:00:00+00:00","OriginURL":"https://blog.asana.com/2022/05/introducing-em-building-blocks/","SourceName":"Asana"}},{"node":{"ID":180,"Title":"Optimizing Hive on Tez Performance","Description":"<p>A guide to tune and troubleshoot performance of  the Hive on Tez after upgrading to CDP</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.cloudera.com/optimizing-hive-on-tez-performance/\">Optimizing Hive on Tez Performance</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.cloudera.com\">Cloudera Blog</a>.</p>\n","PublishedAt":"2022-05-09 14:14:12+00:00","OriginURL":"https://blog.cloudera.com/optimizing-hive-on-tez-performance/","SourceName":"Cloudera"}},{"node":{"ID":405,"Title":"Thundering Herd + Jitter","Description":"","PublishedAt":"2022-05-06 17:22:00+00:00","OriginURL":"https://medium.com/paypal-tech/thundering-herd-jitter-63a57b38919d?source=rss----6423323524ba---4","SourceName":"Paypal"}},{"node":{"ID":120,"Title":"Icons — A Big Mystery for Web browsers","Description":"","PublishedAt":"2022-05-06 08:06:21+00:00","OriginURL":"https://medium.com/engineering-housing/icons-a-big-mystery-for-web-browsers-4d8db9b6fadb?source=rss----3a69e32e2594---4","SourceName":"Housing.com"}},{"node":{"ID":1221,"Title":"Blog: Kubernetes 1.24: Storage Capacity Tracking Now Generally Available","Description":"<p><strong>Authors:</strong> Patrick Ohly (Intel)</p>\n<p>The v1.24 release of Kubernetes brings <a href=\"https://kubernetes.io/docs/concepts/storage/storage-capacity/\">storage capacity</a>\ntracking as a generally available feature.</p>\n<h2 id=\"problems-we-have-solved\">Problems we have solved</h2>\n<p>As explained in more detail in the <a href=\"https://kubernetes.io/blog/2021/04/14/local-storage-features-go-beta/\">previous blog post about this\nfeature</a>, storage capacity\ntracking allows a CSI driver to publish information about remaining\ncapacity. The kube-scheduler then uses that information to pick suitable nodes\nfor a Pod when that Pod has volumes that still need to be provisioned.</p>\n<p>Without this information, a Pod may get stuck without ever being scheduled onto\na suitable node because kube-scheduler has to choose blindly and always ends up\npicking a node for which the volume cannot be provisioned because the\nunderlying storage system managed by the CSI driver does not have sufficient\ncapacity left.</p>\n<p>Because CSI drivers publish storage capacity information that gets used at a\nlater time when it might not be up-to-date anymore, it can still happen that a\nnode is picked that doesn't work out after all. Volume provisioning recovers\nfrom that by informing the scheduler that it needs to try again with a\ndifferent node.</p>\n<p><a href=\"https://github.com/kubernetes-csi/csi-driver-host-path/blob/master/docs/storage-capacity-tracking.md\">Load\ntests</a>\nthat were done again for promotion to GA confirmed that all storage in a\ncluster can be consumed by Pods with storage capacity tracking whereas Pods got\nstuck without it.</p>\n<h2 id=\"problems-we-have-not-solved\">Problems we have <em>not</em> solved</h2>\n<p>Recovery from a failed volume provisioning attempt has one known limitation: if a Pod\nuses two volumes and only one of them could be provisioned, then all future\nscheduling decisions are limited by the already provisioned volume. If that\nvolume is local to a node and the other volume cannot be provisioned there, the\nPod is stuck. This problem pre-dates storage capacity tracking and while the\nadditional information makes it less likely to occur, it cannot be avoided in\nall cases, except of course by only using one volume per Pod.</p>\n<p>An idea for solving this was proposed in a <a href=\"https://github.com/kubernetes/enhancements/pull/1703\">KEP\ndraft</a>: volumes that were\nprovisioned and haven't been used yet cannot have any valuable data and\ntherefore could be freed and provisioned again elsewhere. SIG Storage is\nlooking for interested developers who want to continue working on this.</p>\n<p>Also not solved is support in Cluster Autoscaler for Pods with volumes. For CSI\ndrivers with storage capacity tracking, a prototype was developed and discussed\nin <a href=\"https://github.com/kubernetes/autoscaler/pull/3887\">a PR</a>. It was meant to\nwork with arbitrary CSI drivers, but that flexibility made it hard to configure\nand slowed down scale up operations: because autoscaler was unable to simulate\nvolume provisioning, it only scaled the cluster by one node at a time, which\nwas seen as insufficient.</p>\n<p>Therefore that PR was not merged and a different approach with tighter coupling\nbetween autoscaler and CSI driver will be needed. For this a better\nunderstanding is needed about which local storage CSI drivers are used in\ncombination with cluster autoscaling. Should this lead to a new KEP, then users\nwill have to try out an implementation in practice before it can move to beta\nor GA. So please reach out to SIG Storage if you have an interest in this\ntopic.</p>\n<h2 id=\"acknowledgements\">Acknowledgements</h2>\n<p>Thanks a lot to the members of the community who have contributed to this\nfeature or given feedback including members of <a href=\"https://github.com/kubernetes/community/tree/master/sig-scheduling\">SIG\nScheduling</a>,\n<a href=\"https://github.com/kubernetes/community/tree/master/sig-autoscaling\">SIG\nAutoscaling</a>,\nand of course <a href=\"https://github.com/kubernetes/community/tree/master/sig-storage\">SIG\nStorage</a>!</p>","PublishedAt":"2022-05-06 00:00:00+00:00","OriginURL":"https://kubernetes.io/blog/2022/05/06/storage-capacity-ga/","SourceName":"Kubernetes"}},{"node":{"ID":449,"Title":"Why crypto startups need (secure) product analytics","Description":"<figure><img src=\"https://mixpanel.com/wp-content/uploads/2022/05/Blog-35-1024x577.png\" class=\"type:primaryImage\" /></figure>\n<p>All startups should be using product analytics to understand their users and build products and features that their users love. But if you’re a crypto startup, like an exchange or an NFT marketplace, you’re competing to keep up with the breakneck pace of today’s blockchain technology boom (there are now 19,000 different cryptocurrencies traded publicly,</p>\n<p>The post <a rel=\"nofollow\" href=\"https://mixpanel.com/blog/crypto-startups-product-analytics/\">Why crypto startups need (secure) product analytics</a> appeared first on <a rel=\"nofollow\" href=\"https://mixpanel.com\">Mixpanel</a>.</p>\n","PublishedAt":"2022-05-05 19:13:42+00:00","OriginURL":"https://mixpanel.com/blog/crypto-startups-product-analytics/","SourceName":"Mixpanel"}},{"node":{"ID":506,"Title":"Manas HNSW Streaming Filters","Description":"","PublishedAt":"2022-05-05 17:56:11+00:00","OriginURL":"https://medium.com/pinterest-engineering/manas-hnsw-streaming-filters-351adf9ac1c4?source=rss----4c5a5f6279b6---4","SourceName":"Pinterest"}},{"node":{"ID":251,"Title":"Real-Time iOS Camera Video Matting via CoreML","Description":"In this article, I will share the implementation details of an iOS SwiftUI app with CoreML features. The app captures a front camera stream, applies a state-of-the-art Video Matting model, and outputs a corresponding video sequence without a background (a.k.a. green screen) in real-time.","PublishedAt":"2022-05-05 13:27:24+00:00","OriginURL":"https://engineering.giphy.com/real-time-ios-camera-video-matting-via-coreml/","SourceName":"GIPHY"}},{"node":{"ID":181,"Title":"Winning With Data in the Fight Against Fraud, Waste, and Abuse","Description":"<p>Fraud, waste, and abuse (FWA) in government is a constant, multi-billion dollar issue that challenges agency leaders at all levels and across all sectors, from healthcare to education to taxation to Social Security. The scope and scale of public spending—federal outlays alone were approximately $6.6 trillion in fiscal year 2020 according to the Congressional Budget [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.cloudera.com/winning-with-data-in-the-fight-against-fraud-waste-and-abuse/\">Winning With Data in the Fight Against Fraud, Waste, and Abuse</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.cloudera.com\">Cloudera Blog</a>.</p>\n","PublishedAt":"2022-05-05 13:00:28+00:00","OriginURL":"https://blog.cloudera.com/winning-with-data-in-the-fight-against-fraud-waste-and-abuse/","SourceName":"Cloudera"}},{"node":{"ID":1222,"Title":"Blog: Kubernetes 1.24: Volume Expansion Now A Stable Feature","Description":"<p><strong>Author:</strong> Hemant Kumar (Red Hat)</p>\n<p>Volume expansion was introduced as a alpha feature in Kubernetes 1.8 and it went beta in 1.11 and with Kubernetes 1.24 we are excited to announce general availability(GA)\nof volume expansion.</p>\n<p>This feature allows Kubernetes users to simply edit their <code>PersistentVolumeClaim</code> objects and specify new size in PVC Spec and Kubernetes will automatically expand the volume\nusing storage backend and also expand the underlying file system in-use by the Pod without requiring any downtime at all if possible.</p>\n<h3 id=\"how-to-use-volume-expansion\">How to use volume expansion</h3>\n<p>You can trigger expansion for a PersistentVolume by editing the <code>spec</code> field of a PVC, specifying a different\n(and larger) storage request. For example, given following PVC:</p>\n<pre tabindex=\"0\"><code>kind: PersistentVolumeClaim\napiVersion: v1\nmetadata:\nname: myclaim\nspec:\naccessModes:\n- ReadWriteOnce\nresources:\nrequests:\nstorage: 1Gi # specify new size here\n</code></pre><p>You can request expansion of the underlying PersistentVolume by specifying a new value instead of old <code>1Gi</code> size.\nOnce you've changed the requested size, watch the <code>status.conditions</code> field of the PVC to see if the\nresize has completed.</p>\n<p>When Kubernetes starts expanding the volume - it will add <code>Resizing</code> condition to the PVC, which will be removed once expansion completes. More information about progress of\nexpansion operation can also be obtained by monitoring events associated with the PVC:</p>\n<pre tabindex=\"0\"><code>kubectl describe pvc &lt;pvc&gt;\n</code></pre><h3 id=\"storage-driver-support\">Storage driver support</h3>\n<p>Not every volume type however is expandable by default. Some volume types such as - intree hostpath volumes are not expandable at all. For CSI volumes - the CSI driver\nmust have capability <code>EXPAND_VOLUME</code> in controller or node service (or both if appropriate). Please refer to documentation of your CSI driver, to find out\nif it supports volume expansion.</p>\n<p>Please refer to volume expansion documentation for intree volume types which support volume expansion - <a href=\"https://kubernetes.io/docs/concepts/storage/persistent-volumes/#expanding-persistent-volumes-claims\">Expanding Persistent Volumes</a>.</p>\n<p>In general to provide some degree of control over volumes that can be expanded, only dynamically provisioned PVCs whose storage class has <code>allowVolumeExpansion</code> parameter set to <code>true</code> are expandable.</p>\n<p>A Kubernetes cluster administrator must edit the appropriate StorageClass object and set\nthe <code>allowVolumeExpansion</code> field to <code>true</code>. For example:</p>\n<pre tabindex=\"0\"><code>apiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\nname: gp2-default\nprovisioner: kubernetes.io/aws-ebs\nparameters:\nsecretNamespace: &#34;&#34;\nsecretName: &#34;&#34;\nallowVolumeExpansion: true\n</code></pre><h3 id=\"online-expansion-compared-to-offline-expansion\">Online expansion compared to offline expansion</h3>\n<p>By default, Kubernetes attempts to expand volumes immediately after user requests a resize.\nIf one or more Pods are using the volume, Kubernetes tries to expands the volume using an online resize;\nas a result volume expansion usually requires no application downtime.\nFilesystem expansion on the node is also performed online and hence does not require shutting\ndown any Pod that was using the PVC.</p>\n<p>If you expand a PersistentVolume that is not in use, Kubernetes does an offline resize (and,\nbecause the volume isn't in use, there is again no workload disruption).</p>\n<p>In some cases though - if underlying Storage Driver can only support offline expansion, users of the PVC must take down their Pod before expansion can succeed. Please refer to documentation of your storage\nprovider to find out - what mode of volume expansion it supports.</p>\n<p>When volume expansion was introduced as an alpha feature, Kubernetes only supported offline filesystem\nexpansion on the node and hence required users to restart their pods for file system resizing to finish.\nHis behaviour has been changed and Kubernetes tries its best to fulfil any resize request regardless\nof whether the underlying PersistentVolume volume is online or offline. If your storage provider supports\nonline expansion then no Pod restart should be necessary for volume expansion to finish.</p>\n<h2 id=\"next-steps\">Next steps</h2>\n<p>Although volume expansion is now stable as part of the recent v1.24 release,\nSIG Storage are working to make it even simpler for users of Kubernetes to expand their persistent storage.\nKubernetes 1.23 introduced features for triggering recovery from failed volume expansion, allowing users\nto attempt self-service healing after a failed resize.\nSee <a href=\"https://kubernetes.io/docs/concepts/storage/persistent-volumes/#recovering-from-failure-when-expanding-volumes\">Recovering from volume expansion failure</a> for more details.</p>\n<p>The Kubernetes contributor community is also discussing the potential for StatefulSet-driven storage expansion. This proposed\nfeature would let you trigger expansion for all underlying PVs that are providing storage to a StatefulSet,\nby directly editing the StatefulSet object.\nSee the <a href=\"https://github.com/kubernetes/enhancements/issues/661\">Support Volume Expansion Through StatefulSets</a> enhancement proposal for more details.</p>","PublishedAt":"2022-05-05 00:00:00+00:00","OriginURL":"https://kubernetes.io/blog/2022/05/05/volume-expansion-ga/","SourceName":"Kubernetes"}}]}},"pageContext":{"limit":30,"skip":3750,"numPages":158,"currentPage":126}},"staticQueryHashes":["3649515864"]}