{"componentChunkName":"component---src-templates-blog-list-tsx","path":"/page/10","result":{"data":{"allPost":{"edges":[{"node":{"ID":4441,"Title":"HashiCorp at Google Cloud Next: Seamless infrastructure deployment and management","Description":"Visit us at Google Cloud Next ‘23 in San Francisco, Aug. 29 - 31, for breakout sessions, expert talks, and product demos to accelerate your cloud strategy.","PublishedAt":"2023-08-23 16:00:00+00:00","OriginURL":"https://www.hashicorp.com/blog/hashicorp-at-google-cloud-next-seamless-infrastructure-deployment-and-management","SourceName":"HashiCorp"}},{"node":{"ID":4442,"Title":"Beyond product analytics: How Mixpanel uses Mixpanel for all business data","Description":"<figure><img src=\"/wp-content/uploads/2023/08/Warehouse_Blog_Header_1920x1080-1024x576.png\" class=\"type:primaryImage\" /></figure>\n<p>Since launching over a decade ago, Mixpanel has been a great solution for analyzing digital product usage. The best, we’d argue. But for analysis in other domains, our customers have often been forced to turn to disparate tools, resulting in a siloed, split-brain analytics experience. As Mixpanel users ourselves, we can vouch. With the launch</p>\n<p>The post <a rel=\"nofollow\" href=\"/blog/analytics-uses-business-data-warehouse/\">Beyond product analytics: How Mixpanel uses Mixpanel for all business data</a> appeared first on <a rel=\"nofollow\" href=\"https://mxpnlcms.wpengine.com\">Mixpanel</a>.</p>\n","PublishedAt":"2023-08-23 16:00:00+00:00","OriginURL":"/blog/analytics-uses-business-data-warehouse/","SourceName":"Mixpanel"}},{"node":{"ID":4465,"Title":"Beyond product analytics: How Mixpanel uses Mixpanel for all business data","Description":"<figure><img src=\"https://mixpanel.com/wp-content/uploads/2023/08/Warehouse_Blog_Header_1920x1080-1024x576.png\" class=\"type:primaryImage\" /></figure>\n<p>Since launching over a decade ago, Mixpanel has been a great solution for analyzing digital product usage. The best, we’d argue. But for analysis in other domains, our customers have often been forced to turn to disparate tools, resulting in a siloed, split-brain analytics experience. As Mixpanel users ourselves, we can vouch. With the launch</p>\n<p>The post <a rel=\"nofollow\" href=\"https://mixpanel.com/blog/analytics-uses-business-data-warehouse/\">Beyond product analytics: How Mixpanel uses Mixpanel for all business data</a> appeared first on <a rel=\"nofollow\" href=\"https://mixpanel.com\">Mixpanel</a>.</p>\n","PublishedAt":"2023-08-23 16:00:00+00:00","OriginURL":"https://mixpanel.com/blog/analytics-uses-business-data-warehouse/","SourceName":"Mixpanel"}},{"node":{"ID":4437,"Title":"Enhancing homepage feed relevance by harnessing the power of large corpus sparse ID embeddings","Description":"Co-authors: Jason (Siyu) Zhu, Amol Ghoting, Birjodh Tiwanna, Maneesh Varshney Introduction At LinkedIn, we strive to provide our members with valuable content that can help them build professional networks, learn new skills, and discover exciting job opportunities. To ensure this content is engaging and relevant, we aim to understand each member's specific goals and preferences. This may include interests such as keeping up with the latest news and industry trends, participating in discussions by commenting or reacting, contributing to collaborative articles, or sharing career [&#8230;]","PublishedAt":"2023-08-23 15:00:00+00:00","OriginURL":"https://engineering.linkedin.com/blog/2023/enhancing-homepage-feed-relevance-by-harnessing-the-power-of-lar","SourceName":"Linkedin"}},{"node":{"ID":4454,"Title":"Fitting AI models in your pocket with quantization","Description":"<p>A Qualcomm expert breaks down some of the tools and techniques they use to fit GenAI models on a smartphone.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://stackoverflow.blog/2023/08/23/fitting-ai-models-in-your-pocket-with-quantization/\">Fitting AI models in your pocket with quantization</a> appeared first on <a rel=\"nofollow\" href=\"https://stackoverflow.blog\">Stack Overflow Blog</a>.</p>\n","PublishedAt":"2023-08-23 14:00:00+00:00","OriginURL":"https://stackoverflow.blog/2023/08/23/fitting-ai-models-in-your-pocket-with-quantization/","SourceName":"Stack Overflow"}},{"node":{"ID":4434,"Title":"Blog: Kubernetes 1.28: Node podresources API Graduates to GA","Description":"<p><strong>Author:</strong>\nFrancesco Romani (Red Hat)</p>\n<p>The podresources API is an API served by the kubelet locally on the node, which exposes the compute resources exclusively\nallocated to containers. With the release of Kubernetes 1.28, that API is now Generally Available.</p>\n<h2 id=\"what-problem-does-it-solve\">What problem does it solve?</h2>\n<p>The kubelet can allocate exclusive resources to containers, like\n<a href=\"https://kubernetes.io/docs/tasks/administer-cluster/cpu-management-policies/\">CPUs, granting exclusive access to full cores</a>\nor <a href=\"https://kubernetes.io/docs/tasks/administer-cluster/memory-manager/\">memory, either regions or hugepages</a>.\nWorkloads which require high performance, or low latency (or both) leverage these features.\nThe kubelet also can assign <a href=\"https://kubernetes.io/docs/concepts/extend-kubernetes/compute-storage-net/device-plugins/\">devices to containers</a>.\nCollectively, these features which enable exclusive assignments are known as &quot;resource managers&quot;.</p>\n<p>Without an API like podresources, the only possible option to learn about resource assignment was to read the state files the\nresource managers use. While done out of necessity, the problem with this approach is the path and the format of these file are\nboth internal implementation details. Albeit very stable, the project reserves the right to change them freely.\nConsuming the content of the state files is thus fragile and unsupported, and projects doing this are recommended to consider\nmoving to podresources API or to other supported APIs.</p>\n<h2 id=\"overview-of-the-api\">Overview of the API</h2>\n<p>The podresources API was <a href=\"https://kubernetes.io/docs/concepts/extend-kubernetes/compute-storage-net/device-plugins/#monitoring-device-plugin-resources\">initially proposed to enable device monitoring</a>.\nIn order to enable monitoring agents, a key prerequisite is to enable introspection of device assignment, which is performed by the kubelet.\nServing this purpose was the initial goal of the API. The first iteration of the API only had a single function implemented, <code>List</code>,\nto return information about the assignment of devices to containers.\nThe API is used by <a href=\"https://github.com/k8snetworkplumbingwg/multus-cni\">multus CNI</a> and by\n<a href=\"https://github.com/NVIDIA/dcgm-exporter\">GPU monitoring tools</a>.</p>\n<p>Since its inception, the podresources API increased its scope to cover other resource managers than device manager.\nStarting from Kubernetes 1.20, the <code>List</code> API reports also CPU cores and memory regions (including hugepages); the API also\nreports the NUMA locality of the devices, while the locality of CPUs and memory can be inferred from the system.</p>\n<p>In Kubernetes 1.21, the API <a href=\"https://github.com/kubernetes/enhancements/blob/master/keps/sig-node/2403-pod-resources-allocatable-resources/README.md\">gained</a>\nthe <code>GetAllocatableResources</code> function.\nThis newer API complements the existing <code>List</code> API and enables monitoring agents to determine the unallocated resources,\nthus enabling new features built on top of the podresources API like a\n<a href=\"https://github.com/kubernetes-sigs/scheduler-plugins/blob/master/pkg/noderesourcetopology/README.md\">NUMA-aware scheduler plugin</a>.</p>\n<p>Finally, in Kubernetes 1.27, another function, <code>Get</code> was introduced to be more friendly with CNI meta-plugins, to make it simpler to access resources\nallocated to a specific pod, rather than having to filter through resources for all pods on the node. The <code>Get</code> function is currently alpha level.</p>\n<h2 id=\"consuming-the-api\">Consuming the API</h2>\n<p>The podresources API is served by the kubelet locally, on the same node on which is running.\nOn unix flavors, the endpoint is served over a unix domain socket; the default path is <code>/var/lib/kubelet/pod-resources/kubelet.sock</code>.\nOn windows, the endpoint is served over a named pipe; the default path is <code>npipe://\\\\.\\pipe\\kubelet-pod-resources</code>.</p>\n<p>In order for the containerized monitoring application consume the API, the socket should be mounted inside the container.\nA good practice is to mount the directory on which the podresources socket endpoint sits rather than the socket directly.\nThis will ensure that after a kubelet restart, the containerized monitor application will be able to re-connect to the socket.</p>\n<p>An example manifest for a hypothetical monitoring agent consuming the podresources API and deployed as a DaemonSet could look like:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex;\"><span><span style=\"color:#008000;font-weight:bold\">apiVersion</span>:<span style=\"color:#bbb\"> </span>apps/v1<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">kind</span>:<span style=\"color:#bbb\"> </span>DaemonSet<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">metadata</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>podresources-monitoring-app<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">namespace</span>:<span style=\"color:#bbb\"> </span>monitoring<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">spec</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">selector</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">matchLabels</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>podresources-monitoring<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">template</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">metadata</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">labels</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>podresources-monitoring<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">spec</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">containers</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>- <span style=\"color:#008000;font-weight:bold\">args</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>- --podresources-socket=unix:///host-podresources/kubelet.sock<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">command</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>- /bin/podresources-monitor<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">image</span>:<span style=\"color:#bbb\"> </span>podresources-monitor:latest <span style=\"color:#bbb\"> </span><span style=\"color:#080;font-style:italic\"># just for an example</span><span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">volumeMounts</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>- <span style=\"color:#008000;font-weight:bold\">mountPath</span>:<span style=\"color:#bbb\"> </span>/host-podresources<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>host-podresources<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">serviceAccountName</span>:<span style=\"color:#bbb\"> </span>podresources-monitor<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">volumes</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>- <span style=\"color:#008000;font-weight:bold\">hostPath</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">path</span>:<span style=\"color:#bbb\"> </span>/var/lib/kubelet/pod-resources<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">type</span>:<span style=\"color:#bbb\"> </span>Directory<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>host-podresources<span style=\"color:#bbb\">\n</span></span></span></code></pre></div><p>I hope you find it straightforward to consume the podresources API programmatically.\nThe kubelet API package provides the protocol file and the go type definitions; however, a client package is not yet available from the project,\nand the existing code should not be used directly.\nThe <a href=\"https://github.com/kubernetes/kubernetes/blob/v1.28.0-rc.0/pkg/kubelet/apis/podresources/client.go#L32\">recommended</a>\napproach is to reimplement the client in your projects, copying and pasting the related functions like for example\nthe multus project is <a href=\"https://github.com/k8snetworkplumbingwg/multus-cni/blob/v4.0.2/pkg/kubeletclient/kubeletclient.go\">doing</a>.</p>\n<p>When operating the containerized monitoring application consuming the podresources API, few points are worth highlighting to prevent &quot;gotcha&quot; moments:</p>\n<ul>\n<li>Even though the API only exposes data, and doesn't allow by design clients to mutate the kubelet state, the gRPC request/response model requires\nread-write access to the podresources API socket. In other words, it is not possible to limit the container mount to <code>ReadOnly</code>.</li>\n<li>Multiple clients are allowed to connect to the podresources socket and consume the API, since it is stateless.</li>\n<li>The kubelet has <a href=\"https://github.com/kubernetes/kubernetes/pull/116459\">built-in rate limits</a> to mitigate local Denial of Service attacks from\nmisbehaving or malicious consumers. The consumers of the API must tolerate rate limit errors returned by the server. The rate limit is currently\nhardcoded and global, so misbehaving clients can consume all the quota and potentially starve correctly behaving clients.</li>\n</ul>\n<h2 id=\"future-enhancements\">Future enhancements</h2>\n<p>For historical reasons, the podresources API has a less precise specification than typical kubernetes APIs (such as the Kubernetes HTTP API, or the container runtime interface).\nThis leads to unspecified behavior in corner cases.\nAn <a href=\"https://issues.k8s.io/119423\">effort</a> is ongoing to rectify this state and to have a more precise specification.</p>\n<p>The <a href=\"https://github.com/kubernetes/enhancements/tree/master/keps/sig-node/3063-dynamic-resource-allocation\">Dynamic Resource Allocation (DRA)</a> infrastructure\nis a major overhaul of the resource management.\nThe <a href=\"https://github.com/kubernetes/enhancements/tree/master/keps/sig-node/3695-pod-resources-for-dra\">integration</a> with the podresources API\nis already ongoing.</p>\n<p>An <a href=\"https://issues.k8s.io/119817\">effort</a> is ongoing to recommend or create a reference client package ready to be consumed.</p>\n<h2 id=\"getting-involved\">Getting involved</h2>\n<p>This feature is driven by <a href=\"https://github.com/Kubernetes/community/blob/master/sig-node/README.md\">SIG Node</a>.\nPlease join us to connect with the community and share your ideas and feedback around the above feature and\nbeyond. We look forward to hearing from you!</p>","PublishedAt":"2023-08-23 00:00:00+00:00","OriginURL":"https://kubernetes.io/blog/2023/08/23/kubelet-podresources-api-ga/","SourceName":"Kubernetes"}},{"node":{"ID":4435,"Title":"Ecommerce marketplace Modalova doubles its revenue by improving search accuracy with Elastic","Description":"","PublishedAt":"2023-08-23 00:00:00+00:00","OriginURL":"https://www.elastic.co/blog/ecommerce-marketplace-modalova-search-accuracy-elastic","SourceName":"Elastic"}},{"node":{"ID":4438,"Title":"How to successfully lead a team in a distributed workplace","Description":"","PublishedAt":"2023-08-23 00:00:00+00:00","OriginURL":"https://www.elastic.co/blog/culture-lead-distributed-team","SourceName":"Elastic"}},{"node":{"ID":4410,"Title":"Slack’s Migration to a Cellular Architecture","Description":"<p>Summary In recent years, cellular architectures have become increasingly popular for large online services as a way to increase redundancy and limit the blast radius of site failures. In pursuit of these goals, we have migrated the most critical user-facing services at Slack from a monolithic to a cell-based architecture over the last 1.5 years. [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://slack.engineering/slacks-migration-to-a-cellular-architecture/\">Slack&#8217;s Migration to a Cellular Architecture</a> appeared first on <a rel=\"nofollow\" href=\"https://slack.engineering\">Slack Engineering</a>.</p>\n","PublishedAt":"2023-08-22 15:51:40+00:00","OriginURL":"https://slack.engineering/slacks-migration-to-a-cellular-architecture/","SourceName":"Slack"}},{"node":{"ID":4423,"Title":"What’s next: Black Hat 2023 takeaways","Description":"","PublishedAt":"2023-08-22 15:00:00+00:00","OriginURL":"https://www.elastic.co/blog/black-hat-2023-takeaways","SourceName":"Elastic"}},{"node":{"ID":4407,"Title":"Medical research made understandable with AI (ep. 601)","Description":"<p>On today’s episode we chat with CEO Dipanwita Das and CTO Hellmut Adolphs of Sorcero, which uses AI and large language models to make medical texts more discoverable and readable, helping knowledge to more easily spread, increasing the changes doctors and patients will find the solutions they need.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://stackoverflow.blog/2023/08/22/medical-research-made-understandable-with-ai/\">Medical research made understandable with AI (ep. 601)</a> appeared first on <a rel=\"nofollow\" href=\"https://stackoverflow.blog\">Stack Overflow Blog</a>.</p>\n","PublishedAt":"2023-08-22 04:40:00+00:00","OriginURL":"https://stackoverflow.blog/2023/08/22/medical-research-made-understandable-with-ai/","SourceName":"Stack Overflow"}},{"node":{"ID":4409,"Title":"Structured Logging with slog","Description":"The Go 1.21 standard library includes a new structured logging package, log/slog.","PublishedAt":"2023-08-22 00:00:00+00:00","OriginURL":"https://go.dev/blog/slog","SourceName":"The Go Blog"}},{"node":{"ID":4421,"Title":"How we use Datadog CSM to improve security posture in our cloud infrastructure","Description":"<img class=\"webfeedsFeaturedVisual rss\" src=\"https://imgix.datadoghq.com/img/blog/csm-at-datadog/csm-at-datadog-hero.png\" width=\"100%\"/>In complex cloud environments where the speed of development is accelerated, managing infrastructure and resource configurations can be an overwhelming task—particularly when certifications and compliance frameworks like PCI, HIPAA, and SOC 2 present a lengthy list of requirements. DevOps and engineering teams need to ship code updates at a rapid pace, making it easy for them to accidentally overlook misconfigurations. Meanwhile, security teams often don’t have the context they need to understand resource behavior and ownership, identify the highest-priority vulnerabilities in the environment, and communicate the necessary changes to developers.","PublishedAt":"2023-08-22 00:00:00+00:00","OriginURL":"https://www.datadoghq.com/blog/csm-at-datadog/","SourceName":"Datadog"}},{"node":{"ID":4422,"Title":"Visualize team and application boundaries in the Service Map","Description":"<img class=\"webfeedsFeaturedVisual rss\" src=\"https://imgix.datadoghq.com/img/blog/service-map-team-application-boundaries/service-map-team-app-boundary-visualization-hero.png\" width=\"100%\"/>The complexity of microservice architectures can make it hard to determine where an application&rsquo;s dependencies begin and end and who manages which ones. This can pose a variety of challenges both in the course of day-to-day operations and during incidents. Lacking a clear picture of the ownership and interplay of your services can impede accountability and cause application development, incident investigations, and onboarding processes to become prolonged and haphazard.To prevent these difficulties, the Datadog Service Map now allows you to visualize team and application boundaries among your services.","PublishedAt":"2023-08-22 00:00:00+00:00","OriginURL":"https://www.datadoghq.com/blog/service-map-team-application-boundaries/","SourceName":"Datadog"}},{"node":{"ID":4436,"Title":"How to get actionable insights from your data","Description":"","PublishedAt":"2023-08-22 00:00:00+00:00","OriginURL":"https://www.elastic.co/blog/how-to-get-actionable-insights-from-your-data","SourceName":"Elastic"}},{"node":{"ID":4408,"Title":"HashiCorp updates licensing FAQ based on community questions","Description":"HashiCorp continues to update our licensing FAQ based on questions from the community about our change to the Business Source License for future releases of HashiCorp products.","PublishedAt":"2023-08-21 20:15:00+00:00","OriginURL":"https://www.hashicorp.com/blog/hashicorp-updates-licensing-faq-based-on-community-questions","SourceName":"HashiCorp"}},{"node":{"ID":4405,"Title":"AWS Weekly Roundup – AWS AppSync, AWS CodePipeline, Events and More – August 21, 2023","Description":"In a few days, I will board a plane towards the south. My tour around Latin America starts. But I won’t be alone in this adventure, you can find some other News Blog authors, like Jeff or Seb, speaking at AWS Community Days and local events in Peru, Argentina, Chile, and Uruguay. If you see […]","PublishedAt":"2023-08-21 18:04:10+00:00","OriginURL":"https://aws.amazon.com/blogs/aws/aws-weekly-roundup-aws-appsync-aws-codepipeline-events-and-more-august-21-2023/","SourceName":"AWS"}},{"node":{"ID":4404,"Title":"Highlights from Git 2.42","Description":"<p>Another new release of Git is here! Take a look at some of our highlights on what's new in Git 2.42.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://github.blog/2023-08-21-highlights-from-git-2-42/\">Highlights from Git 2.42</a> appeared first on <a rel=\"nofollow\" href=\"https://github.blog\">The GitHub Blog</a>.</p>\n","PublishedAt":"2023-08-21 17:45:07+00:00","OriginURL":"https://github.blog/2023-08-21-highlights-from-git-2-42/","SourceName":"GitHub"}},{"node":{"ID":4401,"Title":"Terraform ephemeral workspaces public beta now available ","Description":"Removing unused infrastructure resources is important not just for cost control, but for security as well.","PublishedAt":"2023-08-21 16:00:00+00:00","OriginURL":"https://www.hashicorp.com/blog/terraform-ephemeral-workspaces-public-beta-now-available","SourceName":"HashiCorp"}},{"node":{"ID":4403,"Title":"Future-proofing Evernote’s foundations","Description":"<p>An update from product lead Federico Simionato on Evernote's tech upgrades, user experience, and a glimpse into what's next.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://evernote.com/blog/future-proofing-evernotes-foundations/\">Future-proofing Evernote’s foundations</a> appeared first on <a rel=\"nofollow\" href=\"https://evernote.com/blog\"></a>.</p>\n","PublishedAt":"2023-08-21 14:56:04+00:00","OriginURL":"https://evernote.com/blog/future-proofing-evernotes-foundations/","SourceName":"Evernote"}},{"node":{"ID":4400,"Title":"Application Security Report: Q2 2023","Description":"We are back with a quarterly update of our Application Security report. Read on to learn about new attack trends and insights visible from Cloudflare’s global network","PublishedAt":"2023-08-21 14:15:46+00:00","OriginURL":"http://blog.cloudflare.com/application-security-report-q2-2023/","SourceName":"Cloudflare"}},{"node":{"ID":4398,"Title":"An August reading list about online security and 2023 attacks landscape","Description":"Here is a reading list with 2023 trends, what you need to know about attacks, and a guide on how to stay protected using Cloudflare","PublishedAt":"2023-08-21 13:00:57+00:00","OriginURL":"http://blog.cloudflare.com/an-august-reading-list-about-online-security-and-2023-attacks-landscape/","SourceName":"Cloudflare"}},{"node":{"ID":4397,"Title":"Blog: Kubernetes 1.28: Improved failure handling for Jobs","Description":"<p><strong>Authors:</strong> Kevin Hannon (G-Research), Michał Woźniak (Google)</p>\n<p>This blog discusses two new features in Kubernetes 1.28 to improve Jobs for batch\nusers: <a href=\"https://kubernetes.io/docs/concepts/workloads/controllers/job/#pod-replacement-policy\">Pod replacement policy</a>\nand <a href=\"https://kubernetes.io/docs/concepts/workloads/controllers/job/#backoff-limit-per-index\">Backoff limit per index</a>.</p>\n<p>These features continue the effort started by the\n<a href=\"https://kubernetes.io/docs/concepts/workloads/controllers/job/#pod-failure-policy\">Pod failure policy</a>\nto improve the handling of Pod failures in a Job.</p>\n<h2 id=\"pod-replacement-policy\">Pod replacement policy</h2>\n<p>By default, when a pod enters a terminating state (e.g. due to preemption or\neviction), Kubernetes immediately creates a replacement Pod. Therefore, both Pods are running\nat the same time. In API terms, a pod is considered terminating when it has a\n<code>deletionTimestamp</code> and it has a phase <code>Pending</code> or <code>Running</code>.</p>\n<p>The scenario when two Pods are running at a given time is problematic for\nsome popular machine learning frameworks, such as\nTensorFlow and <a href=\"https://jax.readthedocs.io/en/latest/\">JAX</a>, which require at most one Pod running at the same time,\nfor a given index.\nTensorflow gives the following error if two pods are running for a given index.</p>\n<pre tabindex=\"0\"><code> /job:worker/task:4: Duplicate task registration with task_name=/job:worker/replica:0/task:4\n</code></pre><p>See more details in the (<a href=\"https://github.com/kubernetes/kubernetes/issues/115844\">issue</a>).</p>\n<p>Creating the replacement Pod before the previous one fully terminates can also\ncause problems in clusters with scarce resources or with tight budgets, such as:</p>\n<ul>\n<li>cluster resources can be difficult to obtain for Pods pending to be scheduled,\nas Kubernetes might take a long time to find available nodes until the existing\nPods are fully terminated.</li>\n<li>if cluster autoscaler is enabled, the replacement Pods might produce undesired\nscale ups.</li>\n</ul>\n<h3 id=\"pod-replacement-policy-how-to-use\">How can you use it?</h3>\n<p>This is an alpha feature, which you can enable by turning on <code>JobPodReplacementPolicy</code>\n<a href=\"https://kubernetes.io/docs/reference/command-line-tools-reference/feature-gates/\">feature gate</a> in\nyour cluster.</p>\n<p>Once the feature is enabled in your cluster, you can use it by creating a new Job that specifies a\n<code>podReplacementPolicy</code> field as shown here:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex;\"><span><span style=\"color:#008000;font-weight:bold\">kind</span>:<span style=\"color:#bbb\"> </span>Job<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">metadata</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>new<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>...<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">spec</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">podReplacementPolicy</span>:<span style=\"color:#bbb\"> </span>Failed<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>...<span style=\"color:#bbb\">\n</span></span></span></code></pre></div><p>In that Job, the Pods would only be replaced once they reached the <code>Failed</code> phase,\nand not when they are terminating.</p>\n<p>Additionally, you can inspect the <code>.status.terminating</code> field of a Job. The value\nof the field is the number of Pods owned by the Job that are currently terminating.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-shell\" data-lang=\"shell\"><span style=\"display:flex;\"><span>kubectl get jobs/myjob -o<span style=\"color:#666\">=</span><span style=\"color:#b8860b\">jsonpath</span><span style=\"color:#666\">=</span><span style=\"color:#b44\">&#39;{.items[*].status.terminating}&#39;</span>\n</span></span></code></pre></div><pre tabindex=\"0\"><code>3 # three Pods are terminating and have not yet reached the Failed phase\n</code></pre><p>This can be particularly useful for external queueing controllers, such as\n<a href=\"https://github.com/kubernetes-sigs/kueue\">Kueue</a>, that tracks quota\nfrom running Pods of a Job until the resources are reclaimed from\nthe currently terminating Job.</p>\n<p>Note that the <code>podReplacementPolicy: Failed</code> is the default when using a custom\n<a href=\"https://kubernetes.io/docs/concepts/workloads/controllers/job/#pod-failure-policy\">Pod failure policy</a>.</p>\n<h2 id=\"backoff-limit-per-index\">Backoff limit per index</h2>\n<p>By default, Pod failures for <a href=\"https://kubernetes.io/docs/concepts/workloads/controllers/job/#completion-mode\">Indexed Jobs</a>\nare counted towards the global limit of retries, represented by <code>.spec.backoffLimit</code>.\nThis means, that if there is a consistently failing index, it is restarted\nrepeatedly until it exhausts the limit. Once the limit is reached the entire\nJob is marked failed and some indexes may never be even started.</p>\n<p>This is problematic for use cases where you want to handle Pod failures for\nevery index independently. For example, if you use Indexed Jobs for running\nintegration tests where each index corresponds to a testing suite. In that case,\nyou may want to account for possible flake tests allowing for 1 or 2 retries per\nsuite. There might be some buggy suites, making the corresponding\nindexes fail consistently. In that case you may prefer to limit retries for\nthe buggy suites, yet allowing other suites to complete.</p>\n<p>The feature allows you to:</p>\n<ul>\n<li>complete execution of all indexes, despite some indexes failing.</li>\n<li>better utilize the computational resources by avoiding unnecessary retries of consistently failing indexes.</li>\n</ul>\n<h3 id=\"backoff-limit-per-index-how-to-use\">How can you use it?</h3>\n<p>This is an alpha feature, which you can enable by turning on the\n<code>JobBackoffLimitPerIndex</code>\n<a href=\"https://kubernetes.io/docs/reference/command-line-tools-reference/feature-gates/\">feature gate</a>\nin your cluster.</p>\n<p>Once the feature is enabled in your cluster, you can create an Indexed Job with the\n<code>.spec.backoffLimitPerIndex</code> field specified.</p>\n<h4 id=\"example\">Example</h4>\n<p>The following example demonstrates how to use this feature to make sure the\nJob executes all indexes (provided there is no other reason for the early Job\ntermination, such as reaching the <code>activeDeadlineSeconds</code> timeout, or being\nmanually deleted by the user), and the number of failures is controlled per index.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex;\"><span><span style=\"color:#008000;font-weight:bold\">apiVersion</span>:<span style=\"color:#bbb\"> </span>batch/v1<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">kind</span>:<span style=\"color:#bbb\"> </span>Job<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">metadata</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>job-backoff-limit-per-index-execute-all<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">spec</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">completions</span>:<span style=\"color:#bbb\"> </span><span style=\"color:#666\">8</span><span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">parallelism</span>:<span style=\"color:#bbb\"> </span><span style=\"color:#666\">2</span><span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">completionMode</span>:<span style=\"color:#bbb\"> </span>Indexed<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">backoffLimitPerIndex</span>:<span style=\"color:#bbb\"> </span><span style=\"color:#666\">1</span><span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">template</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">spec</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">restartPolicy</span>:<span style=\"color:#bbb\"> </span>Never<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">containers</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>- <span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>example<span style=\"color:#bbb\"> </span><span style=\"color:#080;font-style:italic\"># this example container returns an error, and fails,</span><span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#080;font-style:italic\"># when it is run as the second or third index in any Job</span><span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#080;font-style:italic\"># (even after a retry) </span><span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">image</span>:<span style=\"color:#bbb\"> </span>python<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">command</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>- python3<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>- -c<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>- |<span style=\"color:#b44;font-style:italic\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b44;font-style:italic\"> import os, sys, time\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b44;font-style:italic\"> id = int(os.environ.get(&#34;JOB_COMPLETION_INDEX&#34;))\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b44;font-style:italic\"> if id == 1 or id == 2:\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b44;font-style:italic\"> sys.exit(1)\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b44;font-style:italic\"> time.sleep(1)</span><span style=\"color:#bbb\">\n</span></span></span></code></pre></div><p>Now, inspect the Pods after the job is finished:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-sh\" data-lang=\"sh\"><span style=\"display:flex;\"><span>kubectl get pods -l job-name<span style=\"color:#666\">=</span>job-backoff-limit-per-index-execute-all\n</span></span></code></pre></div><p>Returns output similar to this:</p>\n<pre tabindex=\"0\"><code>NAME READY STATUS RESTARTS AGE\njob-backoff-limit-per-index-execute-all-0-b26vc 0/1 Completed 0 49s\njob-backoff-limit-per-index-execute-all-1-6j5gd 0/1 Error 0 49s\njob-backoff-limit-per-index-execute-all-1-6wd82 0/1 Error 0 37s\njob-backoff-limit-per-index-execute-all-2-c66hg 0/1 Error 0 32s\njob-backoff-limit-per-index-execute-all-2-nf982 0/1 Error 0 43s\njob-backoff-limit-per-index-execute-all-3-cxmhf 0/1 Completed 0 33s\njob-backoff-limit-per-index-execute-all-4-9q6kq 0/1 Completed 0 28s\njob-backoff-limit-per-index-execute-all-5-z9hqf 0/1 Completed 0 28s\njob-backoff-limit-per-index-execute-all-6-tbkr8 0/1 Completed 0 23s\njob-backoff-limit-per-index-execute-all-7-hxjsq 0/1 Completed 0 22s\n</code></pre><p>Additionally, you can take a look at the status for that Job:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-sh\" data-lang=\"sh\"><span style=\"display:flex;\"><span>kubectl get <span style=\"color:#a2f\">jobs</span> job-backoff-limit-per-index-fail-index -o yaml\n</span></span></code></pre></div><p>The output ends with a <code>status</code> similar to:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">status</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">completedIndexes</span>:<span style=\"color:#bbb\"> </span><span style=\"color:#666\">0</span>,<span style=\"color:#666\">3-7</span><span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">failedIndexes</span>:<span style=\"color:#bbb\"> </span><span style=\"color:#666\">1</span>,<span style=\"color:#666\">2</span><span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">succeeded</span>:<span style=\"color:#bbb\"> </span><span style=\"color:#666\">6</span><span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">failed</span>:<span style=\"color:#bbb\"> </span><span style=\"color:#666\">4</span><span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">conditions</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>- <span style=\"color:#008000;font-weight:bold\">message</span>:<span style=\"color:#bbb\"> </span>Job has failed indexes<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">reason</span>:<span style=\"color:#bbb\"> </span>FailedIndexes<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">status</span>:<span style=\"color:#bbb\"> </span><span style=\"color:#b44\">&#34;True&#34;</span><span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">type</span>:<span style=\"color:#bbb\"> </span>Failed<span style=\"color:#bbb\">\n</span></span></span></code></pre></div><p>Here, indexes <code>1</code> and <code>2</code> were both retried once. After the second failure,\nin each of them, the specified <code>.spec.backoffLimitPerIndex</code> was exceeded, so\nthe retries were stopped. For comparison, if the per-index backoff was disabled,\nthen the buggy indexes would retry until the global <code>backoffLimit</code> was exceeded,\nand then the entire Job would be marked failed, before some of the higher\nindexes are started.</p>\n<h2 id=\"how-can-you-learn-more\">How can you learn more?</h2>\n<ul>\n<li>Read the user-facing documentation for <a href=\"https://kubernetes.io/docs/concepts/workloads/controllers/job/#pod-replacement-policy\">Pod replacement policy</a>,\n<a href=\"https://kubernetes.io/docs/concepts/workloads/controllers/job/#backoff-limit-per-index\">Backoff limit per index</a>, and\n<a href=\"https://kubernetes.io/docs/concepts/workloads/controllers/job/#pod-failure-policy\">Pod failure policy</a></li>\n<li>Read the KEPs for <a href=\"https://github.com/kubernetes/enhancements/tree/master/keps/sig-apps/3939-allow-replacement-when-fully-terminated\">Pod Replacement Policy</a>,\n<a href=\"https://github.com/kubernetes/enhancements/tree/master/keps/sig-apps/3850-backoff-limits-per-index-for-indexed-jobs\">Backoff limit per index</a>, and\n<a href=\"https://github.com/kubernetes/enhancements/tree/master/keps/sig-apps/3329-retriable-and-non-retriable-failures\">Pod failure policy</a>.</li>\n</ul>\n<h2 id=\"getting-involved\">Getting Involved</h2>\n<p>These features were sponsored by <a href=\"https://github.com/kubernetes/community/tree/master/sig-apps\">SIG Apps</a>. Batch use cases are actively\nbeing improved for Kubernetes users in the\n<a href=\"https://github.com/kubernetes/community/tree/master/wg-batch\">batch working group</a>.\nWorking groups are relatively short-lived initiatives focused on specific goals.\nThe goal of the WG Batch is to improve experience for batch workload users, offer support for\nbatch processing use cases, and enhance the\nJob API for common use cases. If that interests you, please join the working\ngroup either by subscriping to our\n<a href=\"https://groups.google.com/a/kubernetes.io/g/wg-batch\">mailing list</a> or on\n<a href=\"https://kubernetes.slack.com/messages/wg-batch\">Slack</a>.</p>\n<h2 id=\"acknowledgments\">Acknowledgments</h2>\n<p>As with any Kubernetes feature, multiple people contributed to getting this\ndone, from testing and filing bugs to reviewing code.</p>\n<p>We would not have been able to achieve either of these features without Aldo\nCulquicondor (Google) providing excellent domain knowledge and expertise\nthroughout the Kubernetes ecosystem.</p>","PublishedAt":"2023-08-21 00:00:00+00:00","OriginURL":"https://kubernetes.io/blog/2023/08/21/kubernetes-1-28-jobapi-update/","SourceName":"Kubernetes"}},{"node":{"ID":4399,"Title":"Generative AI could change the healthcare industry faster than you think","Description":"","PublishedAt":"2023-08-21 00:00:00+00:00","OriginURL":"https://www.elastic.co/blog/generative-ai-healthcare-industry","SourceName":"Elastic"}},{"node":{"ID":4402,"Title":"Run Atomic Red Team detection tests in container environments with Datadog’s Workload Security Evaluator","Description":"<img class=\"webfeedsFeaturedVisual rss\" src=\"https://imgix.datadoghq.com/img/blog/workload-security-evaluator/evaluator-hero.png\" width=\"100%\"/>Ensuring your threat detection rules work as intended and provide sufficient coverage for major threats is a critical component of a security program. Red Canary’s Atomic Red Team—an open source library of detection tests that help teams validate the effectiveness of their security measures—has historically been the tool of choice for detection testing. But while the methods in Atomic Red Team are tried and true for traditional Windows and Linux hosts, evaluating detection coverage for containers and cloud environments can be more difficult and often requires extensive manual work.","PublishedAt":"2023-08-21 00:00:00+00:00","OriginURL":"https://www.datadoghq.com/blog/workload-security-evaluator/","SourceName":"Datadog"}},{"node":{"ID":4406,"Title":"Integrate Sigma detection rules with Datadog Cloud SIEM","Description":"<img class=\"webfeedsFeaturedVisual rss\" src=\"https://imgix.datadoghq.com/img/blog/sigma-rules-datadog-cloud-siem/dd_cloud_siem_open_source_sigma_support_blog_integration_230818_final.png\" width=\"100%\"/>As organizations grow, they naturally need to analyze logs from more data sources. But as these data sources expand in number and type, it becomes more difficult for teams to scale their security detection rules to keep up with the ever-changing threat landscape. Sigma is an open source project that aims to address this challenge. By leveraging the expertise of the open source community, Sigma enables security teams to implement out-of-the-box rules that cover a wide range of threat scenarios.","PublishedAt":"2023-08-21 00:00:00+00:00","OriginURL":"https://www.datadoghq.com/blog/sigma-rules-datadog-cloud-siem/","SourceName":"Datadog"}},{"node":{"ID":4396,"Title":"The Overflow #191: Between product and engineering","Description":"<p>Understanding SRE, LLM courtesy, and AI drift.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://stackoverflow.blog/2023/08/18/the-overflow-191-between-product-and-engineering/\">The Overflow #191: Between product and engineering</a> appeared first on <a rel=\"nofollow\" href=\"https://stackoverflow.blog\">Stack Overflow Blog</a>.</p>\n","PublishedAt":"2023-08-18 13:00:00+00:00","OriginURL":"https://stackoverflow.blog/2023/08/18/the-overflow-191-between-product-and-engineering/","SourceName":"Stack Overflow"}},{"node":{"ID":4395,"Title":"Developing Open GPT for Miro: Bringing the power of ChatGPT to your board","Description":"","PublishedAt":"2023-08-18 11:39:26+00:00","OriginURL":"https://medium.com/miro-engineering/developing-open-gpt-for-miro-bringing-the-power-of-chatgpt-to-your-board-b0516b517760?source=rss----555f7fd62a50---4","SourceName":"Miro Engineering"}},{"node":{"ID":4392,"Title":"Semantic search without the napalm grandma exploit (Ep. 600)","Description":"<p>Ben and senior software engineer Kyle Mitofsky are joined by two people who worked on the launch of Overflow AI: director of data science and data platform Michael Foree and senior software developer Alex Warren. They talk about how and why Stack Overflow launched semantic search, how to ensure a knowledge base is trustworthy, and why user prompts can make LLMs vulnerable to exploits.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://stackoverflow.blog/2023/08/18/semantic-search-without-the-napalm-grandma-exploit-ep-600/\">Semantic search without the napalm grandma exploit (Ep. 600)</a> appeared first on <a rel=\"nofollow\" href=\"https://stackoverflow.blog\">Stack Overflow Blog</a>.</p>\n","PublishedAt":"2023-08-18 04:40:00+00:00","OriginURL":"https://stackoverflow.blog/2023/08/18/semantic-search-without-the-napalm-grandma-exploit-ep-600/","SourceName":"Stack Overflow"}},{"node":{"ID":4389,"Title":"Blog: Kubernetes v1.28: Retroactive Default StorageClass move to GA","Description":"<p><strong>Author:</strong> Roman Bednář (Red Hat)</p>\n<p>Announcing graduation to General Availability (GA) - Retroactive Default StorageClass Assignment in Kubernetes v1.28!</p>\n<p>Kubernetes SIG Storage team is thrilled to announce that the &quot;Retroactive Default StorageClass Assignment&quot; feature,\nintroduced as an alpha in Kubernetes v1.25, has now graduated to GA and is officially part of the Kubernetes v1.28 release.\nThis enhancement brings a significant improvement to how default\n<a href=\"https://kubernetes.io/docs/concepts/storage/storage-classes/\">StorageClasses</a> are assigned to PersistentVolumeClaims (PVCs).</p>\n<p>With this feature enabled, you no longer need to create a default StorageClass first and then a PVC to assign the class.\nInstead, any PVCs without a StorageClass assigned will now be retroactively updated to include the default StorageClass.\nThis enhancement ensures that PVCs no longer get stuck in an unbound state, and storage provisioning works seamlessly,\neven when a default StorageClass is not defined at the time of PVC creation.</p>\n<h2 id=\"what-changed\">What changed?</h2>\n<p>The PersistentVolume (PV) controller has been modified to automatically assign a default StorageClass to any unbound\nPersistentVolumeClaim with the <code>storageClassName</code> not set. Additionally, the PersistentVolumeClaim\nadmission validation mechanism within\nthe API server has been adjusted to allow changing values from an unset state to an actual StorageClass name.</p>\n<h2 id=\"how-to-use-it\">How to use it?</h2>\n<p>As this feature has graduated to GA, there's no need to enable a feature gate anymore.\nSimply make sure you are running Kubernetes v1.28 or later, and the feature will be available for use.</p>\n<p>For more details, read about\n<a href=\"https://kubernetes.io/docs/concepts/storage/persistent-volumes/#retroactive-default-storageclass-assignment\">default StorageClass assignment</a> in the Kubernetes documentation.\nYou can also read the previous <a href=\"https://kubernetes.io/blog/2023/01/05/retroactive-default-storage-class/\">blog post</a> announcing beta graduation in v1.26.</p>\n<p>To provide feedback, join our <a href=\"https://github.com/kubernetes/community/tree/master/sig-storage\">Kubernetes Storage Special-Interest-Group</a> (SIG)\nor participate in discussions on our <a href=\"https://app.slack.com/client/T09NY5SBT/C09QZFCE5\">public Slack channel</a>.</p>","PublishedAt":"2023-08-18 00:00:00+00:00","OriginURL":"https://kubernetes.io/blog/2023/08/18/retroactive-default-storage-class-ga/","SourceName":"Kubernetes"}}]}},"pageContext":{"limit":30,"skip":270,"numPages":158,"currentPage":10}},"staticQueryHashes":["3649515864"]}