{"componentChunkName":"component---src-templates-blog-list-tsx","path":"/page/137","result":{"data":{"allPost":{"edges":[{"node":{"ID":1247,"Title":"Blog: Dockershim removal is coming. Are you ready?","Description":"<p><strong>Authors:</strong> Sergey Kanzhelev, Google. With reviews from Davanum Srinivas, Elana Hashman, Noah Kantrowitz, Rey Lejano.</p>\n<div class=\"alert alert-info\" role=\"alert\">\n<h4 class=\"alert-heading\">Poll closed</h4>\nThis poll closed on January 7, 2022.\n</div>\n<p>Last year we <a href=\"https://kubernetes.io/blog/2020/12/08/kubernetes-1-20-release-announcement/#dockershim-deprecation\">announced</a>\nthat Kubernetes' dockershim component (which provides a built-in integration for\nDocker Engine) is deprecated.</p>\n<p><em>Update: There's a <a href=\"https://kubernetes.io/blog/2020/12/02/dockershim-faq/\">Dockershim Deprecation FAQ</a>\nwith more information, and you can also discuss the deprecation via a dedicated\n<a href=\"https://github.com/kubernetes/kubernetes/issues/106917\">GitHub issue</a>.</em></p>\n<p>Our current plan is to remove dockershim from the Kubernetes codebase soon.\nWe are looking for feedback from you whether you are ready for dockershim\nremoval and to ensure that you are ready when the time comes.</p>\n<p><del>Please fill out this survey: <a href=\"https://forms.gle/svCJmhvTv78jGdSx8\">https://forms.gle/svCJmhvTv78jGdSx8</a></del></p>\n<p>The dockershim component that enables Docker as a Kubernetes container runtime is\nbeing deprecated in favor of runtimes that directly use the <a href=\"https://kubernetes.io/blog/2016/12/container-runtime-interface-cri-in-kubernetes/\">Container Runtime Interface</a>\ncreated for Kubernetes. Many Kubernetes users have migrated to\nother container runtimes without problems. However we see that dockershim is\nstill very popular. You may see some public numbers in recent <a href=\"https://www.datadoghq.com/container-report/#8\">Container Report</a> from DataDog.\nSome Kubernetes hosting vendors just recently enabled other runtimes support\n(especially for Windows nodes). And we know that many third party tools vendors\nare still not ready: <a href=\"https://kubernetes.io/docs/tasks/administer-cluster/migrating-from-dockershim/migrating-telemetry-and-security-agents/#telemetry-and-security-agent-vendors\">migrating telemetry and security agents</a>.</p>\n<p>At this point, we believe that there is feature parity between Docker and the\nother runtimes. Many end-users have used our <a href=\"https://kubernetes.io/docs/tasks/administer-cluster/migrating-from-dockershim/\">migration guide</a>\nand are running production workload using these different runtimes. The plan of\nrecord today is that dockershim will be removed in version 1.24, slated for\nrelease around April of next year. For those developing or running alpha and\nbeta versions, dockershim will be removed in December at the beginning of the\n1.24 release development cycle.</p>\n<p>There is only one month left to give us feedback. We want you to tell us how\nready you are.</p>\n<p><del>We are collecting opinions through this survey: <a href=\"https://forms.gle/svCJmhvTv78jGdSx8\">https://forms.gle/svCJmhvTv78jGdSx8</a></del>\nTo better understand preparedness for the dockershim removal, our survey is\nasking the version of Kubernetes you are currently using, and an estimate of\nwhen you think you will adopt Kubernetes 1.24. All the aggregated information\non dockershim removal readiness will be published.\nFree form comments will be reviewed by SIG Node leadership. If you want to\ndiscuss any details of migrating from dockershim, report bugs or adoption\nblockers, you can use one of the SIG Node contact options any time:\n<a href=\"https://github.com/kubernetes/community/tree/master/sig-node#contact\">https://github.com/kubernetes/community/tree/master/sig-node#contact</a></p>\n<p>Kubernetes is a mature project. This deprecation is another\nstep in the effort to get away from permanent beta features and providing more\nstability and compatibility guarantees. With the migration from dockershim you\nwill get more flexibility and choice of container runtime features as well as\nless dependencies of your apps on specific underlying technology. Please take\ntime to review the <a href=\"https://kubernetes.io/docs/tasks/administer-cluster/migrating-from-dockershim/\">dockershim migration documentation</a>\nand consult your Kubernetes hosting vendor (if you have one) what container runtime options are available for you.\nRead up <a href=\"https://kubernetes.io/docs/setup/production-environment/container-runtimes/#container-runtimes\">container runtime documentation with instructions on how to use containerd and CRI-O</a>\nto help prepare you when you're ready to upgrade to 1.24. CRI-O, containerd, and\nDocker with <a href=\"https://github.com/Mirantis/cri-dockerd\">Mirantis cri-dockerd</a> are\nnot the only container runtime options, we encourage you to explore the <a href=\"https://landscape.cncf.io/card-mode?category=container-runtime&amp;grouping=category\">CNCF landscape on container runtimes</a>\nin case another suits you better.</p>\n<p>Thank you!</p>","PublishedAt":"2021-11-12 00:00:00+00:00","OriginURL":"https://kubernetes.io/blog/2021/11/12/are-you-ready-for-dockershim-removal/","SourceName":"Kubernetes"}},{"node":{"ID":83,"Title":"The Responsibility of Tech: Reflections from Grace Hopper Celebration","Description":"","PublishedAt":"2021-11-11 15:33:52+00:00","OriginURL":"https://medium.com/groupon-eng/the-responsibility-of-tech-reflections-from-grace-hopper-celebration-bc2a4c84775f?source=rss----5c13a88f9872---4","SourceName":"Groupon"}},{"node":{"ID":765,"Title":"How Uber Migrated Financial Data from DynamoDB to Docstore","Description":"<h1><span style=\"font-weight: 400;\">Introduction</span></h1>\n<p><span style=\"font-weight: 400;\">Each day, Uber moves millions of people around the world and delivers tens of millions of food and grocery orders. This generates a large number of financial transactions that need to be stored with provable completeness, consistency, and compliance.  </span>&#8230;</p>\n<p>The post <a rel=\"nofollow\" href=\"https://eng.uber.com/dynamodb-to-docstore-migration/\">How Uber Migrated Financial Data from DynamoDB to Docstore</a> appeared first on <a rel=\"nofollow\" href=\"https://eng.uber.com\">Uber Engineering Blog</a>.</p>\n","PublishedAt":"2021-11-10 17:00:50+00:00","OriginURL":"https://eng.uber.com/dynamodb-to-docstore-migration/","SourceName":"Uber"}},{"node":{"ID":1130,"Title":"Instant Delivery: Report on Autonomous Delivery Robots","Description":"<p>Hello! This is Pramendra from the Advanced Technology Team. In the Advanced Technology Team, we research business and technology trends around the world. We’re excited to bring you another trend report based on our findings. Previously, we have discussed Social Commerce and in this post, we will be looking into Autonomous Delivery Robots and their [&hellip;]</p>\n","PublishedAt":"2021-11-09 18:07:25+00:00","OriginURL":"https://engineering.mercari.com/en/blog/entry/20211109-instant-delivery-report-on-autonomous-delivery-robots/","SourceName":"Mercari"}},{"node":{"ID":1248,"Title":"Blog: Non-root Containers And Devices","Description":"<p><strong>Author:</strong> Mikko Ylinen (Intel)</p>\n<p>The user/group ID related security settings in Pod's <code>securityContext</code> trigger a problem when users want to\ndeploy containers that use accelerator devices (via <a href=\"https://kubernetes.io/docs/concepts/extend-kubernetes/compute-storage-net/device-plugins/\">Kubernetes Device Plugins</a>) on Linux. In this blog\npost I talk about the problem and describe the work done so far to address it. It's not meant to be a long story about getting the <a href=\"https://github.com/kubernetes/kubernetes/issues/92211\">k/k issue</a> fixed.</p>\n<p>Instead, this post aims to raise awareness of the issue and to highlight important device use-cases too. This is needed as Kubernetes works on new related features such as support for user namespaces.</p>\n<h2 id=\"why-non-root-containers-can-t-use-devices-and-why-it-matters\">Why non-root containers can't use devices and why it matters</h2>\n<p>One of the key security principles for running containers in Kubernetes is the\nprinciple of least privilege. The Pod/container <code>securityContext</code> specifies the config\noptions to set, e.g., Linux capabilities, MAC policies, and user/group ID values to achieve this.</p>\n<p>Furthermore, the cluster admins are supported with tools like <a href=\"https://kubernetes.io/docs/concepts/security/pod-security-policy/\">PodSecurityPolicy</a> (deprecated) or\n<a href=\"https://kubernetes.io/docs/concepts/security/pod-security-admission/\">Pod Security Admission</a> (alpha) to enforce the desired security settings for pods that are being deployed in\nthe cluster. These settings could, for instance, require that containers must be <code>runAsNonRoot</code> or\nthat they are forbidden from running with root's group ID in <code>runAsGroup</code> or <code>supplementalGroups</code>.</p>\n<p>In Kubernetes, the kubelet builds the list of <a href=\"https://pkg.go.dev/k8s.io/cri-api@v0.22.1/pkg/apis/runtime/v1#Device\"><code>Device</code></a> resources to be made available to a container\n(based on inputs from the Device Plugins) and the list is included in the CreateContainer CRI message\nsent to the CRI container runtime. Each <code>Device</code> contains little information: host/container device\npaths and the desired devices cgroups permissions.</p>\n<p>The <a href=\"https://github.com/opencontainers/runtime-spec/blob/master/config-linux.md\">OCI Runtime Spec for Linux Container Configuration</a>\nexpects that in addition to the devices cgroup fields, more detailed information about the devices\nmust be provided:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex;\"><span>{<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">&#34;type&#34;: </span><span style=\"color:#b44\">&#34;&lt;string&gt;&#34;</span>,<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">&#34;path&#34;: </span><span style=\"color:#b44\">&#34;&lt;string&gt;&#34;</span>,<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">&#34;major&#34;: </span>&lt;int64&gt;,<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">&#34;minor&#34;: </span>&lt;int64&gt;,<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">&#34;fileMode&#34;: </span>&lt;uint32&gt;,<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">&#34;uid&#34;: </span>&lt;uint32&gt;,<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">&#34;gid&#34;: </span>&lt;uint32&gt;<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span>},<span style=\"color:#bbb\">\n</span></span></span></code></pre></div><p>The CRI container runtimes (containerd, CRI-O) are responsible for obtaining this information\nfrom the host for each <code>Device</code>. By default, the runtimes copy the host device's user and group IDs:</p>\n<ul>\n<li><code>uid</code> (uint32, OPTIONAL) - id of device owner in the container namespace.</li>\n<li><code>gid</code> (uint32, OPTIONAL) - id of device group in the container namespace.</li>\n</ul>\n<p>Similarly, the runtimes prepare other mandatory <code>config.json</code> sections based on the CRI fields,\nincluding the ones defined in <code>securityContext</code>: <code>runAsUser</code>/<code>runAsGroup</code>, which become part of the POSIX\nplatforms user structure via:</p>\n<ul>\n<li><code>uid</code> (int, REQUIRED) specifies the user ID in the container namespace.</li>\n<li><code>gid</code> (int, REQUIRED) specifies the group ID in the container namespace.</li>\n<li><code>additionalGids</code> (array of ints, OPTIONAL) specifies additional group IDs in the container namespace to be added to the process.</li>\n</ul>\n<p>However, the resulting <code>config.json</code> triggers a problem when trying to run containers with\nboth devices added and with non-root uid/gid set via <code>runAsUser</code>/<code>runAsGroup</code>: the container user process\nhas no permission to use the device even when its group id (gid, copied from host) was permissive to\nnon-root groups. This is because the container user does not belong to that host group (e.g., via <code>additionalGids</code>).</p>\n<p>Being able to run applications that use devices as non-root user is normal and expected to work so that\nthe security principles can be met. Therefore, several alternatives were considered to get the gap filled with what the PodSec/CRI/OCI supports today.</p>\n<h2 id=\"what-was-done-to-solve-the-issue\">What was done to solve the issue?</h2>\n<p>You might have noticed from the problem definition that it would at least be possible to workaround\nthe problem by manually adding the device gid(s) to <code>supplementalGroups</code>, or in\nthe case of just one device, set <code>runAsGroup</code> to the device's group id. However, this is problematic because the device gid(s) may have\ndifferent values depending on the nodes' distro/version in the cluster. For example, with GPUs the following commands for different distros and versions return different gids:</p>\n<p>Fedora 33:</p>\n<pre tabindex=\"0\"><code>$ ls -l /dev/dri/\ntotal 0\ndrwxr-xr-x. 2 root root 80 19.10. 10:21 by-path\ncrw-rw----+ 1 root video 226, 0 19.10. 10:42 card0\ncrw-rw-rw-. 1 root render 226, 128 19.10. 10:21 renderD128\n$ grep -e video -e render /etc/group\nvideo:x:39:\nrender:x:997:\n</code></pre><p>Ubuntu 20.04:</p>\n<pre tabindex=\"0\"><code>$ ls -l /dev/dri/\ntotal 0\ndrwxr-xr-x 2 root root 80 19.10. 17:36 by-path\ncrw-rw---- 1 root video 226, 0 19.10. 17:36 card0\ncrw-rw---- 1 root render 226, 128 19.10. 17:36 renderD128\n$ grep -e video -e render /etc/group\nvideo:x:44:\nrender:x:133:\n</code></pre><p>Which number to choose in your <code>securityContext</code>? Also, what if the <code>runAsGroup</code>/<code>runAsUser</code> values cannot be hard-coded because\nthey are automatically assigned during pod admission time via external security policies?</p>\n<p>Unlike volumes with <code>fsGroup</code>, the devices have no official notion of <code>deviceGroup</code>/<code>deviceUser</code> that the CRI runtimes (or kubelet)\nwould be able to use. We considered using container annotations set by the device plugins (e.g., <code>io.kubernetes.cri.hostDeviceSupplementalGroup/</code>) to get custom OCI <code>config.json</code> uid/gid values.\nThis would have required changes to all existing device plugins which was not ideal.</p>\n<p>Instead, a solution that is <em>seamless</em> to end-users without getting the device plugin vendors involved was preferred. The selected approach was\nto re-use <code>runAsUser</code> and <code>runAsGroup</code> values in <code>config.json</code> for devices:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex;\"><span>{<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">&#34;type&#34;: </span><span style=\"color:#b44\">&#34;c&#34;</span>,<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">&#34;path&#34;: </span><span style=\"color:#b44\">&#34;/dev/foo&#34;</span>,<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">&#34;major&#34;: </span><span style=\"color:#666\">123</span>,<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">&#34;minor&#34;: </span><span style=\"color:#666\">4</span>,<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">&#34;fileMode&#34;: </span><span style=\"color:#666\">438</span>,<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">&#34;uid&#34;: </span>&lt;runAsUser&gt;,<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">&#34;gid&#34;: </span>&lt;runAsGroup&gt;<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span>},<span style=\"color:#bbb\">\n</span></span></span></code></pre></div><p>With <code>runc</code> OCI runtime (in non-rootless mode), the device is created (<code>mknod(2)</code>) in\nthe container namespace and the ownership is changed to <code>runAsUser</code>/<code>runAsGroup</code> using <code>chmod(2)</code>.</p>\n<p><div class=\"alert alert-info note callout\" role=\"alert\">\n<strong>Note:</strong> <a href=\"https://kubernetes.io/docs/tasks/administer-cluster/kubelet-in-userns/\">Rootless mode</a> and devices is not supported.\n</div>\nHaving the ownership updated in the container namespace is justified as the user process is the only one accessing the device. Only <code>runAsUser</code>/<code>runAsGroup</code>\nare taken into account, and, e.g., the <code>USER</code> setting in the container is currently ignored.</p>\n<p>While it is likely that the &quot;faulty&quot; deployments (i.e., non-root <code>securityContext</code> + devices) do not exist, to be absolutely sure no\ndeployments break, an opt-in config entry in both containerd and CRI-O to enable the new behavior was added. The following:</p>\n<p><code>device_ownership_from_security_context (bool)</code></p>\n<p>defaults to <code>false</code> and must be enabled to use the feature.</p>\n<h2 id=\"see-non-root-containers-using-devices-after-the-fix\">See non-root containers using devices after the fix</h2>\n<p>To demonstrate the new behavior, let's use a Data Plane Development Kit (DPDK) application using hardware accelerators, Kubernetes CPU manager, and HugePages as an example. The cluster runs containerd with:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-toml\" data-lang=\"toml\"><span style=\"display:flex;\"><span>[plugins]\n</span></span><span style=\"display:flex;\"><span> [plugins.<span style=\"color:#b44\">&#34;io.containerd.grpc.v1.cri&#34;</span>]\n</span></span><span style=\"display:flex;\"><span> device_ownership_from_security_context = <span style=\"color:#a2f;font-weight:bold\">true</span>\n</span></span></code></pre></div><p>or CRI-O with:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-toml\" data-lang=\"toml\"><span style=\"display:flex;\"><span>[crio.runtime]\n</span></span><span style=\"display:flex;\"><span>device_ownership_from_security_context = <span style=\"color:#a2f;font-weight:bold\">true</span>\n</span></span></code></pre></div><p>and the <code>Guaranteed</code> QoS Class Pod that runs DPDK's crypto-perf test utility with this YAML:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex;\"><span><span style=\"color:#00f;font-weight:bold\">...</span><span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">metadata</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>qat-dpdk<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">spec</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">securityContext</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">runAsUser</span>:<span style=\"color:#bbb\"> </span><span style=\"color:#666\">1000</span><span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">runAsGroup</span>:<span style=\"color:#bbb\"> </span><span style=\"color:#666\">2000</span><span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">fsGroup</span>:<span style=\"color:#bbb\"> </span><span style=\"color:#666\">3000</span><span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">containers</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>- <span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>crypto-perf<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">image</span>:<span style=\"color:#bbb\"> </span>intel/crypto-perf:devel<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>...<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">resources</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">requests</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">cpu</span>:<span style=\"color:#bbb\"> </span><span style=\"color:#b44\">&#34;3&#34;</span><span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">memory</span>:<span style=\"color:#bbb\"> </span><span style=\"color:#b44\">&#34;128Mi&#34;</span><span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">qat.intel.com/generic</span>:<span style=\"color:#bbb\"> </span><span style=\"color:#b44\">&#39;4&#39;</span><span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">hugepages-2Mi</span>:<span style=\"color:#bbb\"> </span><span style=\"color:#b44\">&#34;128Mi&#34;</span><span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">limits</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">cpu</span>:<span style=\"color:#bbb\"> </span><span style=\"color:#b44\">&#34;3&#34;</span><span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">memory</span>:<span style=\"color:#bbb\"> </span><span style=\"color:#b44\">&#34;128Mi&#34;</span><span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">qat.intel.com/generic</span>:<span style=\"color:#bbb\"> </span><span style=\"color:#b44\">&#39;4&#39;</span><span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">hugepages-2Mi</span>:<span style=\"color:#bbb\"> </span><span style=\"color:#b44\">&#34;128Mi&#34;</span><span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>...<span style=\"color:#bbb\">\n</span></span></span></code></pre></div><p>To verify the results, check the user and group ID that the container runs as:</p>\n<pre tabindex=\"0\"><code>$ kubectl exec -it qat-dpdk -c crypto-perf -- id\n</code></pre><p>They are set to non-zero values as expected:</p>\n<pre tabindex=\"0\"><code>uid=1000 gid=2000 groups=2000,3000\n</code></pre><p>Next, check the device node permissions (<code>qat.intel.com/generic</code> exposes <code>/dev/vfio/</code> devices) are accessible to <code>runAsUser</code>/<code>runAsGroup</code>:</p>\n<pre tabindex=\"0\"><code>$ kubectl exec -it qat-dpdk -c crypto-perf -- ls -la /dev/vfio\ntotal 0\ndrwxr-xr-x 2 root root 140 Sep 7 10:55 .\ndrwxr-xr-x 7 root root 380 Sep 7 10:55 ..\ncrw------- 1 1000 2000 241, 0 Sep 7 10:55 58\ncrw------- 1 1000 2000 241, 2 Sep 7 10:55 60\ncrw------- 1 1000 2000 241, 10 Sep 7 10:55 68\ncrw------- 1 1000 2000 241, 11 Sep 7 10:55 69\ncrw-rw-rw- 1 1000 2000 10, 196 Sep 7 10:55 vfio\n</code></pre><p>Finally, check the non-root container is also allowed to create HugePages:</p>\n<pre tabindex=\"0\"><code>$ kubectl exec -it qat-dpdk -c crypto-perf -- ls -la /dev/hugepages/\n</code></pre><p><code>fsGroup</code> gives a <code>runAsUser</code> writable HugePages emptyDir mountpoint:</p>\n<pre tabindex=\"0\"><code>total 0\ndrwxrwsr-x 2 root 3000 0 Sep 7 10:55 .\ndrwxr-xr-x 7 root root 380 Sep 7 10:55 ..\n</code></pre><h2 id=\"help-us-test-it-and-provide-feedback\">Help us test it and provide feedback!</h2>\n<p>The functionality described here is expected to help with cluster security and the configurability of device permissions. To allow\nnon-root containers to use devices requires cluster admins to opt-in to the functionality by setting\n<code>device_ownership_from_security_context = true</code>. To make it a default setting, please test it and provide your feedback (via SIG-Node meetings or issues)!\nThe flag is available in CRI-O v1.22 release and queued for containerd v1.6.</p>\n<p>More work is needed to get it <em>properly</em> supported. It is known to work with <code>runc</code> but it also needs to be made to function\nwith other OCI runtimes too, where applicable. For instance, Kata Containers supports device passthrough and allows it to make devices\navailable to containers in VM sandboxes too.</p>\n<p>Moreover, the additional challenge comes with support of user names and devices. This problem is still <a href=\"https://github.com/kubernetes/enhancements/pull/2101\">open</a>\nand requires more brainstorming.</p>\n<p>Finally, it needs to be understood whether <code>runAsUser</code>/<code>runAsGroup</code> are enough or if device specific settings similar to <code>fsGroups</code> are needed in PodSpec/CRI v2.</p>\n<h2 id=\"thanks\">Thanks</h2>\n<p>My thanks goes to Mike Brown (IBM, containerd), Peter Hunt (Redhat, CRI-O), and Alexander Kanevskiy (Intel) for providing all the feedback and good conversations.</p>","PublishedAt":"2021-11-09 00:00:00+00:00","OriginURL":"https://kubernetes.io/blog/2021/11/09/non-root-containers-and-devices/","SourceName":"Kubernetes"}},{"node":{"ID":470,"Title":"Using product analytics to find metrics that connect to retention","Description":"<figure><img src=\"https://mixpanel.com/wp-content/uploads/2021/11/Blog-34-1-1024x577.png\" class=\"type:primaryImage\" /></figure>\n<p>Let me jump right in: With product analytics, customer retention isn’t just something you measure after the fact; it should be something you can learn to find specific metric connections for (and then improve). I get it—data and analytics sound technical and scary, something only “really smart analytical people” should touch. How could a product</p>\n<p>The post <a rel=\"nofollow\" href=\"https://mixpanel.com/blog/product-analytics-predict-retention/\">Using product analytics to find metrics that connect to retention</a> appeared first on <a rel=\"nofollow\" href=\"https://mixpanel.com\">Mixpanel</a>.</p>\n","PublishedAt":"2021-11-08 21:09:00+00:00","OriginURL":"https://mixpanel.com/blog/product-analytics-predict-retention/","SourceName":"Mixpanel"}},{"node":{"ID":1249,"Title":"Blog: Announcing the 2021 Steering Committee Election Results","Description":"<p><strong>Author</strong>: Kaslin Fields</p>\n<p>The <a href=\"https://github.com/kubernetes/community/tree/master/events/elections/2021\">2021 Steering Committee Election</a> is now complete. The Kubernetes Steering Committee consists of 7 seats, 4 of which were up for election in 2021. Incoming committee members serve a term of 2 years, and all members are elected by the Kubernetes Community.</p>\n<p>This community body is significant since it oversees the governance of the entire Kubernetes project. With that great power comes great responsibility. You can learn more about the steering committee’s role in their <a href=\"https://github.com/kubernetes/steering/blob/master/charter.md\">charter</a>.</p>\n<h2 id=\"results\">Results</h2>\n<p>Congratulations to the elected committee members whose two year terms begin immediately (listed in alphabetical order by GitHub handle):</p>\n<ul>\n<li><strong>Christoph Blecker (<a href=\"https://github.com/cblecker\">@cblecker</a>), Red Hat</strong></li>\n<li><strong>Stephen Augustus (<a href=\"https://github.com/justaugustus\">@justaugustus</a>), Cisco</strong></li>\n<li><strong>Paris Pittman (<a href=\"https://github.com/parispittman\">@parispittman</a>), Apple</strong></li>\n<li><strong>Tim Pepper (<a href=\"https://github.com/tpepper\">@tpepper</a>), VMware</strong></li>\n</ul>\n<p>They join continuing members:</p>\n<ul>\n<li><strong>Davanum Srinivas (<a href=\"https://github.com/dims\">@dims</a>), VMware</strong></li>\n<li><strong>Jordan Liggitt (<a href=\"https://github.com/liggitt\">@liggitt</a>), Google</strong></li>\n<li><strong>Bob Killen (<a href=\"https://github.com/mrbobbytables\">@mrbobbytables</a>), Google</strong></li>\n</ul>\n<p>Paris Pittman and Christoph Blecker are returning Steering Committee Members.</p>\n<h2 id=\"big-thanks\">Big Thanks</h2>\n<p>Thank you and congratulations on a successful election to this round’s election officers:</p>\n<ul>\n<li>Alison Dowdney, (<a href=\"https://github.com/alisondy\">@alisondy</a>)</li>\n<li>Noah Kantrowitz (<a href=\"https://github.com/coderanger\">@coderanger</a>)</li>\n<li>Josh Berkus (<a href=\"https://github.com/jberkus\">@jberkus</a>)</li>\n</ul>\n<p>Special thanks to Arnaud Meukam (<a href=\"https://github.com/ameukam\">@ameukam</a>), k8s-infra liaison, who enabled our voting software on community-owned infrastructure.</p>\n<p>Thanks to the Emeritus Steering Committee Members. Your prior service is appreciated by the community:</p>\n<ul>\n<li>Derek Carr (<a href=\"https://github.com/derekwaynecarr\">@derekwaynecarr</a>)</li>\n<li>Nikhita Raghunath (<a href=\"https://github.com/nikhita\">@nikhita</a>)</li>\n</ul>\n<p>And thank you to all the candidates who came forward to run for election.</p>\n<h2 id=\"get-involved-with-the-steering-committee\">Get Involved with the Steering Committee</h2>\n<p>This governing body, like all of Kubernetes, is open to all. You can follow along with Steering Committee <a href=\"https://github.com/kubernetes/steering/projects/1\">backlog items</a> and weigh in by filing an issue or creating a PR against their <a href=\"https://github.com/kubernetes/steering\">repo</a>. They have an open meeting on <a href=\"https://github.com/kubernetes/steering\">the first Monday at 9:30am PT of every month</a> and regularly attend Meet Our Contributors. They can also be contacted at their public mailing list <a href=\"mailto:steering@kubernetes.io\">steering@kubernetes.io</a>.</p>\n<p>You can see what the Steering Committee meetings are all about by watching past meetings on the <a href=\"https://www.youtube.com/playlist?list=PL69nYSiGNLP1yP1B_nd9-drjoxp0Q14qM\">YouTube Playlist</a>.</p>\n<hr>\n<p><em>This post was written by the <a href=\"https://github.com/kubernetes/community/tree/master/communication/marketing-team#contributor-marketing\">Upstream Marketing Working Group</a>. If you want to write stories about the Kubernetes community, learn more about us.</em></p>","PublishedAt":"2021-11-08 00:00:00+00:00","OriginURL":"https://kubernetes.io/blog/2021/11/08/steering-committee-results-2021/","SourceName":"Kubernetes"}},{"node":{"ID":531,"Title":"Modernizing Our Search Stack","Description":"","PublishedAt":"2021-11-02 14:10:44+00:00","OriginURL":"https://engblog.nextdoor.com/modernizing-our-search-stack-6a56ab87db4e?source=rss----5e54f11cdfdf---4","SourceName":"Nextdoor"}},{"node":{"ID":397,"Title":"Catalog Localization: more than just a translation!","Description":"","PublishedAt":"2021-11-01 17:43:52+00:00","OriginURL":"https://tech.instacart.com/catalog-localization-more-than-just-a-translation-7251675dc12b?source=rss----587883b5d2ee---4","SourceName":"Instacart"}},{"node":{"ID":84,"Title":"Pinion — The Load Framework Part-2","Description":"","PublishedAt":"2021-10-29 16:50:24+00:00","OriginURL":"https://medium.com/groupon-eng/pinion-the-load-framework-part-2-e6a47586e7be?source=rss----5c13a88f9872---4","SourceName":"Groupon"}},{"node":{"ID":532,"Title":"Running ML Inference Services in Shared Hosting Environments","Description":"","PublishedAt":"2021-10-29 15:25:38+00:00","OriginURL":"https://engblog.nextdoor.com/running-ml-inference-services-in-shared-hosting-environments-6176b39bc9b7?source=rss----5e54f11cdfdf---4","SourceName":"Nextdoor"}},{"node":{"ID":611,"Title":"trivago Tech Week 2021 in Review","Description":"","PublishedAt":"2021-10-27 00:00:00+00:00","OriginURL":"https://tech.trivago.com/post/2021-10-27-trivagotechweek2021hybridedition/","SourceName":"Trivago"}},{"node":{"ID":471,"Title":"Being more ‘self-serve’ using product analytics","Description":"<figure><img src=\"https://mixpanel.com/wp-content/uploads/2021/10/Chameleon.png@2x-1024x576.png\" class=\"type:primaryImage\" /></figure>\n<p>Imagine your ideal customer discovering your product for the first time. It&#8217;s exactly the kind of tool they want to include in their tech stack. They&#8217;re eager to give it a try before they invite their teammates, so they opt for a free trial only to realize it’s not quite clear where to start.&#160; There</p>\n<p>The post <a rel=\"nofollow\" href=\"https://mixpanel.com/blog/make-your-product-self-serve-with-product-analytics/\">Being more ‘self-serve’ using product analytics</a> appeared first on <a rel=\"nofollow\" href=\"https://mixpanel.com\">Mixpanel</a>.</p>\n","PublishedAt":"2021-10-25 19:05:00+00:00","OriginURL":"https://mixpanel.com/blog/make-your-product-self-serve-with-product-analytics/","SourceName":"Mixpanel"}},{"node":{"ID":766,"Title":"Introducing uGroup: Uber’s Consumer Management Framework","Description":"<h1><b>Background</b></h1>\n<p><span style=\"font-weight: 400;\">Apache Kafka<sup>®</sup></span><span style=\"font-weight: 400;\"> is widely used across Uber’s multiple business lines. Take the example of an Uber ride: When a user opens up the Uber app, demand and supply data are aggregated in Kafka queues to serve fare calculations. </span>&#8230;</p>\n<p>The post <a rel=\"nofollow\" href=\"https://eng.uber.com/introducing-ugroup-ubers-consumer-management-framework/\">Introducing uGroup: Uber’s Consumer Management Framework</a> appeared first on <a rel=\"nofollow\" href=\"https://eng.uber.com\">Uber Engineering Blog</a>.</p>\n","PublishedAt":"2021-10-21 16:00:52+00:00","OriginURL":"https://eng.uber.com/introducing-ugroup-ubers-consumer-management-framework/","SourceName":"Uber"}},{"node":{"ID":1269,"Title":"Fluent setter: breaking the convention","Description":"","PublishedAt":"2021-10-18 07:52:17+00:00","OriginURL":"https://medium.com/miro-engineering/fluent-setter-breaking-the-convention-33ce3433126e?source=rss----555f7fd62a50---4","SourceName":"Miro Engineering"}},{"node":{"ID":1250,"Title":"Blog: Use KPNG to Write Specialized kube-proxiers","Description":"<p><strong>Author</strong>: Lars Ekman (Ericsson)</p>\n<p>The post will show you how to create a specialized service kube-proxy\nstyle network proxier using Kubernetes Proxy NG\n<a href=\"https://github.com/kubernetes-sigs/kpng\">kpng</a> without interfering\nwith the existing kube-proxy. The kpng project aims at renewing the\nthe default Kubernetes Service implementation, the &quot;kube-proxy&quot;. An\nimportant feature of kpng is that it can be used as a library to\ncreate proxiers outside K8s. While this is useful for CNI-plugins that\nreplaces the kube-proxy it also opens the possibility for anyone to\ncreate a proxier for a special purpose.</p>\n<h2 id=\"define-a-service-that-uses-a-specialized-proxier\">Define a service that uses a specialized proxier</h2>\n<pre tabindex=\"0\"><code>apiVersion: v1\nkind: Service\nmetadata:\nname: kpng-example\nlabels:\nservice.kubernetes.io/service-proxy-name: kpng-example\nspec:\nclusterIP: None\nipFamilyPolicy: RequireDualStack\nexternalIPs:\n- 10.0.0.55\n- 1000::55\nselector:\napp: kpng-alpine\nports:\n- port: 6000\n</code></pre><p>If the <code>service.kubernetes.io/service-proxy-name</code> label is defined the\n<code>kube-proxy</code> will ignore the service. A custom controller can watch\nservices with the label set to it's own name, &quot;kpng-example&quot; in\nthis example, and setup specialized load-balancing.</p>\n<p>The <code>service.kubernetes.io/service-proxy-name</code> label is <a href=\"https://kubernetes.io/docs/reference/labels-annotations-taints/#servicekubernetesioservice-proxy-name\">not\nnew</a>,\nbut so far is has been quite hard to write a specialized proxier.</p>\n<p>The common use for a specialized proxier is assumed to be handling\nexternal traffic for some use-case not supported by K8s. In that\ncase <code>ClusterIP</code> is not needed, so we use a &quot;headless&quot; service in this\nexample.</p>\n<h2 id=\"specialized-proxier-using-kpng\">Specialized proxier using kpng</h2>\n<p>A <a href=\"https://github.com/kubernetes-sigs/kpng\">kpng</a> based proxier\nconsists of the <code>kpng</code> controller handling all the K8s api related\nfunctions, and a &quot;backend&quot; implementing the load-balancing. The\nbackend can be linked with the <code>kpng</code> controller binary or be a\nseparate program communicating with the controller using gRPC.</p>\n<pre tabindex=\"0\"><code>kpng kube --service-proxy-name=kpng-example to-api\n</code></pre><p>This starts the <code>kpng</code> controller and tell it to watch only services\nwith the &quot;kpng-example&quot; service proxy name. The &quot;to-api&quot; parameter\nwill open a gRPC server for backends.</p>\n<p>You can test this yourself outside your cluster. Please see the example\nbelow.</p>\n<p>Now we start a backend that simply prints the updates from the\ncontroller.</p>\n<pre tabindex=\"0\"><code>$ kubectl apply -f kpng-example.yaml\n$ kpng-json | jq # (this is the backend)\n{\n&#34;Service&#34;: {\n&#34;Namespace&#34;: &#34;default&#34;,\n&#34;Name&#34;: &#34;kpng-example&#34;,\n&#34;Type&#34;: &#34;ClusterIP&#34;,\n&#34;IPs&#34;: {\n&#34;ClusterIPs&#34;: {},\n&#34;ExternalIPs&#34;: {\n&#34;V4&#34;: [\n&#34;10.0.0.55&#34;\n],\n&#34;V6&#34;: [\n&#34;1000::55&#34;\n]\n},\n&#34;Headless&#34;: true\n},\n&#34;Ports&#34;: [\n{\n&#34;Protocol&#34;: 1,\n&#34;Port&#34;: 6000,\n&#34;TargetPort&#34;: 6000\n}\n]\n},\n&#34;Endpoints&#34;: [\n{\n&#34;IPs&#34;: {\n&#34;V6&#34;: [\n&#34;1100::202&#34;\n]\n},\n&#34;Local&#34;: true\n},\n{\n&#34;IPs&#34;: {\n&#34;V4&#34;: [\n&#34;11.0.2.2&#34;\n]\n},\n&#34;Local&#34;: true\n},\n{\n&#34;IPs&#34;: {\n&#34;V4&#34;: [\n&#34;11.0.1.2&#34;\n]\n}\n},\n{\n&#34;IPs&#34;: {\n&#34;V6&#34;: [\n&#34;1100::102&#34;\n]\n}\n}\n]\n}\n</code></pre><p>A real backend would use some mechanism to load-balance traffic from\nthe external IPs to the endpoints.</p>\n<h2 id=\"writing-a-backend\">Writing a backend</h2>\n<p>The <code>kpng-json</code> backend looks like this:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-go\" data-lang=\"go\"><span style=\"display:flex;\"><span><span style=\"color:#a2f;font-weight:bold\">package</span> main\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#a2f;font-weight:bold\">import</span> (\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#b44\">&#34;os&#34;</span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#b44\">&#34;encoding/json&#34;</span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#b44\">&#34;sigs.k8s.io/kpng/client&#34;</span>\n</span></span><span style=\"display:flex;\"><span>)\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#a2f;font-weight:bold\">func</span> <span style=\"color:#00a000\">main</span>() {\n</span></span><span style=\"display:flex;\"><span> client.<span style=\"color:#00a000\">Run</span>(jsonPrint)\n</span></span><span style=\"display:flex;\"><span>}\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#a2f;font-weight:bold\">func</span> <span style=\"color:#00a000\">jsonPrint</span>(items []<span style=\"color:#666\">*</span>client.ServiceEndpoints) {\n</span></span><span style=\"display:flex;\"><span> enc <span style=\"color:#666\">:=</span> json.<span style=\"color:#00a000\">NewEncoder</span>(os.Stdout)\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#a2f;font-weight:bold\">for</span> _, item <span style=\"color:#666\">:=</span> <span style=\"color:#a2f;font-weight:bold\">range</span> items {\n</span></span><span style=\"display:flex;\"><span> _ = enc.<span style=\"color:#00a000\">Encode</span>(item)\n</span></span><span style=\"display:flex;\"><span> }\n</span></span><span style=\"display:flex;\"><span>}\n</span></span></code></pre></div><p>(yes, that is the entire program)</p>\n<p>A real backend would of course be much more complex, but this\nillustrates how <code>kpng</code> let you focus on load-balancing.</p>\n<p>You can have several backends connected to a <code>kpng</code> controller, so\nduring development or debug it can be useful to let something like the\n<code>kpng-json</code> backend run in parallel with your real backend.</p>\n<h2 id=\"example\">Example</h2>\n<p>The complete example can be found <a href=\"https://github.com/kubernetes-sigs/kpng/tree/master/examples/pipe-exec\">here</a>.</p>\n<p>As an example we implement an &quot;all-ip&quot; backend. It direct all traffic\nfor the externalIPs to a local endpoint, regardless of ports and upper\nlayer protocols. There is a\n<a href=\"https://github.com/kubernetes/enhancements/pull/2611\">KEP</a> for this\nfunction and this example is a much simplified version.</p>\n<p>To direct all traffic from an external address to a local POD <a href=\"https://github.com/kubernetes/enhancements/pull/2611#issuecomment-895061013\">only\none iptables rule is\nneeded</a>,\nfor instance;</p>\n<pre tabindex=\"0\"><code>ip6tables -t nat -A PREROUTING -d 1000::55/128 -j DNAT --to-destination 1100::202\n</code></pre><p>As you can see the addresses are in the call to the backend and all it\nhave to do is:</p>\n<ul>\n<li>Extract the addresses with <code>Local: true</code></li>\n<li>Setup iptables rules for the <code>ExternalIPs</code></li>\n</ul>\n<p>A script doing that may look like:</p>\n<pre tabindex=\"0\"><code>xip=$(cat /tmp/out | jq -r .Service.IPs.ExternalIPs.V6[0])\npodip=$(cat /tmp/out | jq -r &#39;.Endpoints[]|select(.Local == true)|select(.IPs.V6 != null)|.IPs.V6[0]&#39;)\nip6tables -t nat -A PREROUTING -d $xip/128 -j DNAT --to-destination $podip\n</code></pre><p>Assuming the JSON output above is stored in <code>/tmp/out</code> (<a href=\"https://stedolan.github.io/jq/\">jq</a> is an <em>awesome</em> program!).</p>\n<p>As this is an example we make it really simple for ourselves by using\na minor variation of the <code>kpng-json</code> backend above. Instead of just\nprinting, a program is called and the JSON output is passed as <code>stdin</code>\nto that program. The backend can be tested stand-alone:</p>\n<pre tabindex=\"0\"><code>CALLOUT=jq kpng-callout\n</code></pre><p>Where <code>jq</code> can be replaced with your own program or script. A script\nmay look like the example above. For more info and the complete\nexample please see <a href=\"https://github.com/kubernetes-sigs/kpng/tree/master/examples/pipe-exec\">https://github.com/kubernetes-sigs/kpng/tree/master/examples/pipe-exec</a>.</p>\n<h2 id=\"summary\">Summary</h2>\n<p>While <a href=\"https://github.com/kubernetes-sigs/kpng\">kpng</a> is in early\nstage of development this post wants to show how you may build your\nown specialized K8s proxiers in the future. The only thing your\napplications need to do is to add the\n<code>service.kubernetes.io/service-proxy-name</code> label in the Service\nmanifest.</p>\n<p>It is a tedious process to get new features into the <code>kube-proxy</code> and\nit is not unlikely that they will be rejected, so to write a\nspecialized proxier may be the only option.</p>","PublishedAt":"2021-10-18 00:00:00+00:00","OriginURL":"https://kubernetes.io/blog/2021/10/18/use-kpng-to-write-specialized-kube-proxiers/","SourceName":"Kubernetes"}},{"node":{"ID":472,"Title":"Product analytics improves patient experience","Description":"<figure><img src=\"https://mixpanel.com/wp-content/uploads/2021/10/Healthcare-blog@2x-1024x577.png\" class=\"type:primaryImage\" /></figure>\n<p>Healthcare brands that practice A/B testing and personalization are 5x more likely to report faster growth than those that do not, according to a study by the A/B testing and personalization platform Kameleoon and Forrester Research. What holds so many brands back are the three Vs: Volume: They feel overwhelmed by the amount of data</p>\n<p>The post <a rel=\"nofollow\" href=\"https://mixpanel.com/blog/how-healthcare-companies-use-analytics-and-optimization-patient-experience/\">Product analytics improves patient experience</a> appeared first on <a rel=\"nofollow\" href=\"https://mixpanel.com\">Mixpanel</a>.</p>\n","PublishedAt":"2021-10-15 21:13:00+00:00","OriginURL":"https://mixpanel.com/blog/how-healthcare-companies-use-analytics-and-optimization-patient-experience/","SourceName":"Mixpanel"}},{"node":{"ID":1131,"Title":"Natural views for self-supervised learning","Description":"<p>Creating labels for machine learning is hard and time consuming, wouldn&#8217;t it be nice to train a model without any? We can with self-supervised learning! I&#8217;m Paul Willot from the AI/ML team and in this post I&#8217;ll introduce an experiment we did to get rid of labels by leveraging the structure of Mercari&#8217;s data. Let&#8217;s [&hellip;]</p>\n","PublishedAt":"2021-10-15 16:44:53+00:00","OriginURL":"https://engineering.mercari.com/en/blog/entry/20211015-natural-views-self-supervised-learning/","SourceName":"Mercari"}},{"node":{"ID":767,"Title":"Improving HDFS I/O Utilization for Efficiency","Description":"<p><span style=\"font-weight: 400;\">Scaling our data infrastructure with lower hardware costs while maintaining high performance and service reliability has been no easy feat. To accommodate the exponential growth in both Data Storage and Analytics Compute at Uber, the Data Infrastructure team massively overhauled </span>&#8230;</p>\n<p>The post <a rel=\"nofollow\" href=\"https://eng.uber.com/improving-hdfs-i-o-utilization-for-efficiency/\">Improving HDFS I/O Utilization for Efficiency</a> appeared first on <a rel=\"nofollow\" href=\"https://eng.uber.com\">Uber Engineering Blog</a>.</p>\n","PublishedAt":"2021-10-13 16:00:31+00:00","OriginURL":"https://eng.uber.com/improving-hdfs-i-o-utilization-for-efficiency/","SourceName":"Uber"}},{"node":{"ID":1270,"Title":"How Safari crashes the graphics driver","Description":"","PublishedAt":"2021-10-13 06:54:11+00:00","OriginURL":"https://medium.com/miro-engineering/how-safari-crashes-the-graphics-driver-1b56cd80f564?source=rss----555f7fd62a50---4","SourceName":"Miro Engineering"}},{"node":{"ID":784,"Title":"Tiny Letter from Kafka","Description":"This article discusses the powerful design choice of Apache Kafka, “an open-source distributed event streaming platform,” and gives a sneak…","PublishedAt":"2021-10-13 00:00:00+00:00","OriginURL":"https://developers.soundcloud.com/blog/tiny-letter-from-kafka","SourceName":"Soundcloud"}},{"node":{"ID":434,"Title":"How (and Why) Postman Engineering Uses Foundation Teams","Description":"","PublishedAt":"2021-10-11 23:08:05+00:00","OriginURL":"https://medium.com/better-practices/how-and-why-postman-engineering-uses-foundation-teams-4acadab0f003?source=rss----410f2fbc015d---4","SourceName":"Postman"}},{"node":{"ID":1251,"Title":"Blog: Introducing ClusterClass and Managed Topologies in Cluster API","Description":"<p><strong>Author:</strong> Fabrizio Pandini (VMware)</p>\n<p>The <a href=\"https://cluster-api.sigs.k8s.io/\">Cluster API community</a> is happy to announce the implementation of <em>ClusterClass and Managed Topologies</em>, a new feature that will greatly simplify how you can provision, upgrade, and operate multiple Kubernetes clusters in a declarative way.</p>\n<h2 id=\"a-little-bit-of-context\">A little bit of context…</h2>\n<p>Before getting into the details, let's take a step back and look at the history of Cluster API.</p>\n<p>The <a href=\"https://github.com/kubernetes-sigs/cluster-api/\">Cluster API project</a> started three years ago, and the first releases focused on extensibility and implementing a declarative API that allows a seamless experience across infrastructure providers. This was a success with many cloud providers: AWS, Azure, Digital Ocean, GCP, Metal3, vSphere and still counting.</p>\n<p>With extensibility addressed, the focus shifted to features, like automatic control plane and etcd management, health-based machine remediation, machine rollout strategies and more.</p>\n<p>Fast forwarding to 2021, with lots of companies using Cluster API to manage fleets of Kubernetes clusters running workloads in production, the community focused its effort on stabilization of both code, APIs, documentation, and on extensive test signals which inform Kubernetes releases.</p>\n<p>With solid foundations in place, and a vibrant and welcoming community that still continues to grow, it was time to plan another iteration on our UX for both new and advanced users.</p>\n<p>Enter ClusterClass and Managed Topologies, tada!</p>\n<h2 id=\"clusterclass\">ClusterClass</h2>\n<p>As the name suggests, ClusterClass and managed topologies are built in two parts.</p>\n<p>The idea behind ClusterClass is simple: define the shape of your cluster once, and reuse it many times, abstracting the complexities and the internals of a Kubernetes cluster away.</p>\n<p><img src=\"https://kubernetes.io/images/blog/2021-10-08-clusterclass-and-managed-topologies/clusterclass.svg\" alt=\"Defining a ClusterClass\"></p>\n<p>ClusterClass, at its heart, is a collection of Cluster and Machine templates. You can use it as a “stamp” that can be leveraged to create many clusters of a similar shape.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex;\"><span><span style=\"color:#00f;font-weight:bold\">---</span><span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">apiVersion</span>:<span style=\"color:#bbb\"> </span>cluster.x-k8s.io/v1beta1<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">kind</span>:<span style=\"color:#bbb\"> </span>ClusterClass<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">metadata</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>my-amazing-cluster-class<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">spec</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">controlPlane</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">ref</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">apiVersion</span>:<span style=\"color:#bbb\"> </span>controlplane.cluster.x-k8s.io/v1beta1<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">kind</span>:<span style=\"color:#bbb\"> </span>KubeadmControlPlaneTemplate<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>high-availability-control-plane<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">machineInfrastructure</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">ref</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">apiVersion</span>:<span style=\"color:#bbb\"> </span>infrastructure.cluster.x-k8s.io/v1beta1<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">kind</span>:<span style=\"color:#bbb\"> </span>DockerMachineTemplate<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>control-plane-machine<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">workers</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">machineDeployments</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>- <span style=\"color:#008000;font-weight:bold\">class</span>:<span style=\"color:#bbb\"> </span>type1-workers<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">template</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">bootstrap</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">ref</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">apiVersion</span>:<span style=\"color:#bbb\"> </span>bootstrap.cluster.x-k8s.io/v1beta1<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">kind</span>:<span style=\"color:#bbb\"> </span>KubeadmConfigTemplate<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>type1-bootstrap<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">infrastructure</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">ref</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">apiVersion</span>:<span style=\"color:#bbb\"> </span>infrastructure.cluster.x-k8s.io/v1beta1<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">kind</span>:<span style=\"color:#bbb\"> </span>DockerMachineTemplate<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>type1-machine<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>- <span style=\"color:#008000;font-weight:bold\">class</span>:<span style=\"color:#bbb\"> </span>type2-workers<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">template</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">bootstrap</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">ref</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">apiVersion</span>:<span style=\"color:#bbb\"> </span>bootstrap.cluster.x-k8s.io/v1beta1<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">kind</span>:<span style=\"color:#bbb\"> </span>KubeadmConfigTemplate<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>type2-bootstrap<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">infrastructure</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">ref</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">kind</span>:<span style=\"color:#bbb\"> </span>DockerMachineTemplate<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">apiVersion</span>:<span style=\"color:#bbb\"> </span>infrastructure.cluster.x-k8s.io/v1beta1<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>type2-machine<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">infrastructure</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">ref</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">apiVersion</span>:<span style=\"color:#bbb\"> </span>infrastructure.cluster.x-k8s.io/v1beta1<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">kind</span>:<span style=\"color:#bbb\"> </span>DockerClusterTemplate<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>cluster-infrastructure<span style=\"color:#bbb\">\n</span></span></span></code></pre></div><p>The possibilities are endless; you can get a default ClusterClass from the community, “off-the-shelf” classes from your vendor of choice, “certified” classes from the platform admin in your company, or even create custom ones for advanced scenarios.</p>\n<h2 id=\"managed-topologies\">Managed Topologies</h2>\n<p>Managed Topologies let you put the power of ClusterClass into action.</p>\n<p>Given a ClusterClass, you can create many Clusters of a similar shape by providing a single resource, the Cluster.</p>\n<p><img src=\"https://kubernetes.io/images/blog/2021-10-08-clusterclass-and-managed-topologies/create-cluster.svg\" alt=\"Create a Cluster with ClusterClass\"></p>\n<p>Here is an example:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex;\"><span><span style=\"color:#00f;font-weight:bold\">---</span><span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">apiVersion</span>:<span style=\"color:#bbb\"> </span>cluster.x-k8s.io/v1beta1<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">kind</span>:<span style=\"color:#bbb\"> </span>Cluster<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">metadata</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>my-amazing-cluster<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">namespace</span>:<span style=\"color:#bbb\"> </span>bar<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">spec</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">topology</span>:<span style=\"color:#bbb\"> </span><span style=\"color:#080;font-style:italic\"># define a managed topology</span><span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">class</span>:<span style=\"color:#bbb\"> </span>my-amazing-cluster-class<span style=\"color:#bbb\"> </span><span style=\"color:#080;font-style:italic\"># use the ClusterClass mentioned earlier</span><span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">version</span>:<span style=\"color:#bbb\"> </span>v1.21.2<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">controlPlane</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">replicas</span>:<span style=\"color:#bbb\"> </span><span style=\"color:#666\">3</span><span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">workers</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">machineDeployments</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>- <span style=\"color:#008000;font-weight:bold\">class</span>:<span style=\"color:#bbb\"> </span>type1-workers<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>big-pool-of-machines<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">replicas</span>:<span style=\"color:#bbb\"> </span><span style=\"color:#666\">5</span><span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>- <span style=\"color:#008000;font-weight:bold\">class</span>:<span style=\"color:#bbb\"> </span>type2-workers<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>small-pool-of-machines<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">replicas</span>:<span style=\"color:#bbb\"> </span><span style=\"color:#666\">1</span><span style=\"color:#bbb\">\n</span></span></span></code></pre></div><p>But there is more than simplified cluster creation. Now the Cluster acts as a single control point for your entire topology.</p>\n<p>All the power of Cluster API, extensibility, lifecycle automation, stability, all the features required for managing an enterprise grade Kubernetes cluster on the infrastructure provider of your choice are now at your fingertips: you can create your Cluster, add new machines, upgrade to the next Kubernetes version, and all from a single place.</p>\n<p>It is just as simple as it looks!</p>\n<h2 id=\"what-s-next\">What’s next</h2>\n<p>While the amazing Cluster API community is working hard to deliver the first version of ClusterClass and managed topologies later this year, we are already looking forward to what comes next for the project and its ecosystem.</p>\n<p>There are a lot of great ideas and opportunities ahead!</p>\n<p>We want to make managed topologies even more powerful and flexible, allowing users to dynamically change bits of a ClusterClass according to the specific needs of a Cluster; this will ensure the same simple and intuitive UX for solving complex problems like e.g. selecting machine image for a specific Kubernetes version and for a specific region of your infrastructure provider, or injecting proxy configurations in the entire Cluster, and so on.</p>\n<p>Stay tuned for what comes next, and if you have any questions, comments or suggestions:</p>\n<ul>\n<li>Chat with us on the Kubernetes <a href=\"http://slack.k8s.io/\">Slack</a>:<a href=\"https://kubernetes.slack.com/archives/C8TSNPY4T\">#cluster-api</a></li>\n<li>Join the SIG Cluster Lifecycle <a href=\"https://groups.google.com/g/kubernetes-sig-cluster-lifecycle\">Google Group</a> to receive calendar invites and gain access to documents</li>\n<li>Join our <a href=\"https://zoom.us/j/861487554\">Zoom meeting</a>, every Wednesday at 10:00 Pacific Time</li>\n<li>Check out the <a href=\"https://cluster-api.sigs.k8s.io/user/quick-start.html\">ClusterClass quick-start</a> for the Docker provider (CAPD) in the Cluster API book.</li>\n<li><em>UPDATE</em>: Check out the <a href=\"https://cluster-api.sigs.k8s.io/tasks/experimental-features/cluster-class/index.html\">ClusterClass experimental feature</a> documentation in the Cluster API book.</li>\n</ul>","PublishedAt":"2021-10-08 00:00:00+00:00","OriginURL":"https://kubernetes.io/blog/2021/10/08/capi-clusterclass-and-managed-topologies/","SourceName":"Kubernetes"}},{"node":{"ID":612,"Title":"Postmortem: Removing all users from github.com/trivago","Description":"","PublishedAt":"2021-10-05 00:00:00+00:00","OriginURL":"https://tech.trivago.com/post/2021-10-05-postmortem-removing-all-users-from-github-trivago/","SourceName":"Trivago"}},{"node":{"ID":1252,"Title":"Blog: A Closer Look at NSA/CISA Kubernetes Hardening Guidance","Description":"<p><strong>Authors:</strong> Jim Angel (Google), Pushkar Joglekar (VMware), and Savitha\nRaghunathan (Red Hat)</p>\n<div class=\"alert alert-primary\" role=\"alert\">\n<h4 class=\"alert-heading\">Disclaimer</h4>\nThe open source tools listed in this article are to serve as examples only\nand are in no way a direct recommendation from the Kubernetes community or authors.\n</div>\n<h2 id=\"background\">Background</h2>\n<p>USA's National Security Agency (NSA) and the Cybersecurity and Infrastructure\nSecurity Agency (CISA)\nreleased, &quot;<a href=\"https://media.defense.gov/2021/Aug/03/2002820425/-1/-1/1/CTR_KUBERNETES%20HARDENING%20GUIDANCE.PDF\">Kubernetes Hardening Guidance</a>&quot;\non August 3rd, 2021. The guidance details threats to Kubernetes environments\nand provides secure configuration guidance to minimize risk.</p>\n<p>The following sections of this blog correlate to the sections in the NSA/CISA guidance.\nAny missing sections are skipped because of limited opportunities to add\nanything new to the existing content.</p>\n<p><em>Note</em>: This blog post is not a substitute for reading the guide. Reading the published\nguidance is recommended before proceeding as the following content is\ncomplementary.</p>\n<h2 id=\"introduction-and-threat-model\">Introduction and Threat Model</h2>\n<p>Note that the threats identified as important by the NSA/CISA, or the intended audience of this guidance, may be different from the threats that other enterprise users of Kubernetes consider important. This section\nis still useful for organizations that care about data, resource theft and\nservice unavailability.</p>\n<p>The guidance highlights the following three sources of compromises:</p>\n<ul>\n<li>Supply chain risks</li>\n<li>Malicious threat actors</li>\n<li>Insider threats (administrators, users, or cloud service providers)</li>\n</ul>\n<p>The <a href=\"https://en.wikipedia.org/wiki/Threat_model\">threat model</a> tries to take a step back and review threats that not only\nexist within the boundary of a Kubernetes cluster but also include the underlying\ninfrastructure and surrounding workloads that Kubernetes does not manage.</p>\n<p>For example, when a workload outside the cluster shares the same physical\nnetwork, it has access to the kubelet and to control plane components: etcd, controller manager, scheduler and API\nserver. Therefore, the guidance recommends having network level isolation\nseparating Kubernetes clusters from other workloads that do not need connectivity\nto Kubernetes control plane nodes. Specifically, scheduler, controller-manager,\netcd only need to be accessible to the API server. Any interactions with Kubernetes\nfrom outside the cluster can happen by providing access to API server port.</p>\n<p>List of ports and protocols for each of these components are\ndefined in <a href=\"https://kubernetes.io/docs/reference/ports-and-protocols/\">Ports and Protocols</a>\nwithin the Kubernetes documentation.</p>\n<blockquote>\n<p>Special note: kube-scheduler and kube-controller-manager uses different ports than the ones mentioned in the guidance</p>\n</blockquote>\n<p>The <a href=\"https://cnsmap.netlify.app/threat-modelling\">Threat modelling</a> section\nfrom the CNCF <a href=\"https://github.com/cncf/tag-security/tree/main/security-whitepaper\">Cloud Native Security Whitepaper + Map</a>\nprovides another perspective on approaching threat modelling Kubernetes, from a\ncloud native lens.</p>\n<h2 id=\"kubernetes-pod-security\">Kubernetes Pod security</h2>\n<p>Kubernetes by default does not guarantee strict workload isolation between pods\nrunning in the same node in a cluster. However, the guidance provides several\ntechniques to enhance existing isolation and reduce the attack surface in case of a\ncompromise.</p>\n<h3 id=\"non-root-containers-and-rootless-container-engines\">&quot;Non-root&quot; containers and &quot;rootless&quot; container engines</h3>\n<p>Several best practices related to basic security principle of least privilege\ni.e. provide only the permissions are needed; no more, no less, are worth a\nsecond look.</p>\n<p>The guide recommends setting non-root user at build time instead of relying on\nsetting <code>runAsUser</code> at runtime in your Pod spec. This is a good practice and provides\nsome level of defense in depth. For example, if the container image is built with user <code>10001</code>\nand the Pod spec misses adding the <code>runAsuser</code> field in its <code>Deployment</code> object. In this\ncase there are certain edge cases that are worth exploring for awareness:</p>\n<ol>\n<li>Pods can fail to start, if the user defined at build time is different from\nthe one defined in pod spec and some files are as a result inaccessible.</li>\n<li>Pods can end up sharing User IDs unintentionally. This can be problematic\neven if the User IDs are non-zero in a situation where a container escape to\nhost file system is possible. Once the attacker has access to the host file\nsystem, they get access to all the file resources that are owned by other\nunrelated pods that share the same UID.</li>\n<li>Pods can end up sharing User IDs, with other node level processes not managed\nby Kubernetes e.g. node level daemons for auditing, vulnerability scanning,\ntelemetry. The threat is similar to the one above where host file system\naccess can give attacker full access to these node level daemons without\nneeding to be root on the node.</li>\n</ol>\n<p>However, none of these cases will have as severe an impact as a container\nrunning as root being able to escape as a root user on the host, which can provide\nan attacker with complete control of the worker node, further allowing lateral\nmovement to other worker or control plane nodes.</p>\n<p>Kubernetes 1.22 introduced\nan <a href=\"https://kubernetes.io/docs/tasks/administer-cluster/kubelet-in-userns/\">alpha feature</a>\nthat specifically reduces the impact of such a control plane component running\nas root user to a non-root user through user namespaces.</p>\n<p>That (<a href=\"https://kubernetes.io/docs/reference/command-line-tools-reference/feature-gates/#feature-stages\">alpha stage</a>) support for user namespaces / rootless mode is available with\nthe following container runtimes:</p>\n<ul>\n<li><a href=\"https://docs.docker.com/engine/security/rootless/\">Docker Engine</a></li>\n<li><a href=\"https://developers.redhat.com/blog/2020/09/25/rootless-containers-with-podman-the-basics\">Podman</a></li>\n</ul>\n<p>Some distributions support running in rootless mode, like the following:</p>\n<ul>\n<li><a href=\"https://kind.sigs.k8s.io/docs/user/rootless/\">kind</a></li>\n<li><a href=\"https://rancher.com/docs/k3s/latest/en/advanced/#running-k3s-with-rootless-mode-experimental\">k3s</a></li>\n<li><a href=\"https://github.com/rootless-containers/usernetes\">Usernetes</a></li>\n</ul>\n<h3 id=\"immutable-container-filesystems\">Immutable container filesystems</h3>\n<p>The NSA/CISA Kubernetes Hardening Guidance highlights an often overlooked feature <code>readOnlyRootFileSystem</code>, with a\nworking example in <a href=\"https://media.defense.gov/2021/Aug/03/2002820425/-1/-1/1/CTR_KUBERNETES%20HARDENING%20GUIDANCE.PDF#page=42\">Appendix B</a>. This example limits execution and tampering of\ncontainers at runtime. Any read/write activity can then be limited to few\ndirectories by using <code>tmpfs</code> volume mounts.</p>\n<p>However, some applications that modify the container filesystem at runtime, like exploding a WAR or JAR file at container startup,\ncould face issues when enabling this feature. To avoid this issue, consider making minimal changes to the filesystem at runtime\nwhen possible.</p>\n<h3 id=\"building-secure-container-images\">Building secure container images</h3>\n<p>Kubernetes Hardening Guidance also recommends running a scanner at deploy time as an admission controller,\nto prevent vulnerable or misconfigured pods from running in the cluster.\nTheoretically, this sounds like a good approach but there are several caveats to\nconsider before this can be implemented in practice:</p>\n<ul>\n<li>Depending on network bandwidth, available resources and scanner of choice,\nscanning for vulnerabilities for an image can take an indeterminate amount of\ntime. This could lead to slower or unpredictable pod start up times, which\ncould result in spikes of unavailability when apps are serving peak load.</li>\n<li>If the policy that allows or denies pod startup is made using incorrect or\nincomplete data it could result in several false positive or false negative\noutcomes like the following:\n<ul>\n<li>inside a container image, the <code>openssl</code> package is detected as vulnerable. However,\nthe application is written in Golang and uses the Go <code>crypto</code> package for TLS. Therefore, this vulnerability\nis not in the code execution path and as such has minimal impact if it\nremains unfixed.</li>\n<li>A vulnerability is detected in the <code>openssl</code> package for a Debian base image.\nHowever, the upstream Debian community considers this as a Minor impact\nvulnerability and as a result does not release a patch fix for this\nvulnerability. The owner of this image is now stuck with a vulnerability that\ncannot be fixed and a cluster that does not allow the image to run because\nof predefined policy that does not take into account whether the fix for a\nvulnerability is available or not</li>\n<li>A Golang app is built on top of a <a href=\"https://github.com/GoogleContainerTools/distroless\">distroless</a>\nimage, but it is compiled with a Golang version that uses a vulnerable <a href=\"https://pkg.go.dev/std\">standard library</a>.\nThe scanner has\nno visibility into golang version but only on OS level packages. So it\nallows the pod to run in the cluster in spite of the image containing an\napp binary built on vulnerable golang.</li>\n</ul>\n</li>\n</ul>\n<p>To be clear, relying on vulnerability scanners is absolutely a good idea but\npolicy definitions should be flexible enough to allow:</p>\n<ul>\n<li>Creation of exception lists for images or vulnerabilities through labelling</li>\n<li>Overriding the severity with a risk score based on impact of a vulnerability</li>\n<li>Applying the same policies at build time to catch vulnerable images with\nfixable vulnerabilities before they can be deployed into Kubernetes clusters</li>\n</ul>\n<p>Special considerations like offline vulnerability database fetch, may also be\nneeded, if the clusters run in an air-gapped environment and the scanners\nrequire internet access to update the vulnerability database.</p>\n<h3 id=\"pod-security-policies\">Pod Security Policies</h3>\n<p>Since Kubernetes v1.21, the <a href=\"https://kubernetes.io/docs/concepts/security/pod-security-policy/\">PodSecurityPolicy</a>\nAPI and related features are <a href=\"https://kubernetes.io/blog/2021/04/06/podsecuritypolicy-deprecation-past-present-and-future/\">deprecated</a>,\nbut some of the guidance in this section will still apply for the next few years, until cluster operators\nupgrade their clusters to newer Kubernetes versions.</p>\n<p>The Kubernetes project is working on a replacement for PodSecurityPolicy.\nKubernetes v1.22 includes an alpha feature called <a href=\"https://kubernetes.io/docs/concepts/security/pod-security-admission/\">Pod Security Admission</a>\nthat is intended to allow enforcing a minimum level of isolation between pods.</p>\n<p>The built-in isolation levels for Pod Security Admission are derived\nfrom <a href=\"https://kubernetes.io/docs/concepts/security/pod-security-standards/\">Pod Security Standards</a>, which is a superset of all the components mentioned in Table I <a href=\"https://media.defense.gov/2021/Aug/03/2002820425/-1/-1/1/CTR_KUBERNETES%20HARDENING%20GUIDANCE.PDF#page=17\">page 10</a> of\nthe guidance.</p>\n<p>Information about migrating from PodSecurityPolicy to the Pod Security\nAdmission feature is available\nin\n<a href=\"https://kubernetes.io/docs/tasks/configure-pod-container/migrate-from-psp/\">Migrate from PodSecurityPolicy to the Built-In PodSecurity Admission Controller</a>.</p>\n<p>One important behavior mentioned in the guidance that remains the same between\nPod Security Policy and its replacement is that enforcing either of them does\nnot affect pods that are already running. With both PodSecurityPolicy and Pod Security Admission,\nthe enforcement happens during the pod creation\nstage.</p>\n<h3 id=\"hardening-container-engines\">Hardening container engines</h3>\n<p>Some container workloads are less trusted than others but may need to run in the\nsame cluster. In those cases, running them on dedicated nodes that include\nhardened container runtimes that provide stricter pod isolation boundaries can\nact as a useful security control.</p>\n<p>Kubernetes supports\nan API called <a href=\"https://kubernetes.io/docs/concepts/containers/runtime-class/\">RuntimeClass</a> that is\nstable / GA (and, therefore, enabled by default) stage as of Kubernetes v1.20.\nRuntimeClass allows you to ensure that Pods requiring strong isolation are scheduled onto\nnodes that can offer it.</p>\n<p>Some third-party projects that you can use in conjunction with RuntimeClass are:</p>\n<ul>\n<li><a href=\"https://github.com/kata-containers/kata-containers/blob/main/docs/how-to/how-to-use-k8s-with-cri-containerd-and-kata.md#create-runtime-class-for-kata-containers\">kata containers</a></li>\n<li><a href=\"https://gvisor.dev/docs/user_guide/containerd/quick_start/\">gvisor</a></li>\n</ul>\n<p>As discussed here and in the guidance, many features and tooling exist in and around\nKubernetes that can enhance the isolation boundaries between\npods. Based on relevant threats and risk posture, you should pick and choose\nbetween them, instead of trying to apply all the recommendations. Having said that, cluster\nlevel isolation i.e. running workloads in dedicated clusters, remains the strictest workload\nisolation mechanism, in spite of improvements mentioned earlier here and in the guide.</p>\n<h2 id=\"network-separation-and-hardening\">Network Separation and Hardening</h2>\n<p>Kubernetes Networking can be tricky and this section focuses on how to secure\nand harden the relevant configurations. The guide identifies the following as key\ntakeaways:</p>\n<ul>\n<li>Using NetworkPolicies to create isolation between resources,</li>\n<li>Securing the control plane</li>\n<li>Encrypting traffic and sensitive data</li>\n</ul>\n<h3 id=\"network-policies\">Network Policies</h3>\n<p>Network policies can be created with the help of network plugins. In order to\nmake the creation and visualization easier for users, Cilium supports\na <a href=\"https://editor.cilium.io\">web GUI tool</a>. That web GUI lets you create Kubernetes\nNetworkPolicies (a generic API that nevertheless requires a compatible CNI plugin),\nand / or Cilium network policies (CiliumClusterwideNetworkPolicy and CiliumNetworkPolicy,\nwhich only work in clusters that use the Cilium CNI plugin).\nYou can use these APIs to restrict network traffic between pods, and therefore minimize the\nattack vector.</p>\n<p>Another scenario that is worth exploring is the usage of external IPs. Some\nservices, when misconfigured, can create random external IPs. An attacker can take\nadvantage of this misconfiguration and easily intercept traffic. This vulnerability\nhas been reported\nin <a href=\"https://www.cvedetails.com/cve/CVE-2020-8554/\">CVE-2020-8554</a>.\nUsing <a href=\"https://github.com/kubernetes-sigs/externalip-webhook\">externalip-webhook</a>\ncan mitigate this vulnerability by preventing the services from using random\nexternal IPs. <a href=\"https://github.com/kubernetes-sigs/externalip-webhook\">externalip-webhook</a>\nonly allows creation of services that don't require external IPs or whose\nexternal IPs are within the range specified by the administrator.</p>\n<blockquote>\n<p>CVE-2020-8554 - Kubernetes API server in all versions allow an attacker\nwho is able to create a ClusterIP service and set the <code>spec.externalIPs</code> field,\nto intercept traffic to that IP address. Additionally, an attacker who is able to\npatch the <code>status</code> (which is considered a privileged operation and should not\ntypically be granted to users) of a LoadBalancer service can set the\n<code>status.loadBalancer.ingress.ip</code> to similar effect.</p>\n</blockquote>\n<h3 id=\"resource-policies\">Resource Policies</h3>\n<p>In addition to configuring ResourceQuotas and limits, consider restricting how many process\nIDs (PIDs) a given Pod can use, and also to reserve some PIDs for node-level use to avoid\nresource exhaustion. More details to apply these limits can be\nfound in <a href=\"https://kubernetes.io/docs/concepts/policy/pid-limiting/\">Process ID Limits And Reservations</a>.</p>\n<h3 id=\"control-plane-hardening\">Control Plane Hardening</h3>\n<p>In the next section, the guide covers control plane hardening. It is worth\nnoting that\nfrom <a href=\"https://github.com/kubernetes/kubernetes/issues/91506\">Kubernetes 1.20</a>,\ninsecure port from API server, has been removed.</p>\n<h3 id=\"etcd\">Etcd</h3>\n<p>As a general rule, the etcd server should be configured to only trust\ncertificates assigned to the API server. It limits the attack surface and prevents a\nmalicious attacker from gaining access to the cluster. It might be beneficial to\nuse a separate CA for etcd, as it by default trusts all the certificates issued\nby the root CA.</p>\n<h3 id=\"kubeconfig-files\">Kubeconfig Files</h3>\n<p>In addition to specifying the token and certificates directly, <code>.kubeconfig</code>\nsupports dynamic retrieval of temporary tokens using auth provider plugins.\nBeware of the possibility of malicious\nshell <a href=\"https://banzaicloud.com/blog/kubeconfig-security/\">code execution</a> in a\n<code>kubeconfig</code> file. Once attackers gain access to the cluster, they can steal ssh\nkeys/secrets or more.</p>\n<h3 id=\"secrets\">Secrets</h3>\n<p>Kubernetes <a href=\"https://kubernetes.io/docs/concepts/configuration/secret/\">Secrets</a> is the native way of managing secrets as a Kubernetes\nAPI object. However, in some scenarios such as a desire to have a single source of truth for all app secrets, irrespective of whether they run on Kubernetes or not, secrets can be managed loosely coupled with\nKubernetes and consumed by pods through side-cars or init-containers with minimal usage of Kubernetes Secrets API.</p>\n<p><a href=\"https://github.com/external-secrets/kubernetes-external-secrets\">External secrets providers</a>\nand <a href=\"https://github.com/kubernetes-sigs/secrets-store-csi-driver\">csi-secrets-store</a>\nare some of these alternatives to Kubernetes Secrets</p>\n<h2 id=\"log-auditing\">Log Auditing</h2>\n<p>The NSA/CISA guidance stresses monitoring and alerting based on logs. The key points\ninclude logging at the host level, application level, and on the cloud. When\nrunning Kubernetes in production, it's important to understand who's\nresponsible, and who's accountable, for each layer of logging.</p>\n<h3 id=\"kubernetes-api-auditing\">Kubernetes API auditing</h3>\n<p>One area that deserves more focus is what exactly should alert or be logged. The\ndocument outlines a sample policy in <a href=\"https://media.defense.gov/2021/Aug/03/2002820425/-1/-1/1/CTR_KUBERNETES%20HARDENING%20GUIDANCE.PDF#page=55\">Appendix L: Audit Policy</a> that logs all\nRequestResponse's including metadata and request / response bodies. While helpful for a demo, it may not be practical for production.</p>\n<p>Each organization needs to evaluate their\nown threat model and build an audit policy that complements or helps troubleshooting incident response. Think\nabout how someone would attack your organization and what audit trail could identify it. Review more advanced options for tuning audit logs in the official <a href=\"https://kubernetes.io/docs/tasks/debug/debug-cluster/audit/#audit-policy\">audit logging documentation</a>.\nIt's crucial to tune your audit logs to only include events that meet your threat model. A minimal audit policy that logs everything at <code>metadata</code> level can also be a good starting point.</p>\n<p>Audit logging configurations can also be tested with\nkind following these <a href=\"https://kind.sigs.k8s.io/docs/user/auditing\">instructions</a>.</p>\n<h3 id=\"streaming-logs-and-auditing\">Streaming logs and auditing</h3>\n<p>Logging is important for threat and anomaly detection. As the document outlines,\nit's a best practice to scan and alert on logs as close to real time as possible\nand to protect logs from tampering if a compromise occurs. It's important to\nreflect on the various levels of logging and identify the critical areas such as\nAPI endpoints.</p>\n<p>Kubernetes API audit logging can stream to a webhook and there's an example in <a href=\"https://media.defense.gov/2021/Aug/03/2002820425/-1/-1/1/CTR_KUBERNETES%20HARDENING%20GUIDANCE.PDF#page=58\">Appendix N: Webhook configuration</a>. Using a webhook could be a method that\nstores logs off cluster and/or centralizes all audit logs. Once logs are\ncentrally managed, look to enable alerting based on critical events. Also ensure\nyou understand what the baseline is for normal activities.</p>\n<h3 id=\"alert-identification\">Alert identification</h3>\n<p>While the guide stressed the importance of notifications, there is not a blanket\nevent list to alert from. The alerting requirements vary based on your own\nrequirements and threat model. Examples include the following events:</p>\n<ul>\n<li>Changes to the <code>securityContext</code> of a Pod</li>\n<li>Updates to admission controller configs</li>\n<li>Accessing certain files / URLs</li>\n</ul>\n<h3 id=\"additional-logging-resources\">Additional logging resources</h3>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=OPuu8wsu2Zc\">Seccomp Security Profiles and You: A Practical Guide - Duffie Cooley</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=ZJgaGJm9NJE\">TGI Kubernetes 119: Gatekeeper and OPA</a></li>\n<li><a href=\"https://www.lacework.com/blog/hiding-in-plaintext-sight-abusing-the-lack-of-kubernetes-auditing-policies/\">Abusing The Lack of Kubernetes Auditing Policies</a></li>\n<li><a href=\"https://kubernetes.io/blog/2021/08/25/seccomp-default/\">Enable seccomp for all workloads with a new v1.22 alpha feature</a></li>\n<li><a href=\"https://www.twitch.tv/videos/1147889860\">This Week in Cloud Native: Auditing / Pod Security</a></li>\n</ul>\n<h2 id=\"upgrading-and-application-security-practices\">Upgrading and Application Security practices</h2>\n<p>Kubernetes releases three times per year, so upgrade-related toil is a common problem for\npeople running production clusters. In addition to this, operators must\nregularly upgrade the underlying node's operating system and running\napplications. This is a best practice to ensure continued support and to reduce\nthe likelihood of bugs or vulnerabilities.</p>\n<p>Kubernetes supports the three most recent stable releases. While each Kubernetes\nrelease goes through a large number of tests before being published, some\nteams aren't comfortable running the latest stable release until some time has\npassed. No matter what version you're running, ensure that patch upgrades\nhappen frequently or automatically. More information can be found in\nthe <a href=\"https://kubernetes.io/releases/version-skew-policy/\">version skew</a> policy\npages.</p>\n<p>When thinking about how you'll manage node OS upgrades, consider ephemeral\nnodes. Having the ability to destroy and add nodes allows your team to respond\nquicker to node issues. In addition, having deployments that tolerate node\ninstability (and a culture that encourages frequent deployments) allows for\neasier cluster upgrades.</p>\n<p>Additionally, it's worth reiterating from the guidance that periodic\nvulnerability scans and penetration tests can be performed on the various system\ncomponents to proactively look for insecure configurations and vulnerabilities.</p>\n<h3 id=\"finding-release-security-information\">Finding release &amp; security information</h3>\n<p>To find the most recent Kubernetes supported versions, refer to\n<a href=\"https://k8s.io/releases\">https://k8s.io/releases</a>, which includes minor versions. It's good to stay up to date with\nyour minor version patches.</p>\n<p>If you're running a managed Kubernetes offering, look for their release\ndocumentation and find their various security channels.</p>\n<p>Subscribe to\nthe <a href=\"https://groups.google.com/g/kubernetes-announce\">Kubernetes Announce mailing list</a>.\nThe Kubernetes Announce mailing list is searchable for terms such\nas &quot;<a href=\"https://groups.google.com/g/kubernetes-announce/search?q=%5BSecurity%20Advisory%5D\">Security Advisories</a>&quot;.\nYou can set up alerts and email notifications as long as you know what key\nwords to alert on.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>In summary, it is fantastic to see security practitioners sharing this\nlevel of detailed guidance in public. This guidance further highlights\nKubernetes going mainstream and how securing Kubernetes clusters and the\napplication containers running on Kubernetes continues to need attention and focus of\npractitioners. Only a few weeks after the guidance was published, an open source\ntool <a href=\"https://github.com/armosec/kubescape\">kubescape</a> to validate cluster\nagainst this guidance became available.</p>\n<p>This tool can be a great starting point to check the current state of your\nclusters, after which you can use the information in this blog post and in the guidance to assess\nwhere improvements can be made.</p>\n<p>Finally, it is worth reiterating that not all controls in this guidance will\nmake sense for all practitioners. The best way to know which controls matter is\nto rely on the threat model of your own Kubernetes environment.</p>\n<p><em>A special shout out and thanks to Rory McCune (@raesene) for his inputs to this blog post</em></p>","PublishedAt":"2021-10-05 00:00:00+00:00","OriginURL":"https://kubernetes.io/blog/2021/10/05/nsa-cisa-kubernetes-hardening-guidance/","SourceName":"Kubernetes"}},{"node":{"ID":39,"Title":"How Asana helps me feel included as a Latina in Engineering Management","Description":"<img width=\"1024\" height=\"663\" src=\"https://blog.asana.com/wp-content/post-images/LHM-Eng-Blog-Header-1024x663.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"Latina Eng Manager\" loading=\"lazy\" style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://blog.asana.com/wp-content/post-images/LHM-Eng-Blog-Header-1024x663.png 1024w, https://blog.asana.com/wp-content/post-images/LHM-Eng-Blog-Header-520x337.png 520w, https://blog.asana.com/wp-content/post-images/LHM-Eng-Blog-Header-1536x994.png 1536w, https://blog.asana.com/wp-content/post-images/LHM-Eng-Blog-Header.png 1607w, https://blog.asana.com/wp-content/post-images/LHM-Eng-Blog-Header-520x337@2x.png 1040w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /><p>I’m Denise Carolina Videtta, Engineering Manager on the Communications Team in the Workflow Pillar&#160;at Asana. I was raised in Caracas, Venezuela, where I majored in Computer Science at Universidad Simon Bolivar &#8211; Venezuela, and I have a Master’s Degree in Software Engineering from Texas State University in San Marcos. A couple of years ago, someone [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.asana.com/2021/09/latina-engineering-manager/\">How Asana helps me feel included as a Latina in Engineering&nbsp;Management</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.asana.com\">The Asana Blog</a>.</p>\n","PublishedAt":"2021-09-30 22:24:41+00:00","OriginURL":"https://blog.asana.com/2021/09/latina-engineering-manager/","SourceName":"Asana"}},{"node":{"ID":473,"Title":"User interviews and product analytics","Description":"<figure><img src=\"https://mixpanel.com/wp-content/uploads/2021/09/20210922_BlogHero_UserInterviews@2x-1024x576.png\" class=\"type:primaryImage\" /></figure>\n<p>As a product leader at Mixpanel, I can go on and on about the value of using product analytics in my work. (And I have.) But that doesn’t mean I don’t understand how important user interviews can be for learning how people use my products. Combining product analytics and user interviews for product development is</p>\n<p>The post <a rel=\"nofollow\" href=\"https://mixpanel.com/blog/user-interviews-and-product-analytics-my-methods-for-how-and-when-to-use-each/\">User interviews and product analytics</a> appeared first on <a rel=\"nofollow\" href=\"https://mixpanel.com\">Mixpanel</a>.</p>\n","PublishedAt":"2021-09-30 17:56:00+00:00","OriginURL":"https://mixpanel.com/blog/user-interviews-and-product-analytics-my-methods-for-how-and-when-to-use-each/","SourceName":"Mixpanel"}},{"node":{"ID":61,"Title":"Implementing academic papers: lessons learned from Elasticsearch and Lucene","Description":"<p>While developing Elasticsearch, we occasionally come across an important problem with no simple or established approach to solving it. It's natural to ask “hmm, is there an academic paper that addresses this?” Other times, academic work is a source of inspiration. We'll encounter a paper proposing a new algorithm or data structure and think “this would be so useful!” Here are just a few examples of how Elasticsearch and Apache Lucene incorporate academic work:\n</p><ul>\n\t<li dir=\"ltr\" aria-level=\"1\"><a href=\"https://research.google/pubs/pub40671/\">HyperLogLog++</a> for <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.15/search-aggregations-metrics-cardinality-aggregation.html\">cardinality aggregations</a></li>\n\t<li dir=\"ltr\" aria-level=\"1\"><a href=\"https://www.usenix.org/system/files/conference/nsdi15/nsdi15-paper-suresh.pdf\">C3 algorithm</a> for <a href=\"https://www.elastic.co/blog/improving-response-latency-in-elasticsearch-with-adaptive-replica-selection\">adaptive replica selection</a></li>\n\t<li dir=\"ltr\" aria-level=\"1\"><a href=\"https://arxiv.org/abs/1603.09320\">Hierarchical Navigable Small World Graphs (HNSW)</a> for nearest vector search in Lucene</li>\n\t<li dir=\"ltr\" aria-level=\"1\"><a href=\"https://jmlr.csail.mit.edu/papers/volume17/15-308/15-308.pdf\">MIC statistic</a> to <a href=\"https://github.com/elastic/ml-cpp/pull/488\">improve machine learning classification</a></li>\n\t<li dir=\"ltr\" aria-level=\"1\"><a href=\"http://engineering.nyu.edu/~suel/papers/bmw.pdf\">Block-max WAND</a> for <a href=\"https://www.elastic.co/blog/faster-retrieval-of-top-hits-in-elasticsearch-with-block-max-wand\">faster top-hits retrieval in Lucene</a></li>\n\t<li dir=\"ltr\" aria-level=\"1\">... and <a href=\"https://www.elastic.co/guide/en/elasticsearch///reference/7.15/query-dsl-combined-fields-query.html\">many</a> <a href=\"https://github.com/elastic/elasticsearch/blob/b2a9328890b23e7ccf6c66a3b13d6d65e453a3dd/server/src/main/java/org/elasticsearch/search/sort/BucketedSort.java#L302-L323\">more</a><span></span></li>\n</ul><p>Academic papers are an invaluable resource for engineers developing data-intensive systems. But implementing them can be intimidating and error-prone — algorithm descriptions are often complex, with important practical details omitted. And testing is a real challenge: for example, how can we thoroughly test a machine learning algorithm whose output depends closely on the dataset?\n</p><p>This post shares strategies for implementing academic papers in a software application. It draws on examples from Elasticsearch and Lucene in hopes of helping other engineers learn from our experiences. You might read these strategies and think “but this is just software development!” And that would indeed be true: as engineers we already have the right practices and tools, they just need to be adapted to a new challenge.\n</p><h2>Evaluate the paper as you would a software dependency</h2><p>Adding a new software dependency requires careful evaluation: if the other package is incorrect, slow, or insecure, our project could be too. Before pulling in a dependency, developers make sure to evaluate its quality.\n</p><p>The same applies to academic papers you're considering implementing. It may seem that because an algorithm was published in a paper, it must be correct and perform well. But even though it passed a review process, an academic paper can have issues. Maybe the correctness proof relies on assumptions that aren't realistic. Or perhaps the “experiments” section shows much better performance than the baseline, but this only holds on a specific dataset. Even if the paper is of great quality, its approach may not be a good fit for your project.\n</p><p>When thinking about whether to take a “dependency” on an academic paper, it's helpful to ask the same questions we would of a software package:\n</p><ul>\n\t<li dir=\"ltr\" aria-level=\"1\">Is the library widely-used and “battle tested”? → Have other packages implemented this paper, and has it worked well for them?</li>\n\t<li dir=\"ltr\" aria-level=\"1\">Are performance benchmarks available? Do these seem accurate and fair? → Does the paper include realistic experiments? Are they well designed?</li>\n\t<li dir=\"ltr\" aria-level=\"1\">Is a performance improvement big enough to justify the complexity? → Does the paper compare to a strong baseline approach? How much does it outperform this baseline?</li>\n\t<li dir=\"ltr\" aria-level=\"1\">Will the approach integrate well with our system? → Do the algorithm's assumptions and trade-offs fit our use case?</li>\n</ul><p>Somehow when a software package publishes a performance comparison against their competitors, the package always comes out fastest! If a third party designed the benchmarks, they may be more balanced. The same phenomenon applies to academic papers. If an algorithm performs well not only in the original paper, but also appears in other papers as a strong baseline, then it is very likely to be solid.\n</p><h2>Get creative with testing</h2><p>Algorithms from academic papers often have more sophisticated behavior than the types of algorithms we routinely encounter. Perhaps it's an approximation algorithm that trades off accuracy for better speed. Or maybe it's a machine learning method that takes in a large dataset, and produces (sometimes unexpected) outputs. How can we write tests for these algorithms if we can't characterize their behavior in a simple way?\n</p><h3>Focus on invariants</h3><p>When designing unit tests, it's common to think in terms of examples: if we give the algorithm this example input, it should have that output. Unfortunately for most mathematical algorithms, example-based testing doesn't sufficiently cover their behavior.\n</p><p>Let's consider the C3 algorithm, which Elasticsearch uses to figure out what node should handle a search request. It ranks each node using a nuanced formula that incorporates the node's previous service and response times, and its queue size. Testing a couple examples doesn't really verify we understood the formula correctly. It helps to step back and think about testing invariants: if service time increases, does the node's rank decrease? If the queue size is 0, is the rank determined by response time, as the paper claims?\n</p><p>Focusing on invariants can help in a number of common cases:\n</p><ul>\n\t<li dir=\"ltr\" aria-level=\"1\">Is the method supposed to be order-agnostic? If so, passing the input data in a different order should result in the same output.</li>\n\t<li dir=\"ltr\" aria-level=\"1\">Does some step in the algorithm produce class probabilities? If so, these probabilities should sum to 1.</li>\n\t<li dir=\"ltr\" aria-level=\"1\">Is the function symmetric around the origin? If so, flipping the sign of the input should simply flip the sign of the output.</li>\n</ul><p>When we first implemented C3, we had a bug in the formula where we accidentally used the inverse of response time in place of response time. This meant slower nodes could be ranked higher! When fixing the issue, we <a href=\"https://github.com/elastic/elasticsearch/pull/70283\">made sure to add invariant checks</a> to guard against future mistakes.\n</p><h3>Compare to a reference implementation</h3><p>Alongside the paper, the authors hopefully published an implementation of the algorithm. (This is especially likely if the paper contains experiments, as many journals require authors to post code for reproducing the results.) You can test your approach against this reference implementation to make sure you haven't missed important details of the algorithm.\n</p><p>While developing Lucene's HNSW implementation for nearest-neighbor search, we <a href=\"https://issues.apache.org/jira/browse/LUCENE-9937\">tested against a reference library</a> by the paper's authors. We ran both Lucene and the library against the same dataset, comparing the accuracy of their results and the number of computations they performed. When these numbers match closely, we know that Lucene faithfully implements the algorithm.\n</p><p>When incorporating an algorithm into a system, you often need to make modifications or extensions, like scaling it to multiple cores, or adding heuristics to improve performance. It's best to first implement a \"vanilla\" version, test it against the reference, then make incremental changes. That way you can be confident you've captured all the key parts before making customizations.\n</p><h3>Duel against an existing algorithm</h3><p>The last section raises another idea for a test invariant: comparing the algorithm's output to a simpler and better-understood algorithm's output. As an example, consider the block-max WAND algorithm in Lucene, which speeds up document retrieval by skipping over documents that can't appear in the top results. It is difficult to describe exactly how block-max WAND should behave in every case, but we do know that applying it shouldn't change the top results! So our tests can generate several random search queries, then <a href=\"https://github.com/apache/lucene/blob/main/lucene/core/src/test/org/apache/lucene/search/TestWANDScorer.java#L669\">run them both with and without the WAND optimization</a> and check that their results always match.\n</p><p>An important aspect of these tests is that they <a href=\"https://www.elastic.co/blog/elasticsearch-testing-qa-increasing-coverage-randomizing-test-runs\">generate random inputs</a> on which to run the comparison. This can help exercise cases you wouldn't have thought of, and surface unexpected issues. As an example, Lucene's randomized comparison test for BM25F scoring has helped<a href=\"https://issues.apache.org/jira/browse/LUCENE-10039\"> catch bugs in subtle edge cases</a>. The idea of feeding an algorithm random inputs is closely related to the concept of<a href=\"https://en.wikipedia.org/wiki/Fuzzing\"> fuzzing</a>, a common testing technique in computer security.\n</p><p>Elasticsearch and Lucene frequently use this testing approach. If you see a test that mentions a \"duel\" between two algorithms (TestDuelingAnalyzers, testDuelTermsQuery...), then you know this strategy is in action.\n</p><h2>Use the paper's terminology</h2><p>When another developer works with your code, they'll need to consult the paper to follow its details. The<a href=\"https://github.com/elastic/elasticsearch/blob/4f22f437ee50cacb94b37b457be1da0b8ba0e8ce/server/src/main/java/org/elasticsearch/search/aggregations/metrics/HyperLogLogPlusPlus.java#L24-L39\"> comment on Elasticsearch's HyperLogLog++ implementation</a> says it well: “Trying to understand what this class does without having read the paper is considered adventurous.” This method comment also sets a good example. It includes a link to the academic paper, and highlights what modifications were made to the algorithm as it was originally described.\n</p><p>Since developers will base their understanding of the code on the paper, it's helpful to use the exact same terminology. Since mathematical notation is terse, this can result in names that would not usually be considered “good style”, but are very clear in the context of the paper. Formulas from academic papers are one of the few times you'll encounter cryptic variable names in Elasticsearch like<a href=\"https://github.com/elastic/elasticsearch/blob/4f22f437ee50cacb94b37b457be1da0b8ba0e8ce/server/src/main/java/org/elasticsearch/node/ResponseCollectorService.java#L151\"> rS and muBarSInverse</a>.\n</p><p><img src=\"https://static-www.elastic.co/v3/assets/bltefdd0b53724fa2ce/blt83d9ad71c909c603/6154b0ac58e1f54c5cbc48f2/elastic-blog-academicpaper.jpg\" data-sys-asset-uid=\"blt83d9ad71c909c603\" alt=\"elastic-blog-academicpaper.jpg\"><span id=\"docs-internal-guid-0dab3aab-7fff-4f7f-8b92-e1500e9e915e\"><br><em>The author's recommended way of reading a paper: with a large coffee.</em></span></p><h2>You can email the author</h2><p>When working through a tough paper, you may spend hours puzzling over a formula, unsure if you're misunderstanding or if there's just a typo. If this were an open source project, you could ask a question on GitHub or StackOverflow. But where can you turn for an academic paper? The authors seem busy and might be annoyed by your emails.\n</p><p>On the contrary, many academics love hearing that their ideas are being put into practice and are happy to answer questions over email. If you work on a product they're familiar with, they might even list the application on their website!\n</p><p>There's also a growing trend for academics to discuss papers in the open, using many of the same tools from software development. If a paper has an accompanying software package, you might find answers to<a href=\"https://github.com/facebookresearch/faiss/issues/1928\"> common questions on Github</a>. Stack Exchange communities like “Theoretical Computer Science” and “Cross Validated” also contain<a href=\"https://cstheory.stackexchange.com/questions/49296/problem-in-the-paper-stable-minimum-space-partitioning-in-linear-time\"> detailed discussions about popular papers</a>. Some conferences have begun to publish all paper reviews online. These reviews contain<a href=\"https://openreview.net/forum?id=H1eA7AEtvS\"> back-and-forth discussions</a> with the authors that can surface helpful insights about the approach.\n</p><h2>To be continued</h2><p>This post focuses on the basics of choosing an academic paper and implementing it correctly, but doesn't cover all aspects of actually deploying the algorithm. For example, if the algorithm is just one component in a complex system, how do we ensure that changes to the component lead to end-to-end improvements? And what if integrating the algorithm requires substantial modifications or extensions that the original paper doesn't cover? These are important topics we hope to share more about in future posts.\n</p>","PublishedAt":"2021-09-30 01:00:00+00:00","OriginURL":"https://www.elastic.co/blog/implementing-academic-papers-lessons-learned-from-elasticsearch-and-lucene","SourceName":"Elastic"}},{"node":{"ID":768,"Title":"Building Uber’s Fulfillment Platform for Planet-Scale using Google Cloud Spanner","Description":"<p>&#160;</p>\n<h1><span style=\"font-weight: 400;\">Introduction</span></h1>\n<p><span style=\"font-weight: 400;\">The Fulfillment Platform is a foundational Uber domain that enables the rapid scaling of new verticals. The platform handles billions of database transactions each day, ranging from user actions (e.g., a driver starting a trip) and system actions </span>&#8230;</p>\n<p>The post <a rel=\"nofollow\" href=\"https://eng.uber.com/building-ubers-fulfillment-platform/\">Building Uber’s Fulfillment Platform for Planet-Scale using Google Cloud Spanner</a> appeared first on <a rel=\"nofollow\" href=\"https://eng.uber.com\">Uber Engineering Blog</a>.</p>\n","PublishedAt":"2021-09-29 19:56:20+00:00","OriginURL":"https://eng.uber.com/building-ubers-fulfillment-platform/","SourceName":"Uber"}},{"node":{"ID":1253,"Title":"Blog: How to Handle Data Duplication in Data-Heavy Kubernetes Environments","Description":"<p><strong>Authors:</strong>\nAugustinas Stirbis (CAST AI)</p>\n<h2 id=\"why-duplicate-data\">Why Duplicate Data?</h2>\n<p>It’s convenient to create a copy of your application with a copy of its state for each team.\nFor example, you might want a separate database copy to test some significant schema changes\nor develop other disruptive operations like bulk insert/delete/update...</p>\n<p><strong>Duplicating data takes a lot of time.</strong> That’s because you need first to download\nall the data from a source block storage provider to compute and then send\nit back to a storage provider again. There’s a lot of network traffic and CPU/RAM used in this process.\nHardware acceleration by offloading certain expensive operations to dedicated hardware is\n<strong>always a huge performance boost</strong>. It reduces the time required to complete an operation by orders\nof magnitude.</p>\n<h2 id=\"volume-snapshots-to-the-rescue\">Volume Snapshots to the rescue</h2>\n<p>Kubernetes introduced <a href=\"https://kubernetes.io/docs/concepts/storage/volume-snapshots/\">VolumeSnapshots</a> as alpha in 1.12,\nbeta in 1.17, and the Generally Available version in 1.20.\nVolumeSnapshots use specialized APIs from storage providers to duplicate volume of data.</p>\n<p>Since data is already in the same storage device (array of devices), duplicating data is usually\na metadata operation for storage providers with local snapshots (majority of on-premise storage providers).\nAll you need to do is point a new disk to an immutable snapshot and only\nsave deltas (or let it do a full-disk copy). As an operation that is inside the storage back-end,\nit’s much quicker and usually doesn’t involve sending traffic over the network.\nPublic Clouds storage providers under the hood work a bit differently. They save snapshots\nto Object Storage and then copy back from Object storage to Block storage when &quot;duplicating&quot; disk.\nTechnically there is a lot of Compute and network resources spent on Cloud providers side,\nbut from Kubernetes user perspective VolumeSnapshots work the same way whether is it local or\nremote snapshot storage provider and no Compute and Network resources are involved in this operation.</p>\n<h2 id=\"sounds-like-we-have-our-solution-right\">Sounds like we have our solution, right?</h2>\n<p>Actually, VolumeSnapshots are namespaced, and Kubernetes protects namespaced data from\nbeing shared between tenants (Namespaces). This Kubernetes limitation is a conscious design\ndecision so that a Pod running in a different namespace can’t mount another application’s\n<a href=\"https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims\">PersistentVolumeClaim</a> (PVC).</p>\n<p>One way around it would be to create multiple volumes with duplicate data in one namespace.\nHowever, you could easily reference the wrong copy.</p>\n<p>So the idea is to separate teams/initiatives by namespaces to avoid that and generally\nlimit access to the production namespace.</p>\n<h2 id=\"solution-creating-a-golden-snapshot-externally\">Solution? Creating a Golden Snapshot externally</h2>\n<p>Another way around this design limitation is to create Snapshot externally (not through Kubernetes).\nThis is also called pre-provisioning a snapshot manually. Next, I will import it\nas a multi-tenant golden snapshot that can be used for many namespaces. Below illustration will be\nfor AWS EBS (Elastic Block Storage) and GCE PD (Persistent Disk) services.</p>\n<h3 id=\"high-level-plan-for-preparing-the-golden-snapshot\">High-level plan for preparing the Golden Snapshot</h3>\n<ol>\n<li>Identify Disk (EBS/Persistent Disk) that you want to clone with data in the cloud provider</li>\n<li>Make a Disk Snapshot (in cloud provider console)</li>\n<li>Get Disk Snapshot ID</li>\n</ol>\n<h3 id=\"high-level-plan-for-cloning-data-for-each-team\">High-level plan for cloning data for each team</h3>\n<ol>\n<li>Create Namespace “sandbox01”</li>\n<li>Import Disk Snapshot (ID) as VolumeSnapshotContent to Kubernetes</li>\n<li>Create VolumeSnapshot in the Namespace &quot;sandbox01&quot; mapped to VolumeSnapshotContent</li>\n<li>Create the PersistentVolumeClaim from VolumeSnapshot</li>\n<li>Install Deployment or StatefulSet with PVC</li>\n</ol>\n<h2 id=\"step-1-identify-disk\">Step 1: Identify Disk</h2>\n<p>First, you need to identify your golden source. In my case, it’s a PostgreSQL database\non PersistentVolumeClaim “postgres-pv-claim” in the “production” namespace.</p>\n<pre tabindex=\"0\"><code class=\"language-terminal\" data-lang=\"terminal\">kubectl -n &lt;namespace&gt; get pvc &lt;pvc-name&gt; -o jsonpath=&#39;{.spec.volumeName}&#39;\n</code></pre><p>The output will look similar to:</p>\n<pre tabindex=\"0\"><code>pvc-3096b3ba-38b6-4fd1-a42f-ec99176ed0d90\n</code></pre><h2 id=\"step-2-prepare-your-golden-source\">Step 2: Prepare your golden source</h2>\n<p>You need to do this once or every time you want to refresh your golden data.</p>\n<h3 id=\"make-a-disk-snapshot\">Make a Disk Snapshot</h3>\n<p>Go to AWS EC2 or GCP Compute Engine console and search for an EBS volume\n(on AWS) or Persistent Disk (on GCP), that has a label matching the last output.\nIn this case I saw: <code>pvc-3096b3ba-38b6-4fd1-a42f-ec99176ed0d9</code>.</p>\n<p>Click on Create snapshot and give it a name. You can do it in Console manually,\nin AWS CloudShell / Google Cloud Shell, or in the terminal. To create a snapshot in the\nterminal you must have the AWS CLI tool (<code>aws</code>) or Google's CLI (<code>gcloud</code>)\ninstalled and configured.</p>\n<p>Here’s the command to create snapshot on GCP:</p>\n<pre tabindex=\"0\"><code class=\"language-terminal\" data-lang=\"terminal\">gcloud compute disks snapshot &lt;cloud-disk-id&gt; --project=&lt;gcp-project-id&gt; --snapshot-names=&lt;set-new-snapshot-name&gt; --zone=&lt;availability-zone&gt; --storage-location=&lt;region&gt;\n</code></pre>\n<figure>\n<img src=\"https://kubernetes.io/images/blog/2021-09-07-data-duplication-in-data-heavy-k8s-env/create-volume-snapshot-gcp.png\"\nalt=\"Screenshot of a terminal showing volume snapshot creation on GCP\"/> <figcaption>\n<h4>GCP snapshot creation</h4>\n</figcaption>\n</figure>\n<p>GCP identifies the disk by its PVC name, so it’s direct mapping. In AWS, you need to\nfind volume by the CSIVolumeName AWS tag with PVC name value first that will be used for snapshot creation.</p>\n<figure>\n<img src=\"https://kubernetes.io/images/blog/2021-09-07-data-duplication-in-data-heavy-k8s-env/identify-volume-aws.png\"\nalt=\"Screenshot of AWS web console, showing EBS volume identification\"/> <figcaption>\n<h4>Identify disk ID on AWS</h4>\n</figcaption>\n</figure>\n<p>Mark done Volume (volume-id) <code>vol-00c7ecd873c6fb3ec</code> and ether create EBS snapshot in AWS Console, or use <code>aws cli</code>.</p>\n<pre tabindex=\"0\"><code class=\"language-terminal\" data-lang=\"terminal\">aws ec2 create-snapshot --volume-id &#39;&lt;volume-id&gt;&#39; --description &#39;&lt;set-new-snapshot-name&gt;&#39; --tag-specifications &#39;ResourceType=snapshot&#39;\n</code></pre><h2 id=\"step-3-get-your-disk-snapshot-id\">Step 3: Get your Disk Snapshot ID</h2>\n<p>In AWS, the command above will output something similar to:</p>\n<pre tabindex=\"0\"><code class=\"language-terminal\" data-lang=\"terminal\">&#34;SnapshotId&#34;: &#34;snap-09ed24a70bc19bbe4&#34;\n</code></pre><p>If you’re using the GCP cloud, you can get the snapshot ID from the gcloud command by querying for the snapshot’s given name:</p>\n<pre tabindex=\"0\"><code class=\"language-terminal\" data-lang=\"terminal\">gcloud compute snapshots --project=&lt;gcp-project-id&gt; describe &lt;new-snapshot-name&gt; | grep id:\n</code></pre><p>You should get similar output to:</p>\n<pre tabindex=\"0\"><code>id: 6645363163809389170\n</code></pre><h2 id=\"step-4-create-a-development-environment-for-each-team\">Step 4: Create a development environment for each team</h2>\n<p>Now I have my Golden Snapshot, which is immutable data. Each team will get a copy\nof this data, and team members can modify it as they see fit, given that a new EBS/persistent\ndisk will be created for each team.</p>\n<p>Below I will define a manifest for each namespace. To save time, you can replace\nthe namespace name (such as changing “sandbox01” → “sandbox42”) using tools\nsuch as <code>sed</code> or <code>yq</code>, with Kubernetes-aware templating tools like\n<a href=\"https://kubernetes.io/docs/tasks/manage-kubernetes-objects/kustomization/\">Kustomize</a>,\nor using variable substitution in a CI/CD pipeline.</p>\n<p>Here's an example manifest:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex;\"><span><span style=\"color:#00f;font-weight:bold\">---</span><span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">apiVersion</span>:<span style=\"color:#bbb\"> </span>snapshot.storage.k8s.io/v1<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">kind</span>:<span style=\"color:#bbb\"> </span>VolumeSnapshotContent<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">metadata</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>postgresql-orders-db-sandbox01<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">namespace</span>:<span style=\"color:#bbb\"> </span>sandbox01<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">spec</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">deletionPolicy</span>:<span style=\"color:#bbb\"> </span>Retain<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">driver</span>:<span style=\"color:#bbb\"> </span>pd.csi.storage.gke.io<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">source</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">snapshotHandle</span>:<span style=\"color:#bbb\"> </span><span style=\"color:#b44\">&#39;gcp/projects/staging-eu-castai-vt5hy2/global/snapshots/6645363163809389170&#39;</span><span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">volumeSnapshotRef</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">kind</span>:<span style=\"color:#bbb\"> </span>VolumeSnapshot<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>postgresql-orders-db-snap<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">namespace</span>:<span style=\"color:#bbb\"> </span>sandbox01<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#00f;font-weight:bold\">---</span><span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">apiVersion</span>:<span style=\"color:#bbb\"> </span>snapshot.storage.k8s.io/v1<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">kind</span>:<span style=\"color:#bbb\"> </span>VolumeSnapshot<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">metadata</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>postgresql-orders-db-snap<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">namespace</span>:<span style=\"color:#bbb\"> </span>sandbox01<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">spec</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">source</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">volumeSnapshotContentName</span>:<span style=\"color:#bbb\"> </span>postgresql-orders-db-sandbox01<span style=\"color:#bbb\">\n</span></span></span></code></pre></div><p>In Kubernetes, VolumeSnapshotContent (VSC) objects are not namespaced.\nHowever, I need a separate VSC for each different namespace to use, so the\n<code>metadata.name</code> of each VSC must also be different. To make that straightfoward,\nI used the target namespace as part of the name.</p>\n<p>Now it’s time to replace the driver field with the CSI (Container Storage Interface) driver\ninstalled in your K8s cluster. Major cloud providers have CSI driver for block storage that\nsupport VolumeSnapshots but quite often CSI drivers are not installed by default, consult\nwith your Kubernetes provider.</p>\n<p>That manifest above defines a VSC that works on GCP.\nOn AWS, driver and SnashotHandle values might look like:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-YAML\" data-lang=\"YAML\"><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">driver</span>:<span style=\"color:#bbb\"> </span>ebs.csi.aws.com<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">source</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">snapshotHandle</span>:<span style=\"color:#bbb\"> </span><span style=\"color:#b44\">&#34;snap-07ff83d328c981c98&#34;</span><span style=\"color:#bbb\">\n</span></span></span></code></pre></div><p>At this point, I need to use the <em>Retain</em> policy, so that the CSI driver doesn’t try to\ndelete my manually created EBS disk snapshot.</p>\n<p>For GCP, you will have to build this string by hand - add a full project ID and snapshot ID.\nFor AWS, it’s just a plain snapshot ID.</p>\n<p>VSC also requires specifying which VolumeSnapshot (VS) will use it, so VSC and VS are\nreferencing each other.</p>\n<p>Now I can create PersistentVolumeClaim from VS above. It’s important to set this first:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex;\"><span><span style=\"color:#00f;font-weight:bold\">---</span><span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">apiVersion</span>:<span style=\"color:#bbb\"> </span>v1<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">kind</span>:<span style=\"color:#bbb\"> </span>PersistentVolumeClaim<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">metadata</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>postgres-pv-claim<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">namespace</span>:<span style=\"color:#bbb\"> </span>sandbox01<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">spec</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">dataSource</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">kind</span>:<span style=\"color:#bbb\"> </span>VolumeSnapshot<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>postgresql-orders-db-snap<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">apiGroup</span>:<span style=\"color:#bbb\"> </span>snapshot.storage.k8s.io<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">accessModes</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>- ReadWriteOnce<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">resources</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">requests</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">storage</span>:<span style=\"color:#bbb\"> </span>21Gi<span style=\"color:#bbb\">\n</span></span></span></code></pre></div><p>If default StorageClass has <a href=\"https://kubernetes.io/docs/concepts/storage/storage-classes/#volume-binding-mode\">WaitForFirstConsumer</a> policy,\nthen the actual Cloud Disk will be created from the Golden Snapshot only when some Pod bounds that PVC.</p>\n<p>Now I assign that PVC to my Pod (in my case, it’s Postgresql) as I would with any other PVC.</p>\n<pre tabindex=\"0\"><code class=\"language-terminal\" data-lang=\"terminal\">kubectl -n &lt;namespace&gt; get volumesnapshotContent,volumesnapshot,pvc,pod\n</code></pre><p>Both VS and VSC should be <em>READYTOUSE</em> true, PVC bound, and the Pod (from Deployment or StatefulSet) running.</p>\n<p><strong>To keep on using data from my Golden Snapshot, I just need to repeat this for the\nnext namespace and voilà! No need to waste time and compute resources on the duplication process.</strong></p>","PublishedAt":"2021-09-29 00:00:00+00:00","OriginURL":"https://kubernetes.io/blog/2021/09/29/how-to-handle-data-duplication-in-data-heavy-kubernetes-environments/","SourceName":"Kubernetes"}}]}},"pageContext":{"limit":30,"skip":4080,"numPages":158,"currentPage":137}},"staticQueryHashes":["3649515864"]}