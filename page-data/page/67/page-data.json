{"componentChunkName":"component---src-templates-blog-list-tsx","path":"/page/67","result":{"data":{"allPost":{"edges":[{"node":{"ID":2731,"Title":"Elastic Observability 8.6: Improving operational efficiencies with improved host analysis, application analysis, and workflow integrations","Description":"","PublishedAt":"2023-01-10 00:00:00+00:00","OriginURL":"https://www.elastic.co/blog/whats-new-elastic-observability-8-6-0","SourceName":"Elastic"}},{"node":{"ID":2732,"Title":"Elastic Stack & Cloud 8.6: Vector search, alerting and cases, metrics indices enhancements","Description":"","PublishedAt":"2023-01-10 00:00:00+00:00","OriginURL":"https://www.elastic.co/blog/whats-new-elasticsearch-kibana-cloud-8-6-0","SourceName":"Elastic"}},{"node":{"ID":2733,"Title":"Streamline incident management with Elastic Observability and Atlassian Opsgenie","Description":"","PublishedAt":"2023-01-10 00:00:00+00:00","OriginURL":"https://www.elastic.co/blog/streamline-incident-management-elastic-observability-atlassian-opsgenie","SourceName":"Elastic"}},{"node":{"ID":2734,"Title":"Accelerate root cause analysis, response times, and more with Elastic 8.6","Description":"","PublishedAt":"2023-01-10 00:00:00+00:00","OriginURL":"https://www.elastic.co/blog/whats-new-elastic-8-6-0","SourceName":"Elastic"}},{"node":{"ID":2715,"Title":"Bolstering Snyk’s developer security platform in 2022","Description":"Now that it's a new year, let’s take a look back at some of the amazing 2022 Snyk developer security platform highlights. ","PublishedAt":"2023-01-09 18:21:41+00:00","OriginURL":"https://snyk.io/blog/snyk-developer-security-platform-2022-review/","SourceName":"Snyk"}},{"node":{"ID":2713,"Title":"Happy New Year! AWS Week in Review – January 9, 2023","Description":"Happy New Year! As we kick off 2023, I wanted to take a moment to remind you of some 2023 predictions by AWS leaders for you to help prepare for the new year. Five Tech Predictions for 2023 and Beyond by Dr. Wener Vogels, CTO of Amazon.com – Read how these technologies and trends will […]","PublishedAt":"2023-01-09 17:00:19+00:00","OriginURL":"https://aws.amazon.com/blogs/aws/happy-new-year-aws-week-in-review-january-9-2023/","SourceName":"AWS"}},{"node":{"ID":2714,"Title":"Building Obsidian, Tinder’s Design System","Description":"","PublishedAt":"2023-01-09 16:41:01+00:00","OriginURL":"https://medium.com/tinder/building-obsidian-tinders-design-system-e127770d8e3f?source=rss----906928af8599---4","SourceName":"Tinder"}},{"node":{"ID":2706,"Title":"Introducing Digital Experience Monitoring","Description":"With Digital Experience Monitoring, we’ve set out to build the tools you need to quickly find the needle in the haystack and resolve issues related to performance and connectivity","PublishedAt":"2023-01-09 14:00:00+00:00","OriginURL":"https://blog.cloudflare.com/introducing-digital-experience-monitoring/","SourceName":"Cloudflare"}},{"node":{"ID":2707,"Title":"Cloudflare is faster than Zscaler","Description":"Cloudflare is 38-55% faster at delivering Zero Trust experiences than Zscaler. Let’s talk about why that is and how we found that out","PublishedAt":"2023-01-09 14:00:00+00:00","OriginURL":"https://blog.cloudflare.com/network-performance-update-cio-edition/","SourceName":"Cloudflare"}},{"node":{"ID":2708,"Title":"Bring your own certificates to Cloudflare Gateway","Description":"Security and IT administrators can now bring their own custom certificates to encrypt user side connections for Zero Trust","PublishedAt":"2023-01-09 14:00:00+00:00","OriginURL":"https://blog.cloudflare.com/bring-your-certificates-cloudflare-gateway/","SourceName":"Cloudflare"}},{"node":{"ID":2709,"Title":"Weave your own global, private, virtual Zero Trust network on Cloudflare with WARP-to-WARP","Description":"Today, we’re excited to announce a new way to use Cloudflare WARP to securely connect to and from any device in your Zero Trust deployment simply running WARP","PublishedAt":"2023-01-09 14:00:00+00:00","OriginURL":"https://blog.cloudflare.com/warp-to-warp/","SourceName":"Cloudflare"}},{"node":{"ID":2711,"Title":"Beyond Git: The other version control systems developers use","Description":"<p>Our developer survey found 93% of developers use Git. But what are the other 7% using?</p>\n<p>The post <a rel=\"nofollow\" href=\"https://stackoverflow.blog/2023/01/09/beyond-git-the-other-version-control-systems-developers-use/\">Beyond Git: The other version control systems developers use</a> appeared first on <a rel=\"nofollow\" href=\"https://stackoverflow.blog\">Stack Overflow Blog</a>.</p>\n","PublishedAt":"2023-01-09 14:00:00+00:00","OriginURL":"https://stackoverflow.blog/2023/01/09/beyond-git-the-other-version-control-systems-developers-use/","SourceName":"Stack Overflow"}},{"node":{"ID":2710,"Title":"Exploring structured data as graphs in Miro","Description":"","PublishedAt":"2023-01-09 12:55:05+00:00","OriginURL":"https://medium.com/miro-engineering/exploring-structured-data-as-graphs-in-miro-880aa4051b70?source=rss----555f7fd62a50---4","SourceName":"Miro Engineering"}},{"node":{"ID":2712,"Title":"Improve the compliance and security posture of your Google Cloud environment with Datadog","Description":"<img class=\"webfeedsFeaturedVisual rss\" src=\"https://imgix.datadoghq.com/img/blog/cspm-for-gcp-with-datadog/cspm-for-gcp-hero.png\" width=\"100%\"/>Organizations are scaling their environments at a rapid pace, deploying thousands of cloud resources, services, and accounts. Because of their size and complexity, these environments are more susceptible to compliance issues—a misconfiguration in a single cloud resource can lead to costly data breaches. For that reason, organizations are prioritizing governance, risk, and compliance (GRC) management to ensure that their environments are configured appropriately.Datadog Cloud Security Management (CSM) supports your GRC goals by providing a single place where you can track your compliance posture, surface misconfigurations that leave your organization vulnerable to attacks, and automate evidence collection for audits.","PublishedAt":"2023-01-09 00:00:00+00:00","OriginURL":"https://www.datadoghq.com/blog/cspm-for-gcp-with-datadog/","SourceName":"Datadog"}},{"node":{"ID":2705,"Title":"Welcome to CIO Week 2023","Description":"This CIO Week we’ll demonstrate how Cloudflare is helping CIOs keep data, devices and employees both safe and fast across hybrid and remote environments. We’ll show how Cloudflare accelerates digital transformation and modernizes networking and security towards a Zero Trust model","PublishedAt":"2023-01-08 18:00:00+00:00","OriginURL":"https://blog.cloudflare.com/welcome-to-cio-week-2023/","SourceName":"Cloudflare"}},{"node":{"ID":2795,"Title":"Datadog at AWS SKO 2023","Description":"","PublishedAt":"2023-01-08 00:00:00+00:00","OriginURL":"https://www.datadoghq.com/event/micro-awssko-2023/thankyou-fa.html","SourceName":"Datadog"}},{"node":{"ID":2704,"Title":"Supply chain security incident at CircleCI: Rotate your secrets","Description":"On January 4, CircleCI, an automated CI/CD pipeline setup tool, reported a security incident in their product by sharing an advisory. Learn about this incident, next steps, and about supply chain security.","PublishedAt":"2023-01-06 22:07:00+00:00","OriginURL":"https://snyk.io/blog/supply-chain-security-incident-circleci-secrets/","SourceName":"Snyk"}},{"node":{"ID":2702,"Title":"The Overflow #159: Our top blog posts (part 2)","Description":"<p>Reading academic papers, hidden spam links, and language in the brain</p>\n<p>The post <a rel=\"nofollow\" href=\"https://stackoverflow.blog/2023/01/06/the-overflow-159-our-top-blog-posts-part-2/\">The Overflow #159: Our top blog posts (part 2)  </a> appeared first on <a rel=\"nofollow\" href=\"https://stackoverflow.blog\">Stack Overflow Blog</a>.</p>\n","PublishedAt":"2023-01-06 14:00:00+00:00","OriginURL":"https://stackoverflow.blog/2023/01/06/the-overflow-159-our-top-blog-posts-part-2/","SourceName":"Stack Overflow"}},{"node":{"ID":2699,"Title":"How we reduced the development time of our React project to almost 70–80%?","Description":"","PublishedAt":"2023-01-06 06:58:38+00:00","OriginURL":"https://medium.com/engineering-housing/how-we-reduced-the-development-time-of-our-react-project-to-almost-70-80-b4c15fd53f28?source=rss----3a69e32e2594---4","SourceName":"Housing.com"}},{"node":{"ID":2700,"Title":"BE Experimentation with VWO","Description":"","PublishedAt":"2023-01-06 06:52:58+00:00","OriginURL":"https://medium.com/engineering-housing/be-experimentation-with-vwo-80a96b0c2c59?source=rss----3a69e32e2594---4","SourceName":"Housing.com"}},{"node":{"ID":2701,"Title":"Our favorite apps, books, and games of 2023 (Ep. 524)","Description":"<p>From BeReal to RetroPi, we look back at what brought us joy last year.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://stackoverflow.blog/2023/01/06/our-favorite-apps-books-and-games-of-2023-ep-524/\">Our favorite apps, books, and games of 2023 (Ep. 524)</a> appeared first on <a rel=\"nofollow\" href=\"https://stackoverflow.blog\">Stack Overflow Blog</a>.</p>\n","PublishedAt":"2023-01-06 05:40:43+00:00","OriginURL":"https://stackoverflow.blog/2023/01/06/our-favorite-apps-books-and-games-of-2023-ep-524/","SourceName":"Stack Overflow"}},{"node":{"ID":2698,"Title":"Blog: Kubernetes 1.26: Eviction policy for unhealthy pods guarded by PodDisruptionBudgets","Description":"<p><strong>Authors:</strong> Filip Křepinský (Red Hat), Morten Torkildsen (Google), Ravi Gudimetla (Apple)</p>\n<p>Ensuring the disruptions to your applications do not affect its availability isn't a simple\ntask. Last month's release of Kubernetes v1.26 lets you specify an <em>unhealthy pod eviction policy</em>\nfor <a href=\"https://kubernetes.io/docs/concepts/workloads/pods/disruptions/#pod-disruption-budgets\">PodDisruptionBudgets</a> (PDBs)\nto help you maintain that availability during node management operations.\nIn this article, we will dive deeper into what modifications were introduced for PDBs to\ngive application owners greater flexibility in managing disruptions.</p>\n<h2 id=\"what-problems-does-this-solve\">What problems does this solve?</h2>\n<p>API-initiated eviction of pods respects PodDisruptionBudgets (PDBs). This means that a requested <a href=\"https://kubernetes.io/docs/concepts/scheduling-eviction/#pod-disruption\">voluntary disruption</a>\nvia an eviction to a Pod, should not disrupt a guarded application and <code>.status.currentHealthy</code> of a PDB should not fall\nbelow <code>.status.desiredHealthy</code>. Running pods that are <a href=\"https://kubernetes.io/docs/tasks/run-application/configure-pdb/#healthiness-of-a-pod\">Unhealthy</a>\ndo not count towards the PDB status, but eviction of these is only possible in case the application\nis not disrupted. This helps disrupted or not yet started application to achieve availability\nas soon as possible without additional downtime that would be caused by evictions.</p>\n<p>Unfortunately, this poses a problem for cluster administrators that would like to drain nodes\nwithout any manual interventions. Misbehaving applications with pods in <code>CrashLoopBackOff</code>\nstate (due to a bug or misconfiguration) or pods that are simply failing to become ready\nmake this task much harder. Any eviction request will fail due to violation of a PDB,\nwhen all pods of an application are unhealthy. Draining of a node cannot make any progress\nin that case.</p>\n<p>On the other hand there are users that depend on the existing behavior, in order to:</p>\n<ul>\n<li>prevent data-loss that would be caused by deleting pods that are guarding an underlying resource or storage</li>\n<li>achieve the best availability possible for their application</li>\n</ul>\n<p>Kubernetes 1.26 introduced a new experimental field to the PodDisruptionBudget API: <code>.spec.unhealthyPodEvictionPolicy</code>.\nWhen enabled, this field lets you support both of those requirements.</p>\n<h2 id=\"how-does-it-work\">How does it work?</h2>\n<p>API-initiated eviction is the process that triggers graceful pod termination.\nThe process can be initiated either by calling the API directly,\nby using a <code>kubectl drain</code> command, or other actors in the cluster.\nDuring this process every pod removal is consulted with appropriate PDBs,\nto ensure that a sufficient number of pods is always running in the cluster.</p>\n<p>The following policies allow PDB authors to have a greater control how the process deals with unhealthy pods.</p>\n<p>There are two policies <code>IfHealthyBudget</code> and <code>AlwaysAllow</code> to choose from.</p>\n<p>The former, <code>IfHealthyBudget</code>, follows the existing behavior to achieve the best availability\nthat you get by default. Unhealthy pods can be disrupted only if their application\nhas a minimum available <code>.status.desiredHealthy</code> number of pods.</p>\n<p>By setting the <code>spec.unhealthyPodEvictionPolicy</code> field of your PDB to <code>AlwaysAllow</code>,\nyou are choosing the best effort availability for your application.\nWith this policy it is always possible to evict unhealthy pods.\nThis will make it easier to maintain and upgrade your clusters.</p>\n<p>We think that <code>AlwaysAllow</code> will often be a better choice, but for some critical workloads you may\nstill prefer to protect even unhealthy Pods from node drains or other forms of API-initiated\neviction.</p>\n<h2 id=\"how-do-i-use-it\">How do I use it?</h2>\n<p>This is an alpha feature, which means you have to enable the <code>PDBUnhealthyPodEvictionPolicy</code>\n<a href=\"https://kubernetes.io/docs/reference/command-line-tools-reference/feature-gates/\">feature gate</a>,\nwith the command line argument <code>--feature-gates=PDBUnhealthyPodEvictionPolicy=true</code>\nto the kube-apiserver.</p>\n<p>Here's an example. Assume that you've enabled the feature gate in your cluster, and that you\nalready defined a Deployment that runs a plain webserver. You labelled the Pods for that\nDeployment with <code>app: nginx</code>.\nYou want to limit avoidable disruption, and you know that best effort availability is\nsufficient for this app.\nYou decide to allow evictions even if those webserver pods are unhealthy.\nYou create a PDB to guard this application, with the <code>AlwaysAllow</code> policy for evicting\nunhealthy pods:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex;\"><span><span style=\"color:#008000;font-weight:bold\">apiVersion</span>:<span style=\"color:#bbb\"> </span>policy/v1<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">kind</span>:<span style=\"color:#bbb\"> </span>PodDisruptionBudget<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">metadata</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>nginx-pdb<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">spec</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">selector</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">matchLabels</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">app</span>:<span style=\"color:#bbb\"> </span>nginx<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">maxUnavailable</span>:<span style=\"color:#bbb\"> </span><span style=\"color:#666\">1</span><span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">unhealthyPodEvictionPolicy</span>:<span style=\"color:#bbb\"> </span>AlwaysAllow<span style=\"color:#bbb\">\n</span></span></span></code></pre></div><h2 id=\"how-can-i-learn-more\">How can I learn more?</h2>\n<ul>\n<li>Read the KEP: <a href=\"https://github.com/kubernetes/enhancements/tree/master/keps/sig-apps/3017-pod-healthy-policy-for-pdb\">Unhealthy Pod Eviction Policy for PDBs</a></li>\n<li>Read the documentation: <a href=\"https://kubernetes.io/docs/tasks/run-application/configure-pdb/#unhealthy-pod-eviction-policy\">Unhealthy Pod Eviction Policy</a> for PodDisruptionBudgets</li>\n<li>Review the Kubernetes documentation for <a href=\"docs/concepts/workloads/pods/disruptions/#pod-disruption-budgets\">PodDisruptionBudgets</a>, <a href=\"docs/tasks/administer-cluster/safely-drain-node/\">draining of Nodes</a> and <a href=\"docs/concepts/scheduling-eviction/api-eviction/\">evictions</a></li>\n</ul>\n<h2 id=\"how-do-i-get-involved\">How do I get involved?</h2>\n<p>If you have any feedback, please reach out to us in the <a href=\"https://kubernetes.slack.com/archives/C18NZM5K9\">#sig-apps</a> channel on Slack (visit <a href=\"https://slack.k8s.io/\">https://slack.k8s.io/</a> for an invitation if you need one), or on the SIG Apps mailing list: <a href=\"mailto:kubernetes-sig-apps@googlegroups.com\">kubernetes-sig-apps@googlegroups.com</a></p>","PublishedAt":"2023-01-06 00:00:00+00:00","OriginURL":"https://kubernetes.io/blog/2023/01/06/unhealthy-pod-eviction-policy-for-pdbs/","SourceName":"Kubernetes"}},{"node":{"ID":2703,"Title":"Monitor Tanzu Kubernetes Grid on vSphere with Datadog","Description":"<img class=\"webfeedsFeaturedVisual rss\" src=\"https://imgix.datadoghq.com/img/blog/monitor-vsphere-tanzu-kubernetes-grid-with-datadog/monitor-vsphere-tkg-hero.png\" width=\"100%\"/>With vSphere and Tanzu Kubernetes Grid (TKG), VMware enables enterprise organizations to combine the economic advantages of virtual machines (VMs) with the agility, portability, and scalability provided by Kubernetes.vSphere is VMware&rsquo;s platform for the provisioning and management of VMs. vSphere&rsquo;s vCenter Servers enable organizations to centrally manage and monitor their VMs, while its ESXi hypervisors help them optimize their infrastructure and reduce costs by strategically allocating bare-metal server resources. TKG is VMware&rsquo;s turnkey solution for deploying and managing Kubernetes clusters at enterprise scale.","PublishedAt":"2023-01-06 00:00:00+00:00","OriginURL":"https://www.datadoghq.com/blog/monitor-vsphere-tanzu-kubernetes-grid-with-datadog/","SourceName":"Datadog"}},{"node":{"ID":2826,"Title":"What I Learned in One Year as an SRE Trainee","Description":"I recently celebrated my one year anniversary as a Site Reliability Engineering (SRE) trainee at SoundCloud. Looking back, I had very little…","PublishedAt":"2023-01-06 00:00:00+00:00","OriginURL":"https://developers.soundcloud.com/blog/sre-trainee","SourceName":"Soundcloud"}},{"node":{"ID":2696,"Title":"Amazon S3 Encrypts New Objects By Default","Description":"At AWS, security is job zero. Starting today, Amazon Simple Storage Service (Amazon S3) encrypts all new objects by default. Now, S3 automatically applies server-side encryption (SSE-S3) for each new object, unless you specify a different encryption option. SSE-S3 was first launched in 2011. As Jeff wrote at the time: “Amazon S3 server-side encryption handles […]","PublishedAt":"2023-01-05 21:03:09+00:00","OriginURL":"https://aws.amazon.com/blogs/aws/amazon-s3-encrypts-new-objects-by-default/","SourceName":"AWS"}},{"node":{"ID":2697,"Title":"The Winter/Summer Bash 2022 Hat Cafe is now closed!","Description":"<p>We had fun celebrating Winter Bash 2022 with you all! While we’ve closed our cafe, let’s look at a few highlights and hat-wearing avatars that brought us joy this holiday season. </p>\n<p>The post <a rel=\"nofollow\" href=\"https://stackoverflow.blog/2023/01/05/the-winter-summer-bash-2022-hat-cafe-is-now-closed/\">The Winter/Summer Bash 2022 Hat Cafe is now closed!</a> appeared first on <a rel=\"nofollow\" href=\"https://stackoverflow.blog\">Stack Overflow Blog</a>.</p>\n","PublishedAt":"2023-01-05 20:58:54+00:00","OriginURL":"https://stackoverflow.blog/2023/01/05/the-winter-summer-bash-2022-hat-cafe-is-now-closed/","SourceName":"Stack Overflow"}},{"node":{"ID":2693,"Title":"2023 Predictions: Data Trends That Will Dominate Business Agenda in APAC","Description":"<p>Vice President of Asia Pacific and Japan Remus Lim discusses the key business trends that leaders in APAC need to keep an eye on, and how to leverage data to stay the course in the coming year.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.cloudera.com/2023-predictions-data-trends-that-will-dominate-business-agenda-in-apac/\">2023 Predictions: Data Trends That Will Dominate Business Agenda in APAC</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.cloudera.com\">Cloudera Blog</a>.</p>\n","PublishedAt":"2023-01-05 14:34:05+00:00","OriginURL":"https://blog.cloudera.com/2023-predictions-data-trends-that-will-dominate-business-agenda-in-apac/","SourceName":"Cloudera"}},{"node":{"ID":2692,"Title":"Blog: Kubernetes 1.26: Retroactive Default StorageClass","Description":"<p><strong>Author:</strong> Roman Bednář (Red Hat)</p>\n<p>The v1.25 release of Kubernetes introduced an alpha feature to change how a default StorageClass was assigned to a PersistentVolumeClaim (PVC).\nWith the feature enabled, you no longer need to create a default StorageClass first and PVC second to assign the class. Additionally, any PVCs without a StorageClass assigned can be updated later.\nThis feature was graduated to beta in Kubernetes 1.26.</p>\n<p>You can read <a href=\"https://kubernetes.io/docs/concepts/storage/persistent-volumes/#retroactive-default-storageclass-assignment\">retroactive default StorageClass assignment</a> in the Kubernetes documentation for more details about how to use that,\nor you can read on to learn about why the Kubernetes project is making this change.</p>\n<h2 id=\"why-did-storageclass-assignment-need-improvements\">Why did StorageClass assignment need improvements</h2>\n<p>Users might already be familiar with a similar feature that assigns default StorageClasses to <strong>new</strong> PVCs at the time of creation. This is currently handled by the <a href=\"https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#defaultstorageclass\">admission controller</a>.</p>\n<p>But what if there wasn't a default StorageClass defined at the time of PVC creation?\nUsers would end up with a PVC that would never be assigned a class.\nAs a result, no storage would be provisioned, and the PVC would be somewhat &quot;stuck&quot; at this point.\nGenerally, two main scenarios could result in &quot;stuck&quot; PVCs and cause problems later down the road.\nLet's take a closer look at each of them.</p>\n<h3 id=\"changing-default-storageclass\">Changing default StorageClass</h3>\n<p>With the alpha feature enabled, there were two options admins had when they wanted to change the default StorageClass:</p>\n<ol>\n<li>\n<p>Creating a new StorageClass as default before removing the old one associated with the PVC.\nThis would result in having two defaults for a short period.\nAt this point, if a user were to create a PersistentVolumeClaim with storageClassName set to <code>null</code> (implying default StorageClass), the newest default StorageClass would be chosen and assigned to this PVC.</p>\n</li>\n<li>\n<p>Removing the old default first and creating a new default StorageClass.\nThis would result in having no default for a short time.\nSubsequently, if a user were to create a PersistentVolumeClaim with storageClassName set to <code>null</code> (implying default StorageClass), the PVC would be in <code>Pending</code> state forever.\nThe user would have to fix this by deleting the PVC and recreating it once the default StorageClass was available.</p>\n</li>\n</ol>\n<h3 id=\"resource-ordering-during-cluster-installation\">Resource ordering during cluster installation</h3>\n<p>If a cluster installation tool needed to create resources that required storage, for example, an image registry, it was difficult to get the ordering right.\nThis is because any Pods that required storage would rely on the presence of a default StorageClass and would fail to be created if it wasn't defined.</p>\n<h2 id=\"what-changed\">What changed</h2>\n<p>We've changed the PersistentVolume (PV) controller to assign a default StorageClass to any unbound PersistentVolumeClaim that has the storageClassName set to <code>null</code>.\nWe've also modified the PersistentVolumeClaim admission within the API server to allow the change of values from an unset value to an actual StorageClass name.</p>\n<h3 id=\"null-vs-empty-string\">Null <code>storageClassName</code> versus <code>storageClassName: &quot;&quot;</code> - does it matter?</h3>\n<p>Before this feature was introduced, those values were equal in terms of behavior. Any PersistentVolumeClaim with the storageClassName set to <code>null</code> or <code>&quot;&quot;</code> would bind to an existing PersistentVolume resource with storageClassName also set to <code>null</code> or <code>&quot;&quot;</code>.</p>\n<p>With this new feature enabled we wanted to maintain this behavior but also be able to update the StorageClass name.\nWith these constraints in mind, the feature changes the semantics of <code>null</code>. If a default StorageClass is present, <code>null</code> would translate to &quot;Give me a default&quot; and <code>&quot;&quot;</code> would mean &quot;Give me PersistentVolume that also has <code>&quot;&quot;</code> StorageClass name.&quot; In the absence of a StorageClass, the behavior would remain unchanged.</p>\n<p>Summarizing the above, we've changed the semantics of <code>null</code> so that its behavior depends on the presence or absence of a definition of default StorageClass.</p>\n<p>The tables below show all these cases to better describe when PVC binds and when its StorageClass gets updated.</p>\n<table>\n<caption>PVC binding behavior with Retroactive default StorageClass</caption>\n<thead>\n<tr>\n<th colspan=\"2\"></th>\n<th>PVC <tt>storageClassName</tt> = <code>\"\"</code></th>\n<th>PVC <tt>storageClassName</tt> = <code>null</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td rowspan=\"2\">Without default class</td>\n<td>PV <tt>storageClassName</tt> = <code>\"\"</code></td>\n<td>binds</td>\n<td>binds</td>\n</tr>\n<tr>\n<td>PV without <tt>storageClassName</tt></td>\n<td>binds</td>\n<td>binds</td>\n</tr>\n<tr>\n<td rowspan=\"2\">With default class</td>\n<td>PV <tt>storageClassName</tt> = <code>\"\"</code></td>\n<td>binds</td>\n<td>class updates</td>\n</tr>\n<tr>\n<td>PV without <tt>storageClassName</tt></td>\n<td>binds</td>\n<td>class updates</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"how-to-use-it\">How to use it</h2>\n<p>If you want to test the feature whilst it's alpha, you need to enable the relevant feature gate in the kube-controller-manager and the kube-apiserver. Use the <code>--feature-gates</code> command line argument:</p>\n<pre tabindex=\"0\"><code>--feature-gates=&#34;...,RetroactiveDefaultStorageClass=true&#34;\n</code></pre><h3 id=\"test-drive\">Test drive</h3>\n<p>If you would like to see the feature in action and verify it works fine in your cluster here's what you can try:</p>\n<ol>\n<li>Define a basic PersistentVolumeClaim:</li>\n</ol>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex;\"><span><span style=\"color:#008000;font-weight:bold\">apiVersion</span>:<span style=\"color:#bbb\"> </span>v1<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">kind</span>:<span style=\"color:#bbb\"> </span>PersistentVolumeClaim<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">metadata</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>pvc-1<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">spec</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">accessModes</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>- ReadWriteOnce<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">resources</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">requests</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">storage</span>:<span style=\"color:#bbb\"> </span>1Gi<span style=\"color:#bbb\">\n</span></span></span></code></pre></div><ol start=\"2\">\n<li>Create the PersistentVolumeClaim when there is no default StorageClass. The PVC won't provision or bind (unless there is an existing, suitable PV already present) and will remain in <code>Pending</code> state.</li>\n</ol>\n<pre tabindex=\"0\"><code>$ kc get pvc\nNAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGE\npvc-1 Pending\n</code></pre><ol start=\"3\">\n<li>Configure one StorageClass as default.</li>\n</ol>\n<pre tabindex=\"0\"><code>$ kc patch sc -p &#39;{&#34;metadata&#34;:{&#34;annotations&#34;:{&#34;storageclass.kubernetes.io/is-default-class&#34;:&#34;true&#34;}}}&#39;\nstorageclass.storage.k8s.io/my-storageclass patched\n</code></pre><ol start=\"4\">\n<li>Verify that PersistentVolumeClaims is now provisioned correctly and was updated retroactively with new default StorageClass.</li>\n</ol>\n<pre tabindex=\"0\"><code>$ kc get pvc\nNAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGE\npvc-1 Bound pvc-06a964ca-f997-4780-8627-b5c3bf5a87d8 1Gi RWO my-storageclass 87m\n</code></pre><h3 id=\"new-metrics\">New metrics</h3>\n<p>To help you see that the feature is working as expected we also introduced a new <code>retroactive_storageclass_total</code> metric to show how many times that the PV controller attempted to update PersistentVolumeClaim, and <code>retroactive_storageclass_errors_total</code> to show how many of those attempts failed.</p>\n<h2 id=\"getting-involved\">Getting involved</h2>\n<p>We always welcome new contributors so if you would like to get involved you can join our <a href=\"https://github.com/kubernetes/community/tree/master/sig-storage\">Kubernetes Storage Special-Interest-Group</a> (SIG).</p>\n<p>If you would like to share feedback, you can do so on our <a href=\"https://app.slack.com/client/T09NY5SBT/C09QZFCE5\">public Slack channel</a>.</p>\n<p>Special thanks to all the contributors that provided great reviews, shared valuable insight and helped implement this feature (alphabetical order):</p>\n<ul>\n<li>Deep Debroy (<a href=\"https://github.com/ddebroy\">ddebroy</a>)</li>\n<li>Divya Mohan (<a href=\"https://github.com/divya-mohan0209\">divya-mohan0209</a>)</li>\n<li>Jan Šafránek (<a href=\"https://github.com/jsafrane/\">jsafrane</a>)</li>\n<li>Joe Betz (<a href=\"https://github.com/jpbetz\">jpbetz</a>)</li>\n<li>Jordan Liggitt (<a href=\"https://github.com/liggitt\">liggitt</a>)</li>\n<li>Michelle Au (<a href=\"https://github.com/msau42\">msau42</a>)</li>\n<li>Seokho Son (<a href=\"https://github.com/seokho-son\">seokho-son</a>)</li>\n<li>Shannon Kularathna (<a href=\"https://github.com/shannonxtreme\">shannonxtreme</a>)</li>\n<li>Tim Bannister (<a href=\"https://github.com/sftim\">sftim</a>)</li>\n<li>Tim Hockin (<a href=\"https://github.com/thockin\">thockin</a>)</li>\n<li>Wojciech Tyczynski (<a href=\"https://github.com/wojtek-t\">wojtek-t</a>)</li>\n<li>Xing Yang (<a href=\"https://github.com/xing-yang\">xing-yang</a>)</li>\n</ul>","PublishedAt":"2023-01-05 00:00:00+00:00","OriginURL":"https://kubernetes.io/blog/2023/01/05/retroactive-default-storage-class/","SourceName":"Kubernetes"}},{"node":{"ID":2694,"Title":"Visualize user behavior with Datadog Heatmaps","Description":"<img class=\"webfeedsFeaturedVisual rss\" src=\"https://imgix.datadoghq.com/img/blog/visualize-behavior-datadog-heatmaps/heatmaps-feature-announcement-hero.png\" width=\"100%\"/>While understanding user behavior is key to effectively optimizing your application, it can be difficult to grasp how problems in individual sessions fit into larger trends. You could look at each relevant user session one by one to gauge how many users are experiencing an issue and to what degree. However, clicking through hundreds (or even thousands) of sessions is time-consuming and can overwhelm you with data that’s hard to analyze.","PublishedAt":"2023-01-05 00:00:00+00:00","OriginURL":"https://www.datadoghq.com/blog/visualize-behavior-datadog-heatmaps/","SourceName":"Datadog"}},{"node":{"ID":2695,"Title":"How the third-largest US county uses Elastic to accelerate investigations","Description":"","PublishedAt":"2023-01-05 00:00:00+00:00","OriginURL":"https://www.elastic.co/blog/how-the-third-largest-us-county-uses-elastic-to-accelerate-investigations","SourceName":"Elastic"}}]}},"pageContext":{"limit":30,"skip":1980,"numPages":158,"currentPage":67}},"staticQueryHashes":["3649515864"]}