{"componentChunkName":"component---src-templates-blog-list-tsx","path":"/page/90","result":{"data":{"allPost":{"edges":[{"node":{"ID":2031,"Title":"Miro Node.js REST API client","Description":"","PublishedAt":"2022-10-24 07:45:00+00:00","OriginURL":"https://medium.com/miro-engineering/miro-node-js-rest-api-client-82c2d11e2d00?source=rss----555f7fd62a50---4","SourceName":"Miro Engineering"}},{"node":{"ID":2030,"Title":"A Message from Snyk CEO Peter McKay","Description":"Below is a message that was sent out to all Snyk employees today from&#160;Snyk CEO Peter McKay. Snykers, Today is one of the most difficult in Snyk’s history. Over the course of 2022 while our business has continued to grow, we’ve also witnessed a number of significant market shifts, and, as a result, we are","PublishedAt":"2022-10-24 05:00:02+00:00","OriginURL":"https://snyk.io/blog/a-message-from-snyk-ceo-peter-mckay-oct-2022/","SourceName":"Snyk"}},{"node":{"ID":2037,"Title":"Reskilling Against the Risk of Automation","Description":"<p>Demand for both entry-level and highly skilled tech talent is at an all-time high, and companies across industries and geographies are struggling to find qualified employees. And, with 1.1 billion jobs liable to be radically transformed by technology in the next decade, a “reskilling revolution” is reaching a critical mass. Already underrepresented populations like workers [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.cloudera.com/reskilling-against-the-risk-of-automation/\">Reskilling Against the Risk of Automation</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.cloudera.com\">Cloudera Blog</a>.</p>\n","PublishedAt":"2022-10-24 04:00:07+00:00","OriginURL":"https://blog.cloudera.com/reskilling-against-the-risk-of-automation/","SourceName":"Cloudera"}},{"node":{"ID":2033,"Title":"Public sector security: 4 considerations for implementing a modern SIEM","Description":"","PublishedAt":"2022-10-24 00:00:00+00:00","OriginURL":"https://www.elastic.co/blog/public-sector-security-4-considerations-for-implementing-a-modern-siem","SourceName":"Elastic"}},{"node":{"ID":2035,"Title":"The easy way to find security privileges in Elasticsearch","Description":"","PublishedAt":"2022-10-24 00:00:00+00:00","OriginURL":"https://www.elastic.co/blog/the-easy-way-to-find-security-privileges-in-elasticsearch","SourceName":"Elastic"}},{"node":{"ID":2036,"Title":"Best practices for network perimeter security in cloud-native environments","Description":"<img class=\"webfeedsFeaturedVisual rss\" src=\"https://imgix.datadoghq.com/img/blog/securing-cloud-native-infrastructure-network-perimeter/securing-cloud-native-infrastructure-network-perimeter-hero.png\" width=\"100%\"/>Cloud-native infrastructure has become the standard for deploying applications that are performant and readily available to a globally distributed user base. While this has enabled organizations to quickly adapt to the demands of modern app users, the rapid nature of this migration has also made cloud resources a primary target for security threats. According to a recent study from ThoughtLab, surveyed organizations saw a 15 percent increase in the average number of digital attacks and data breaches between 2020 and 2021.","PublishedAt":"2022-10-24 00:00:00+00:00","OriginURL":"https://www.datadoghq.com/blog/securing-cloud-native-infrastructure-network-perimeter/","SourceName":"Datadog"}},{"node":{"ID":2028,"Title":"Global Week of Service 2022: 430+ Clouderans Engage for Good!","Description":"<p>Cloudera’s Global Week of Service - a week each year the business dedicates to doing good. Learn about the impact our employees made throughout the week, including the first ever, Unplug with Kindness campaign.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.cloudera.com/global-week-of-service-2022-430-clouderans-engage-for-good/\">Global Week of Service 2022: 430+ Clouderans Engage for Good!</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.cloudera.com\">Cloudera Blog</a>.</p>\n","PublishedAt":"2022-10-21 18:30:33+00:00","OriginURL":"https://blog.cloudera.com/global-week-of-service-2022-430-clouderans-engage-for-good/","SourceName":"Cloudera"}},{"node":{"ID":2027,"Title":"HashiConf Global 2022: From Zero Trust to No Code","Description":"Check out the highlights from HashiConf Global 2022 and watch the 40+ keynote and session recordings now live on YouTube.","PublishedAt":"2022-10-21 16:30:00+00:00","OriginURL":"https://www.hashicorp.com/blog/hashiconf-global-2022-from-zero-trust-to-no-code","SourceName":"HashiCorp"}},{"node":{"ID":2025,"Title":"Page Shield can now watch for malicious outbound connections made by third-party JavaScript code","Description":"Starting today, Page Shield can now watch for malicious outbound connections made by third-party JavaScript code","PublishedAt":"2022-10-21 13:53:49+00:00","OriginURL":"https://blog.cloudflare.com/page-shield-connection-monitor/","SourceName":"Cloudflare"}},{"node":{"ID":2026,"Title":"How to send Snyk vulnerability data to the New Relic observability platform","Description":"Learn to leverage the different options that the Snyk platform provides to send all your application security vulnerabilities found by Snyk directly to your New Relic observability platform","PublishedAt":"2022-10-21 13:43:37+00:00","OriginURL":"https://snyk.io/blog/snyk-security-vulnerability-new-relic-observability/","SourceName":"Snyk"}},{"node":{"ID":2024,"Title":"The Overflow #148: How to job hop","Description":"<p>The service-oriented approach to 1MM rep, one qubit, and less scary cryptography</p>\n<p>The post <a rel=\"nofollow\" href=\"https://stackoverflow.blog/2022/10/21/the-overflow-148-how-to-job-hop/\">The Overflow #148: How to job hop  </a> appeared first on <a rel=\"nofollow\" href=\"https://stackoverflow.blog\">Stack Overflow Blog</a>.</p>\n","PublishedAt":"2022-10-21 13:00:00+00:00","OriginURL":"https://stackoverflow.blog/2022/10/21/the-overflow-148-how-to-job-hop/","SourceName":"Stack Overflow"}},{"node":{"ID":2023,"Title":"He helped build .NET and VS Code — Now’s he working on Web3 (Ep. 499)","Description":"<p>A long-time Microsoft employee explains his attraction to the new world of blockchain technologies.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://stackoverflow.blog/2022/10/21/he-helped-build-net-and-vs-code-nows-he-working-on-web3-ep-499/\">He helped build .NET and VS Code — Now’s he working on Web3 (Ep. 499)</a> appeared first on <a rel=\"nofollow\" href=\"https://stackoverflow.blog\">Stack Overflow Blog</a>.</p>\n","PublishedAt":"2022-10-21 04:40:00+00:00","OriginURL":"https://stackoverflow.blog/2022/10/21/he-helped-build-net-and-vs-code-nows-he-working-on-web3-ep-499/","SourceName":"Stack Overflow"}},{"node":{"ID":2022,"Title":"Postman Essentials: Exploring the Collection Format","Description":"","PublishedAt":"2022-10-21 03:44:07+00:00","OriginURL":"https://medium.com/better-practices/postman-essentials-exploring-the-collection-format-1a8b08d79fca?source=rss----410f2fbc015d---4","SourceName":"Postman"}},{"node":{"ID":2020,"Title":"Cloud security fundamentals part 3: Empower your developers","Description":"A discussion of the third of five fundamentals of cloud security: empowering your developers. (Part three in a five-part series.)","PublishedAt":"2022-10-20 19:47:06+00:00","OriginURL":"https://snyk.io/blog/cloud-security-fundamentals-part-3/","SourceName":"Snyk"}},{"node":{"ID":2012,"Title":"A Sip of Elastic RUM (Real User Monitoring)","Description":"<p>Sorry if I lured you into the mood of having a sip of a wonderful cocktail made with rum and you realized that the RUM I’m talking about is not the rum you are craving. But, be assured that Elastic RUM is equally wonderful! Let’s take a sip! I do want to warn you that it will take a bit of time to go through the amount of detail I will cover in this blog.</p><h2>What is RUM?</h2><p>Elastic <a href=\"https://www.elastic.co/guide/en/apm/agent/js-base/4.x/index.html\" target=\"_self\">real user monitoring</a>, or RUM, captures user interactions with the web browser and provides a detailed view of the “real user experience” of your web applications from a performance perspective. Elastic’s RUM Agent is a <a href=\"https://www.elastic.co/guide/en/apm/agent/js-base/current/index.html\" target=\"_self\">JavaScript Agent</a>, which means it supports any JavaScript-based application. RUM can provide valuable insight into your applications. Some of the common benefits of RUM include:</p><ul><li>RUM performance data can help you identify bottlenecks and discover how site performance issues affect your visitors’ experience</li><li>User agent information captured by RUM enables you to identify the browsers, devices, and platforms most used by your customers so that you can make informed optimizations to your application</li><li>Together with location information, individual user performance data from RUM helps you understand regional performance of your website worldwide</li><li>RUM provides insight and measurement for your application’s service level agreements (SLA)</li><li>RUM gathers information on customer visit and click behavior over time that can be useful for development teams to identify the impact of new features</li></ul><h2>Getting started with RUM using Elastic APM</h2><p>In this blog, I will take you through the complete process of instrumenting a simple web application made of a React frontend and a Spring Boot backend, step by step. You will see how easy it is to use the RUM agent. As a bonus, you will also see how Elastic APM ties the frontend and the backend performance information together with a holistic, distributed trace view. Please see this previous blog for an overview of <a href=\"https://www.elastic.co/blog/distributed-tracing-opentracing-and-elastic-apm\" target=\"_self\">Elastic APM and distributed tracing</a> if you are interested in knowing more details.</p><p>To use Elastic APM real user monitoring, you have to have the Elastic Stack with APM server installed. You can of course <a href=\"https://www.elastic.co/downloads\" target=\"_self\">download</a> and install the latest Elastic Stack with APM server locally on your computer. However, the easiest approach would be creating an <a href=\"http://cloud.elastic.co\" target=\"_self\">Elastic Cloud</a> trial account and have your cluster ready in a few minutes. APM is enabled for the default I/O Optimized template. From now on, I’ll assume you have a cluster ready to go.</p><h3>Sample application</h3><p>The application we are going to instrument is a simple car database application made of a <a href=\"https://github.com/adamquan/carfront\" target=\"_self\">React frontend</a> and a <a href=\"https://github.com/adamquan/cardatabase\" target=\"_self\">Spring Boot backend</a> that provides API access to an in-memory car database. The application is purposely kept simple. The idea is to show you detailed instrumentation steps starting from zero so that you can instrument your own applications following the same steps.</p><p><img src=\"https://static-www.elastic.co/v3/assets/bltefdd0b53724fa2ce/blt6977d5827da59b86/5cb842a444c599c63eef1a56/sip-of-rum-1.png\" data-sys-asset-uid=\"blt6977d5827da59b86\" alt=\"A simple application with a React frontend and Spring backend\"/></p><p>Create a directory called CarApp anywhere on your laptop. Then clone both the frontend and the backend application into that directory.</p><pre class=\"prettyprint\">git clone https://github.com/carlyrichmond/carfront<br/>git clone https://github.com/carlyrichmond/cardatabase<br/></pre><p>As you can see, the application is extremely simple. There are only a couple of components in the React frontend and a few classes in the backend Spring Boot application. Build and run the application following the instructions in GitHub for both the frontend and backend. You should see something like this. You can browse, filter cars, and perform CRUD options on them.</p><p><img src=\"https://static-www.elastic.co/v3/assets/bltefdd0b53724fa2ce/blt7b68f2ba2628a996/5cb842a02a4acbd72a4882e5/sip-of-rum-2.png\" data-sys-asset-uid=\"blt7b68f2ba2628a996\" alt=\"The simple React user interface\"/></p><p>Now, with the application up running, we are ready to go through the instrumentation using the RUM agent.</p><h3>Rich out-of-the-box instrumentation with RUM</h3><p>An Elastic APM server is needed to get started. You will need to <a href=\"https://www.elastic.co/guide/en/apm/guide/current/configuration-rum.html#rum-enable\" target=\"_self\">enable RUM</a> to capture the events from your RUM agent. To set up your RUM agent, there are two ways of doing so:</p><ol><li>You can install the RUM agent as a project dependency via a package manager such as npm:<pre class=\"prettyprint\">npm install @elastic/apm-rum --save<br/></pre></li><li>Include the RUM agent via the HTML script tag. <a href=\"https://www.elastic.co/guide/en/apm/agent/rum-js/current/install-the-agent.html\" target=\"_self\">Note this can be performed as either a blocking or non-blocking operation as per the documentation</a>.<br/><pre class=\"prettyprint\">&lt;script <br/>src=\"https://unpkg.com/@elastic/apm-rum@5.12.0/dist/bundles/elastic-apm-rum.umd.min.js\"&gt;<br/>&lt;/script&gt;<br/>&lt;script&gt;<br/>  elasticApm.init({<br/>    serviceName: 'carfront',<br/>    serverUrl: 'http://localhost:8200',<br/>    serviceVersion: '0.90'<br/>  })<br/>&lt;/script&gt;<br/></pre></li></ol><p>Since our frontend is a React application, we are going to use the first approach. Once you've installed @elastic/apm-rum in your project, check out the initialization code in rum.js . This is located in the same directory as your index.js and will look a bit like this, but with serviceUrl replaced with your own APM server endpoint:</p><pre class=\"prettyprint\">import { init as initApm } from '@elastic/apm-rum'<br/>var apm = initApm({<br/> // Set required service name (allowed characters: a-z, A-Z, 0-9, -, _, and space)<br/> serviceName: 'carfront',<br/> // Set the version of your application<br/> // Used on the APM Server to find the right sourcemap<br/> serviceVersion: '0.90',<br/> // Set custom APM Server URL (default: http://localhost:8200)<br/> serverUrl: 'APM_URL',<br/> // distributedTracingOrigins: ['http://localhost:8080'],<br/>})<br/>export default apm;<br/></pre><p>That’s all it takes to initialize the RUM agent! If you are making use of framework specific features, such as routing in React, Angular, or Vue, you may want to also install and configure the framework specific integrations as well, which are covered in the <a href=\"https://www.elastic.co/guide/en/apm/agent/rum-js/current/framework-integrations.html\" target=\"_self\">documentation</a>. In this case, as this is a single page that doesn't require React specific instrumentation, we have not installed the additional dependency.</p><p>Don't worry about distributedTracingOrigins right now. Here's a quick explanation of some of the other configurations:</p><ol><li><strong>Service name:</strong> The service name has to be set. It represents your application in the APM UI. Name it something meaningful.</li><li><strong>Service version:</strong> This is the version of your application. This version number is also used by the APM server to find the right source map. We will discuss the source map in detail later.</li><li><strong>Server URL:</strong> This is the APM server URL. Note that the APM server URL is normally accessible from the public internet because your RUM agent reports data to it from end-user browsers on the internet.</li></ol><p>People who are familiar with Elastic APM backend agents might be wondering why the APM token was not passed here. That’s because the RUM agent doesn't actually use a secret APM token. The token is only used for backend agents. Because the frontend code is public, the secret token does not provide additional security.</p><p>We will load this JavaScript file when the application loads and include it in places that we want to perform custom instrumentation. For now, let’s see what we get out of the box, without any custom instrumentation. To do so, we simply need to include rum.js in index.js . The index.js file imports rum.js and sets a page load name. Without setting a page load name, you will see the page load listed as “/” in the APM UI, which is not very intuitive. Here is what index.js looks like.</p><pre class=\"prettyprint\">import apm from './rum'<br/>import React from 'react';<br/>import ReactDOM from 'react-dom';<br/>import './index.css';<br/>import App from './App';<br/>import * as serviceWorker from './serviceWorker';<br/>apm.setInitialPageLoadName(\"Car List\")<br/>ReactDOM.render(&lt;App /&gt;, document.getElementById('root'));<br/>serviceWorker.unregister();<br/></pre><p>Generate some traffic to your application by accessing pages and adding or deleting cars. Then log into Kibana and click on the Observability tile. From there, select the Services option from the APM submenu, as shown below:</p><img src=\"https://static-www.elastic.co/v3/assets/bltefdd0b53724fa2ce/blt7aba56906f514b72/63504a2919d8652169cfad8c/blog-elastic-RUMAPM-1.png\" height=\"auto\"/><p></p><p>You should see a service called \"carfront\" listed. Clicking on the service name takes you to the transaction page. You should see an overview of metrics such as latency and throughput for the default time frame of \"Last 15 minutes.\" If not, change the time picker to this range.</p><img src=\"https://static-www.elastic.co/v3/assets/bltefdd0b53724fa2ce/blt71bb7e870ae40a92/63504a83bbff0b3fd98e25e1/blog-elastic-RUMAPM-2.png\" height=\"auto\"/><p></p><p>In the transactions segment, you should see the \"Car List\" transaction. Click on the \"Car List\" link, and you will move to the Transaction tab, which contains statistics for this sample of transactions. Scrolling to the bottom of the page, you will see a waterfall view of browser interactions like this:</p><img src=\"https://static-www.elastic.co/v3/assets/bltefdd0b53724fa2ce/blt62e1a3ddd74a6719/63504ad4b3f39b38fccfe7db/blog-elastic-RUMAPM-3.png\" height=\"auto\"/><p></p><p>Amazed by how much information is captured by the RUM agent by default? Pay special attention to the <strong>markers</strong> at the top like timeToFirstByte, domInteractive, domComplete, and firstContentfulPaint. Mouse over the black dots to see the names. They provide you with great details about content retrieval and browser rendering of these contents. Also, pay attention to all the performance data about resource loading from the browser. By just initializing your RUM agent, without any custom instrumentation, you get all these detailed performance metrics, out of the box! When there is a performance issue, these metrics enable you to easily decide whether the issue is due to slow backend services, a slow network, or simply a slow client browser. That is very impressive!</p><p></p><p>For those of you who need a refresher, here is a quick explanation of the web performance metrics. Do keep in mind that for modern web application frameworks like React, these metrics might only represent the “static” part of the web page, due to the async nature of React. For example, dynamic contents might still be loading after <strong>domInteractive</strong>, as you will see later.</p><ul><li><strong>timeToFirstByte</strong> is the amount of time a browser waits to receive the first piece of information from the web server after requesting it. It represents a combination of network and server-side processing speed.</li><li><strong>domInteractive</strong> is the time immediately before the user agent sets the current document readiness to “interactive,” which means the browser has finished parsing all of the HTML and DOM construction has completed.</li><li><strong>domComplete</strong> is the time immediately before the user agent sets the current document readiness to “complete,” which means the page and all of its subresources like images have finished downloading and are ready. The loading spinner has stopped spinning.</li><li><strong>firstContentfulPaint</strong> is the time the browser renders the first bit of content from the DOM. This is an important milestone for users because it provides feedback that the page is actually loading.</li></ul><h3>Flexible custom instrumentation</h3><p>The RUM agent provides detailed instrumentation for your browser interaction out of the box, as you just saw. You can also perform custom instrumentations when needed. For example, because the React application is a single-page-application and deleting a car will not trigger a “page load,” RUM does not by default capture the performance data of deleting a car. We can use custom transactions for something like that.</p><p>With our current release (APM Real User Monitoring JavaScript Agent 5.x), AJAX calls and click events are captured by the agent and sent to the APM server. <a href=\"https://www.elastic.co/guide/en/apm/agent/rum-js/current/configuration.html#disable-instrumentations\" target=\"_self\">Configuring the types of interactions can be achieved using the disableInstrumentation setting</a>.</p><p>It is also possible to add your own custom instrumentations to give more meaningful traces. This can particularly be useful for tracing new features. In our example application, the <strong>\"New Car\"</strong> button in our frontend application allows you to add a new car to the database. We will instrument the code to capture the performance of adding a new car. Open the file Carlist.js in the components directory. You will see the following code:</p><pre class=\"prettyprint\">// Add new car<br/>addCar(car) {<br/>    // Add car metadata as labels to the RUM click transaction<br/>    var transaction = apm.startTransaction(\"Add Car\", \"Car\");<br/>    transaction.addLabels(car);<br/>    fetch(SERVER_URL + 'api/cars',<br/>        {<br/>            method: 'POST',<br/>            headers: {<br/>                'Content-Type': 'application/json',<br/>            },<br/>            body: JSON.stringify(car)<br/>        })<br/>        .then(res =&gt; this.fetchCars())<br/>        .catch(err =&gt; console.error(err))<br/>}<br/>fetchCars = () =&gt; {<br/>    fetch(SERVER_URL + 'api/cars')<br/>        .then((response) =&gt; response.json())<br/>        .then((responseData) =&gt; {<br/>            this.setState({<br/>                cars: responseData._embedded.cars,<br/>            });<br/>        })<br/>        .catch(err =&gt; console.error(err));<br/>        // End the current transaction at the end of the response call back<br/>        var transaction = apm.getCurrentTransaction()<br/>        if (transaction) transaction.end()<br/>}<br/></pre><p>The code basically created a new transaction called <strong>“Add Car”</strong> of <strong>“Car”</strong> type. Then, it tagged the transaction with the car to provide contextual information. We then explicitly ended the transaction at the end of the method.</p><p>Add a new car from the application web UI. Click on the APM UI in Kibana. You should see an “Add Car” transaction listed. Make sure you select “Car” in the “Filter by type” dropdown. By default, it displays “page-load” transactions.</p><p><img src=\"https://static-www.elastic.co/v3/assets/bltefdd0b53724fa2ce/bltcad2c799aa1c6e1b/63504d554e565f1cdce2944e/blog-elastic-RUMAPM-4.png\" height=\"auto\"/></p><p>Click on the “Add Car” transaction link. You should see performance information of the custom transaction “Add Car”:</p><p><img src=\"https://static-www.elastic.co/v3/assets/bltefdd0b53724fa2ce/bltda3d29bf6e005b2a/63504d720528631ea56813e7/blog-elastic-RUMAPM-5.png\" height=\"auto\"/></p><p>Click on the “Metadata” tab. You will see the labels we added along with the default labels captured by the agent. Labels and logs add valuable contextual information to your APM traces.</p><p><img src=\"https://static-www.elastic.co/v3/assets/bltefdd0b53724fa2ce/bltb11888816b7654a2/63504daf1d78fa218f251d72/blog-elastic-RUMAPM-6.png\" height=\"auto\"/></p><p>That’s really all it takes to do a custom instrumentation — easy yet powerful! For more details, see the <a href=\"https://www.elastic.co/guide/en/apm/agent/js-base/current/api.html\" target=\"_self\">API documentation</a>.</p><h3>User experience dashboard</h3><p>Elastic APM offers a curated APM UI and built-in APM dashboards to visualize all the APM data captured by the agents out of the box.</p><p>You can also create your own custom visualizations in Elastic using <a href=\"https://www.elastic.co/guide/en/apm/server/current/configuring-ingest-node.html\" target=\"_self\">ingest node pipelines</a> to enrich and transform your APM data. For example, the user IP and user agent data captured by the RUM agent represent very rich information about your customers. With all the information of user IP and user agent, it’s possible to create a visualization like this to show where the web traffic comes from on a map and what operating systems and browsers your customers are using.</p><p>However, many of the user data of interest could be present in the User Experience Dashboard visible in Elastic Observability. Sample visualizations are presented below:</p><p><img src=\"https://static-www.elastic.co/v3/assets/bltefdd0b53724fa2ce/blt7555ce1a42a4a337/63504e72dcd7cf2a10750b49/blog-elastic-RUMAPM-7.png\" height=\"auto\"/></p><h2>See the big picture with distributed tracing</h2><p>As a bonus point, we will also instrument our backend Spring Boot application so that you have a complete view of the overall transaction from the web browser all the way to the backend database, all in one view. Elastic APM distributed tracing enables you to do so.</p><h3>Configuring distributed tracing in RUM agents</h3><p><a href=\"https://www.elastic.co/guide/en/apm/agent/js-base/current/distributed-tracing-guide.html\" target=\"_self\">Distributed tracing</a> is enabled by default in the RUM agent. However, it only includes requests made to the same origin. In order to include cross-origin requests, you must set the distributedTracingOrigins configuration option. You will also have to set the CORS policy in the backend application, as we will discuss in the next section.</p><p>For our application, the frontend is served from <a href=\"http://localhost:3000\" target=\"_self\">http://localhost:3000</a>. To include requests made to http://localhost:8080, we need to add the distributedtracingOrigins configuration to our React application. This is done inside rum.js. The code is already there. Simply uncommenting the line will do.</p><pre class=\"prettyprint\">var apm = initApm({<br/>  ...<br/>  distributedTracingOrigins: ['http://localhost:8080']<br/>})<br/></pre><p><a href=\"https://www.elastic.co/guide/en/apm/guide/8.4/distributed-tracing.html#w3c-tracecontext\" target=\"_self\">New agent versions</a> implement the W3C Trace Context specification and traceparent header to requests made to http://localhost:8080. However, note that previously this was achieved by adding the custom header elastic-apm-traceparent to these requests.</p><p>As per the latest version documentation, the server side instrumentation can be configured in three possible ways:</p><ol><li>Automatic attaching to the running JVM using the <strong>apm-agent-attach-cli.jar</strong></li><li>Programmatic setup using the <strong>apm-agent-attach</strong>, which requires a code change to your Java application</li><li>Manual setup using the <strong>-javaagent</strong> flag, as we shall do in the subsequent example</li></ol><p>To use the manual instrumentation approach on the server side, you need to <a href=\"https://search.maven.org/search?q=g:co.elastic.apm%20AND%20a:apm-agent-api\" target=\"_self\">download</a> the Java agent and start your application with it. In your favorite IDE, you will need to add the below vmArgs to the launch configuration.</p><pre class=\"prettyprint\">-javaagent:apm/wrapper/elastic-apm-agent-1.33.0.jar <br/>-Delastic.apm.service_name=cardatabase <br/>-Delastic.apm.application_packages=com.packt.cardatabase<br/>-Delastic.apm.server_urls=&lt;YOUR_APM_ENDPOINT&gt; <br/>-Delastic.apm.secret_token=&lt;YOUR_SECRET_TOKEN&gt;<br/></pre><p></p><p>If you are using Elastic Cloud, full configuration for both the RUM and APM agents can be found in the APM Integration of your deployment, a sample of which is visible below.</p><img src=\"https://static-www.elastic.co/v3/assets/bltefdd0b53724fa2ce/blt0fb070fa4f93a460/635050b0ad35ab2389acc989/blog-elastic-RUMAPM-8.png\" height=\"auto\"/><p></p><p>Where the agents are configured will depend on your IDE of choice. The below screenshot is of my VSCode launch configuration for the Spring Boot application:</p><img height=\"auto\" src=\"https://static-www.elastic.co/v3/assets/bltefdd0b53724fa2ce/blt9c52c3334a613da2/635050e70528631ea56813fb/blog-elastic-RUMAPM-9.png\" width=\"727\" max-width=\"727\" style=\"width: 727px; height: auto;\"/><p></p><p>Now, refresh your car list from the browser to generate another request. Go to the Kibana APM UI and check the last “car list” page load. You should see a full trace including Java method invocations, similar to the following screenshot:</p><img src=\"https://static-www.elastic.co/v3/assets/bltefdd0b53724fa2ce/bltf5331328f1218b47/63505112b0662c1e9a674687/blog-elastic-RUMAPM-10.png\" height=\"auto\"/><p></p><p>As you can see, your client-side performance data from the browser and your server-side performance data, including JDBC access, all show up nicely in one distributed trace. Notice different colors for different parts of the distributed trace. Keep in mind this is the default tracing you get, without having to do any custom instrumentation on the server side, other than starting your application with the agent. Feel the power of Elastic APM and distributed tracing!</p><p>For readers who are really paying attention to the timeline visualization above, you might be wondering why the “Car List” page-load transaction ends at 193 ms, which is the <strong>domInteractive</strong> time, while data is still being served from the backend. Great question! This is due to the fact that the fetch calls are async by default. The browser “thinks” it finished parsing all the HTML and DOM construction is complete at 193 ms because it loaded all the “static” HTML contents served from the web server. On the other hand, React is still loading data from the backend server asynchronously.</p><h3>Cross-origin resource sharing (CORS)</h3><p>The RUM agent is only one piece of the puzzle in a distributed trace. In order to use distributed tracing, we need to properly configure other components, too. One of the things that you will normally have to configure is cross-origin resource sharing, the “notorious” CORS! This is because the frontend and the backend services are typically deployed separately. With the <em><strong>same-origin</strong></em> policy, your frontend requests from a different origin to the backend will fail without properly configured CORS. Basically, CORS is a way for the server side to check if requests coming in from a different origin are allowed. To read more about cross-origin requests and why this process is necessary, please see the MDN page on <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\" target=\"_self\">Cross-Origin Resource Sharing</a>.</p><p>What does that mean for us? It means two things:</p><ol><li>We must set the distributedTracingOrigins configuration option, as we have done.</li><li>With that configuration, <a href=\"https://www.elastic.co/guide/en/apm/agent/rum-js/current/distributed-tracing-guide.html#server-configuration\" target=\"_self\">the RUM agent also sends an HTTP OPTIONS request before the real HTTP request to make sure all the headers and HTTP methods are supported and the origin is allowed</a>. Specifically, http://localhost:8080 will receive an <strong>OPTIONS</strong> request with the following headers:<br/><pre class=\"prettyprint\">Access-Control-Request-Headers: traceparent, tracestate<br/>Access-Control-Request-Method: [request-method]<br/>Origin: [request-origin]<br/></pre>And APM server should respond to it with these headers and a 200 status code:<br/><pre class=\"prettyprint\">Access-Control-Allow-Headers: traceparent, tracestate<br/>Access-Control-Allow-Methods: [allowed-methods]<br/>Access-Control-Allow-Origin: [request-origin]<br/></pre></li></ol><p>The MyCorsConfiguration class in our Spring Boot application does exactly that. There are different ways of configuring Spring Boot to do this, but here we are using a filter based approach. It’s configuring our server-side Spring Boot application to allow requests from any origin with any HTTP headers and any HTTP methods. You may not want to be this open with your production applications.</p><pre class=\"prettyprint\">@Configuration<br/>public class MyCorsConfiguration {<br/>    @Bean<br/>    public FilterRegistrationBean&lt;CorsFilter&gt; corsFilter() {<br/>        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();<br/>        CorsConfiguration config = new CorsConfiguration();<br/>        config.setAllowCredentials(true);<br/>        config.addAllowedOrigin(\"*\");<br/>        config.addAllowedHeader(\"*\");<br/>        config.addAllowedMethod(\"*\");<br/>        source.registerCorsConfiguration(\"/**\", config);<br/>        FilterRegistrationBean&lt;CorsFilter&gt; bean = new FilterRegistrationBean&lt;CorsFilter&gt;(new CorsFilter(source));<br/>        bean.setOrder(0);<br/>        return bean;<br/>    }<br/>}<br/></pre><h2>Summary</h2><p>Hopefully, this blog made it clear that instrumenting your applications with Elastic RUM is simple and easy, yet extremely powerful. Together with other APM agents for backend services, RUM gives you a holistic view of application performance from an end-user perspective through distributed tracing.</p><p>Once again, to get started with Elastic APM, you can download <a href=\"https://www.elastic.co/downloads/apm\" target=\"_self\">Elastic APM server</a> to run it locally, or create an <a href=\"https://cloud.elastic.co\" target=\"_self\">Elastic Cloud</a> trial account and have a cluster ready in a few minutes.</p><p>As always, reach out on the <a href=\"https://discuss.elastic.co/c/apm\" target=\"_self\">Elastic APM forum</a> if you want to open up a discussion or have any questions. Happy RUMing!</p><p><em>This post was originally published on April 1, 2019. It was updated on October 20, 2022.</em></p>","PublishedAt":"2022-10-20 16:00:00+00:00","OriginURL":"https://www.elastic.co/blog/performing-real-user-monitoring-rum-with-elastic-apm","SourceName":"Elastic"}},{"node":{"ID":2018,"Title":"Pre-Plan/Apply Run Tasks Now Available in Terraform Cloud","Description":"Enhance your Terraform Cloud workflow by adding run tasks before the plan and/or apply stages.","PublishedAt":"2022-10-20 16:00:00+00:00","OriginURL":"https://www.hashicorp.com/blog/pre-plan-apply-run-tasks-now-available-in-terraform-cloud","SourceName":"HashiCorp"}},{"node":{"ID":2017,"Title":"How to make a mock API server in JavaScript","Description":"In this article, you'll learn more about mock API servers, the tools you can use to create mock APIs, how you can use them to speed up your development and testing, and how to set up a simple mock server.","PublishedAt":"2022-10-20 14:37:41+00:00","OriginURL":"https://snyk.io/blog/how-to-mock-api-server-javascript/","SourceName":"Snyk"}},{"node":{"ID":2016,"Title":"I Wrote a Novel Entirely in Evernote. Here’s How.","Description":"<p>It is a truth universally acknowledged that writers love systems. Oh, how we love them. We’re particular about our ways of working, our personal rituals, and especially our tools. So what about Evernote? You already know it’s great for brainstorming and research notes, but writing the actual drafts? Scenes and chapters? Emotions and experiences? That&#8217;s when many of us turn to another app, either a utilitarian word processor or one</p>\n<p><a class=\"continue-reading\" href=\"https://evernote.com/blog/i-wrote-a-novel-entirely-in-evernote/\">Continue reading...</a></p>\n<p>The post <a rel=\"nofollow\" href=\"https://evernote.com/blog/i-wrote-a-novel-entirely-in-evernote/\">I Wrote a Novel Entirely in Evernote. Here’s How.</a> appeared first on <a rel=\"nofollow\" href=\"https://evernote.com/blog\"></a>.</p>\n","PublishedAt":"2022-10-20 13:45:43+00:00","OriginURL":"https://evernote.com/blog/i-wrote-a-novel-entirely-in-evernote/","SourceName":"Evernote"}},{"node":{"ID":2015,"Title":"Introducing the Overflow Offline project","Description":"<p>For coders without an internet connection, an offline dataset provides an essential encyclopedia</p>\n<p>The post <a rel=\"nofollow\" href=\"https://stackoverflow.blog/2022/10/20/introducing-the-overflow-offline-project/\">Introducing the Overflow Offline project</a> appeared first on <a rel=\"nofollow\" href=\"https://stackoverflow.blog\">Stack Overflow Blog</a>.</p>\n","PublishedAt":"2022-10-20 13:00:45+00:00","OriginURL":"https://stackoverflow.blog/2022/10/20/introducing-the-overflow-offline-project/","SourceName":"Stack Overflow"}},{"node":{"ID":2013,"Title":"Cloudflare Workers and micro-frontends: made for one another","Description":"In this blog-post we demonstrate how hosting and combining multiple server-side rendered micro-frontends on Cloudflare Workers offer a highly scalable, high performance solution to these problems","PublishedAt":"2022-10-20 13:00:00+00:00","OriginURL":"https://blog.cloudflare.com/better-micro-frontends/","SourceName":"Cloudflare"}},{"node":{"ID":2014,"Title":"Cybersecurity: A Big Data Problem","Description":"<p>Information technology has been at the heart of governments around the world, enabling them to deliver vital citizen services, such as healthcare, transportation, employment, and national security. All of these functions rest on technology and share a valuable commodity: data.  Data is produced and consumed in ever-increasing amounts and therefore must be protected. After all, [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.cloudera.com/cybersecurity-a-big-data-problem/\">Cybersecurity: A Big Data Problem</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.cloudera.com\">Cloudera Blog</a>.</p>\n","PublishedAt":"2022-10-20 12:14:59+00:00","OriginURL":"https://blog.cloudera.com/cybersecurity-a-big-data-problem/","SourceName":"Cloudera"}},{"node":{"ID":2011,"Title":"Blog: Server Side Apply Is Great And You Should Be Using It","Description":"<p><strong>Author:</strong> Daniel Smith (Google)</p>\n<p><a href=\"https://kubernetes.io/docs/reference/using-api/server-side-apply/\">Server-side apply</a> (SSA) has now\nbeen <a href=\"https://kubernetes.io/blog/2021/08/06/server-side-apply-ga/\">GA for a few releases</a>, and I\nhave found myself in a number of conversations, recommending that people / teams\nin various situations use it. So I’d like to write down some of those reasons.</p>\n<h2 id=\"benefits\">Obvious (and not-so-obvious) benefits of SSA</h2>\n<p>A list of improvements / niceties you get from switching from various things to\nServer-side apply!</p>\n<ul>\n<li>Versus client-side-apply (that is, plain <code>kubectl apply</code>):\n<ul>\n<li>The system gives you conflicts when you accidentally fight with another\nactor over the value of a field!</li>\n<li>When combined with <code>--dry-run</code>, there’s no chance of accidentally running a\nclient-side dry run instead of a server side dry run.</li>\n</ul>\n</li>\n<li>Versus hand-rolling patches:\n<ul>\n<li>The SSA patch format is extremely natural to write, with no weird syntax.\nIt’s just a regular object, but you can (and should) omit any field you\ndon’t care about.</li>\n<li>The old patch format (“strategic merge patch”) was ad-hoc and still has some\nbugs; JSON-patch and JSON merge-patch fail to handle some cases that are\ncommon in the Kubernetes API, namely lists with items that should be\nrecursively merged based on a “name” or other identifying field.</li>\n<li>There’s also now great <a href=\"https://kubernetes.io/blog/2021/08/06/server-side-apply-ga/#using-server-side-apply-in-a-controller\">go-language library support</a>\nfor building apply calls programmatically!</li>\n<li>You can use SSA to explicitly delete fields you don’t “own” by setting them\nto <code>null</code>, which makes it a feature-complete replacement for all of the old\npatch formats.</li>\n</ul>\n</li>\n<li>Versus shelling out to kubectl:\n<ul>\n<li>You can use the <strong>apply</strong> API call from any language without shelling out to\nkubectl!</li>\n<li>As stated above, the <a href=\"https://kubernetes.io/blog/2021/08/06/server-side-apply-ga/#server-side-apply-support-in-client-go\">Go library has dedicated mechanisms</a>\nto make this easy now.</li>\n</ul>\n</li>\n<li>Versus GET-modify-PUT:\n<ul>\n<li>(This one is more complicated and you can skip it if you've never written a\ncontroller!)</li>\n<li>To use GET-modify-PUT correctly, you have to handle and retry a write\nfailure in the case that someone else has modified the object in any way\nbetween your GET and PUT. This is an “optimistic concurrency failure” when\nit happens.</li>\n<li>SSA offloads this task to the server– you only have to retry if there’s a\nconflict, and the conflicts you can get are all meaningful, like when you’re\nactually trying to take a field away from another actor in the system.</li>\n<li>To put it another way, if 10 actors do a GET-modify-PUT cycle at the same\ntime, 9 will get an optimistic concurrency failure and have to retry, then\n8, etc, for up to 50 total GET-PUT attempts in the worst case (that’s .5N^2\nGET and PUT calls for N actors making simultaneous changes). If the actors\nare using SSA instead, and the changes don’t actually conflict over specific\nfields, then all the changes can go in in any order. Additionally, SSA\nchanges can often be done without a GET call at all. That’s only N <strong>apply</strong>\nrequests for N actors, which is a drastic improvement!</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"how-can-i-use-ssa\">How can I use SSA?</h2>\n<h3 id=\"users\">Users</h3>\n<p>Use <code>kubectl apply --server-side</code>! Soon we (SIG API Machinery) hope to make this\nthe default and remove the “client side” apply completely!</p>\n<h3 id=\"controller-authors\">Controller authors</h3>\n<p>There’s two main categories here, but for both of them, <strong>you should probably\n<em>force conflicts</em> when using SSA</strong>. This is because your controller probably\ndoesn’t know what to do when some other entity in the system has a different\ndesire than your controller about a particular field. (See the <a href=\"#ci-cd-systems\">CI/CD\nsection</a>, though!)</p>\n<h4 id=\"get-modify-put-patch-controllers\">Controllers that use either a GET-modify-PUT sequence or a PATCH</h4>\n<p>This kind of controller GETs an object (possibly from a\n<a href=\"https://kubernetes.io/docs/reference/using-api/api-concepts/#efficient-detection-of-changes\"><strong>watch</strong></a>),\nmodifies it, and then PUTs it back to write its changes. Sometimes it constructs\na custom PATCH, but the semantics are the same. Most existing controllers\n(especially those in-tree) work like this.</p>\n<p>If your controller is perfect, great! You don’t need to change it. But if you do\nwant to change it, you can take advantage of the new client library’s <em>extract</em>\nworkflow– that is, <strong>get</strong> the existing object, extract your existing desires,\nmake modifications, and re-<strong>apply</strong>. For many controllers that were computing\nthe smallest API changes possible, this will be a minor update to the existing\nimplementation.</p>\n<p>This workflow avoids the failure mode of accidentally trying to own every field\nin the object, which is what happens if you just GET the object, make changes,\nand then <strong>apply</strong>. (Note that the server will notice you did this and reject\nyour change!)</p>\n<h4 id=\"reconstructive-controllers\">Reconstructive controllers</h4>\n<p>This kind of controller wasn't really possible prior to SSA. The idea here is to\n(whenever something changes etc) reconstruct from scratch the fields of the\nobject as the controller wishes them to be, and then <strong>apply</strong> the change to the\nserver, letting it figure out the result. I now recommend that new controllers\nstart out this way–it's less fiddly to say what you want an object to look like\nthan it is to say how you want it to change.</p>\n<p>The client library supports this method of operation by default.</p>\n<p>The only downside is that you may end up sending unneeded <strong>apply</strong> requests to\nthe API server, even if actually the object already matches your controller’s\ndesires. This doesn't matter if it happens once in a while, but for extremely\nhigh-throughput controllers, it might cause a performance problem for the\ncluster–specifically, the API server. No-op writes are not written to storage\n(etcd) or broadcast to any watchers, so it’s not really that big of a deal. If\nyou’re worried about this anyway, today you could use the method explained in\nthe previous section, or you could still do it this way for now, and wait for an\nadditional client-side mechanism to suppress zero-change applies.</p>\n<p>To get around this downside, why not GET the object and only send your <strong>apply</strong>\nif the object needs it? Surprisingly, it doesn't help much – a no-op <strong>apply</strong> is\nnot very much more work for the API server than an extra GET; and an <strong>apply</strong>\nthat changes things is cheaper than that same <strong>apply</strong> with a preceding GET.\nWorse, since it is a distributed system, something could change between your GET\nand <strong>apply</strong>, invalidating your computation. Instead, you can use this\noptimization on an object retrieved from a cache–then it legitimately will\nreduce load on the system (at the cost of a delay when a change is needed and\nthe cache is a bit behind).</p>\n<h4 id=\"ci-cd-systems\">CI/CD systems</h4>\n<p>Continuous integration (CI) and/or continuous deployment (CD) systems are a\nspecial kind of controller which is doing something like reading manifests from\nsource control (such as a Git repo) and automatically pushing them into the\ncluster. Perhaps the CI / CD process first generates manifests from a template,\nthen runs some tests, and then deploys a change. Typically, users are the\nentities pushing changes into source control, although that’s not necessarily\nalways the case.</p>\n<p>Some systems like this continuously reconcile with the cluster, others may only\noperate when a change is pushed to the source control system. The following\nconsiderations are important for both, but more so for the continuously\nreconciling kind.</p>\n<p>CI/CD systems are literally controllers, but for the purpose of <strong>apply</strong>, they\nare more like users, and unlike other controllers, they need to pay attention to\nconflicts. Reasoning:</p>\n<ul>\n<li>Abstractly, CI/CD systems can change anything, which means they could conflict\nwith <strong>any</strong> controller out there. The recommendation that controllers force\nconflicts is assuming that controllers change a limited number of things and\nyou can be reasonably sure that they won’t fight with other controllers about\nthose things; that’s clearly not the case for CI/CD controllers.</li>\n<li>Concrete example: imagine the CI/CD system wants <code>.spec.replicas</code> for some\nDeployment to be 3, because that is the value that is checked into source\ncode; however there is also a HorizontalPodAutoscaler (HPA) that targets the\nsame deployment. The HPA computes a target scale and decides that there should\nbe 10 replicas. Which should win? I just said that most controllers–including\nthe HPA–should ignore conflicts. The HPA has no idea if it has been enabled\nincorrectly, and the HPA has no convenient way of informing users of errors.</li>\n<li>The other common cause of a CI/CD system getting a conflict is probably when\nit is trying to overwrite a hot-fix (hand-rolled patch) placed there by a\nsystem admin / SRE / dev-on-call. You almost certainly don’t want to override\nthat automatically.</li>\n<li>Of course, sometimes SRE makes an accidental change, or a dev makes an\nunauthorized change – those you do want to notice and overwrite; however, the\nCI/CD system can’t tell the difference between these last two cases.</li>\n</ul>\n<p>Hopefully this convinces you that CI/CD systems need error paths–a way to\nback-propagate these conflict errors to humans; in fact, they should have this\nalready, certainly continuous integration systems need some way to report that\ntests are failing. But maybe I can also say something about how <em>humans</em> can\ndeal with errors:</p>\n<ul>\n<li>\n<p>Reject the hotfix: the (human) administrator of the CI/CD system observes the\nerror, and manually force-applies the manifest in question. Then the CI/CD\nsystem will be able to apply the manifest successfully and become a co-owner.</p>\n<p>Optional: then the administrator applies a blank manifest (just the object\ntype / namespace / name) to relinquish any fields they became a manager for.\nif this step is omitted, there's some chance the administrator will end up\nowning fields and causing an unwanted future conflict.</p>\n<p><strong>Note</strong>: why an administrator? I'm assuming that developers which ordinarily\npush to the CI/CD system and / or its source control system may not have\npermissions to push directly to the cluster.</p>\n</li>\n<li>\n<p>Accept the hotfix: the author of the change in question sees the conflict, and\nedits their change to accept the value running in production.</p>\n</li>\n<li>\n<p>Accept then reject: as in the accept option, but after that manifest is\napplied, and the CI/CD queue owns everything again (so no conflicts), re-apply\nthe original manifest.</p>\n</li>\n<li>\n<p>I can also imagine the CI/CD system permitting you to mark a manifest as\n“force conflicts” somehow– if there’s demand for this we could consider making\na more standardized way to do this. A rigorous version of this which lets you\ndeclare exactly which conflicts you intend to force would require support from\nthe API server; in lieu of that, you can make a second manifest with only that\nsubset of fields.</p>\n</li>\n<li>\n<p>Future work: we could imagine an especially advanced CI/CD system that could\nparse <code>metadata.managedFields</code> data to see who or what they are conflicting\nwith, over what fields, and decide whether or not to ignore the conflict. In\nfact, this information is also presented in any conflict errors, though\nperhaps not in an easily machine-parseable format. We (SIG API Machinery)\nmostly didn't expect that people would want to take this approach — so we\nwould love to know if in fact people want/need the features implied by this\napproach, such as the ability, when <strong>apply</strong>ing to request to override\ncertain conflicts but not others.</p>\n<p>If this sounds like an approach you'd want to take for your own controller,\ncome talk to SIG API Machinery!</p>\n</li>\n</ul>\n<p>Happy <strong>apply</strong>ing!</p>","PublishedAt":"2022-10-20 00:00:00+00:00","OriginURL":"https://kubernetes.io/blog/2022/10/20/advanced-server-side-apply/","SourceName":"Kubernetes"}},{"node":{"ID":2019,"Title":"How CIOs can support business resilience in uncertain times","Description":"","PublishedAt":"2022-10-20 00:00:00+00:00","OriginURL":"https://www.elastic.co/blog/how-cios-can-support-business-resilience-in-uncertain-times","SourceName":"Elastic"}},{"node":{"ID":2021,"Title":"Why observability can break through top challenges to digital transformation","Description":"","PublishedAt":"2022-10-20 00:00:00+00:00","OriginURL":"https://www.elastic.co/blog/why-observability-can-break-through-top-challenges-to-digital-transformation","SourceName":"Elastic"}},{"node":{"ID":2007,"Title":"HashiCorp Wins Datadog’s Integration Developer Partner of the Year Award","Description":"HashiCorp has won the 2022 Datadog Partner Network (DPN) Integration Developer Partner of the Year Award.","PublishedAt":"2022-10-19 19:00:00+00:00","OriginURL":"https://www.hashicorp.com/blog/hashicorp-wins-datadog-s-integration-developer-partner-of-the-year-award","SourceName":"HashiCorp"}},{"node":{"ID":2006,"Title":"Making peering easy with the new Cloudflare Peering Portal","Description":"Cloudflare's peering portal allows users to log in with existing PeeringDB credentials and request peering sessions with cloudflare direct from the portal","PublishedAt":"2022-10-19 18:26:25+00:00","OriginURL":"https://blog.cloudflare.com/making-peering-easy-with-the-new-cloudflare-peering-portal/","SourceName":"Cloudflare"}},{"node":{"ID":1985,"Title":"New Competency Program Validates Systems Integrators’ HashiCorp Expertise","Description":"The new Technical Competency Program for Systems Integrators allows partners to display earned competency badges on both their own website and HashiCorp.com.","PublishedAt":"2022-10-19 16:00:00+00:00","OriginURL":"https://www.hashicorp.com/blog/new-competency-program-validates-systems-integrators-hashicorp-expertise","SourceName":"HashiCorp"}},{"node":{"ID":2001,"Title":"Datadog Announces PCI Compliance for Log Management and APM","Description":"NEW YORK — Datadog, Inc. (NASDAQ: DDOG), the monitoring and security platform for cloud applications, today announced that it has achieved PCI (Payment Card Industry) compliance for its Log Management and Application Performance Management (APM) products.PCI compliance is a set of key security standards that businesses must adhere to when accepting, transmitting, processing and storing credit, debit, ATM or POS card data in order to secure and protect information provided by cardholders.","PublishedAt":"2022-10-19 16:00:00+00:00","OriginURL":"https://www.datadoghq.com/about/latest-news/press-releases/datadog-announces-pci-compliance-for-log-management-and-apm/","SourceName":"Datadog"}},{"node":{"ID":2002,"Title":"Datadog Introduces Cloud Cost Management","Description":"NEW YORK — Datadog, Inc. (NASDAQ: DDOG), the monitoring and security platform for cloud applications, today announced the general availability of Cloud Cost Management, which shows an organization&rsquo;s cloud spend in the context of their observability data. This allows engineering and FinOps teams to automatically attribute spend to applications, services and teams, track any changes in spend, understand why those changes occurred and include costs as a key performance indicator of application health.","PublishedAt":"2022-10-19 16:00:00+00:00","OriginURL":"https://www.datadoghq.com/about/latest-news/press-releases/datadog-introduces-cloud-cost-management/","SourceName":"Datadog"}},{"node":{"ID":2003,"Title":"Datadog Launches Cloud Security Management to Provide Cloud Native Application Protection","Description":"NEW YORK — Datadog, Inc. (NASDAQ: DDOG), the monitoring and security platform for cloud applications, today announced the general availability of Cloud Security Management. This product brings together capabilities from Cloud Security Posture Management (CSPM), Cloud Workload Security (CWS), alerting, incident management and reporting in a single platform to enable DevOps and Security teams to identify misconfigurations, detect threats and secure cloud-native applications.As organizations&rsquo; cloud architectures become more complex, assessing security risks and collaborating across teams to mitigate them has become increasingly difficult.","PublishedAt":"2022-10-19 16:00:00+00:00","OriginURL":"https://www.datadoghq.com/about/latest-news/press-releases/datadog-launches-cloud-security-management-to-provide-cloud-native-application-protection/","SourceName":"Datadog"}}]}},"pageContext":{"limit":30,"skip":2670,"numPages":158,"currentPage":90}},"staticQueryHashes":["3649515864"]}