{"componentChunkName":"component---src-templates-blog-list-tsx","path":"/page/143","result":{"data":{"allPost":{"edges":[{"node":{"ID":726,"Title":"Automate Workflows With Zoom Webhooks","Description":"<div class=\"medium-feed-item\"><p class=\"medium-feed-image\"><a href=\"https://medium.com/zoom-developer-blog/automate-workflows-with-zoom-webhooks-334600f8c99?source=rss----4a85731adaff---4\"><img src=\"https://cdn-images-1.medium.com/max/1228/1*f_tX51MFaLweWux4BZLd1Q.png\" width=\"1228\"></a></p><p class=\"medium-feed-snippet\">Webhooks are automated event notification messages that can be sent from one server to another in the form of HTTP requests. In real life&#x2026;</p><p class=\"medium-feed-link\"><a href=\"https://medium.com/zoom-developer-blog/automate-workflows-with-zoom-webhooks-334600f8c99?source=rss----4a85731adaff---4\">Continue reading on Zoom Developer Blog »</a></p></div>","PublishedAt":"2020-04-17 16:09:29+00:00","OriginURL":"https://medium.com/zoom-developer-blog/automate-workflows-with-zoom-webhooks-334600f8c99?source=rss----4a85731adaff---4","SourceName":"Zoom"}},{"node":{"ID":633,"Title":"5 Tips to Boost Productivity When Working Remotely as an Engineer","Description":"","PublishedAt":"2020-04-17 00:00:00+00:00","OriginURL":"https://tech.trivago.com/post/2020-04-17-5tipstoboostproductivitywhenworkingremot/","SourceName":"Trivago"}},{"node":{"ID":266,"Title":"GIPHY SDK: The Grid","Description":"A GIF feature in your app can increase engagement and give your users a valuable new way to express themselves, but building it can be hard!&#160; You have to figure out how and where to get the content, design and implement a UI, test, iterate&#8230;the list goes on.&#160; That’s why we built the GIPHY SDK, [&#8230;]","PublishedAt":"2020-04-15 17:33:00+00:00","OriginURL":"https://engineering.giphy.com/giphy-sdk-the-grid/","SourceName":"GIPHY"}},{"node":{"ID":634,"Title":"trivago joins the Cloud Native Computing Foundation","Description":"","PublishedAt":"2020-04-07 00:00:00+00:00","OriginURL":"https://tech.trivago.com/post/2020-04-07-trivagojoinsthecloudnativecomputingfound/","SourceName":"Trivago"}},{"node":{"ID":727,"Title":"The Developer Show: Building Zoom Chatbots","Description":"<div class=\"medium-feed-item\"><p class=\"medium-feed-image\"><a href=\"https://medium.com/zoom-developer-blog/the-developer-show-building-zoom-chatbots-9aa56d918db1?source=rss----4a85731adaff---4\"><img src=\"https://cdn-images-1.medium.com/max/1920/1*-m30_vsj84Le3Lo3wj46TQ.png\" width=\"1920\"></a></p><p class=\"medium-feed-snippet\">The Zoom Developer Advocacy team is obsessed with developer education and developer support. Up until now, we relied on our developer&#x2026;</p><p class=\"medium-feed-link\"><a href=\"https://medium.com/zoom-developer-blog/the-developer-show-building-zoom-chatbots-9aa56d918db1?source=rss----4a85731adaff---4\">Continue reading on Zoom Developer Blog »</a></p></div>","PublishedAt":"2020-04-03 20:13:34+00:00","OriginURL":"https://medium.com/zoom-developer-blog/the-developer-show-building-zoom-chatbots-9aa56d918db1?source=rss----4a85731adaff---4","SourceName":"Zoom"}},{"node":{"ID":728,"Title":"Backwards Incompatible V2 API Changes","Description":"","PublishedAt":"2020-04-03 00:20:55+00:00","OriginURL":"https://medium.com/zoom-developer-blog/backwards-incompatible-v2-api-changes-a0a97df9c306?source=rss----4a85731adaff---4","SourceName":"Zoom"}},{"node":{"ID":267,"Title":"Engaging Endpoints: 4 Ways to Supplement GIF search","Description":"We’d like to highlight four public API endpoints designed to increase engagement and create better user experiences for products and projects integrating GIPHY. At GIPHY, we use these endpoints to help users discover content and as ancillary features for our core GIF search experience — as we know a blank search input on a platform [&#8230;]","PublishedAt":"2020-04-01 19:16:32+00:00","OriginURL":"https://engineering.giphy.com/engaging-endpoints-4-ways-to-supplement-gif-search/","SourceName":"GIPHY"}},{"node":{"ID":268,"Title":"#BuildforCOVID19 Global Online Hackathon","Description":"We’ve joined Facebook and many other partners such as Microsoft, Pinterest, Slack, TikTok, Twitter, and WeChat to support and participate in the #BuildforCOVID19 Online Hackathon —&#160;a new global hackathon to tackle the challenges and problems related to the current coronavirus (COVID-19) pandemic. We want to encourage you &#8211; our global developer community &#8211; to join [&#8230;]","PublishedAt":"2020-03-27 20:30:29+00:00","OriginURL":"https://engineering.giphy.com/buildforcovid19-global-online-hackathon/","SourceName":"GIPHY"}},{"node":{"ID":635,"Title":"Accommodation Consolidation: How we created an ETL pipeline on cloud","Description":"","PublishedAt":"2020-03-26 00:00:00+00:00","OriginURL":"https://tech.trivago.com/post/2020-03-26-accommodationconsolidationhowwecreatedan/","SourceName":"Trivago"}},{"node":{"ID":636,"Title":"Ask a Developer: Your Questions Answered","Description":"","PublishedAt":"2020-03-20 00:00:00+00:00","OriginURL":"https://tech.trivago.com/post/2020-03-20-askadeveloperyourquestionsanswered/","SourceName":"Trivago"}},{"node":{"ID":809,"Title":"Periskop: Exception Monitoring Service","Description":"Periskop is an exception monitoring service that we built here at SoundCloud. It was designed with microservice environments in mind, but it…","PublishedAt":"2020-03-16 00:00:00+00:00","OriginURL":"https://developers.soundcloud.com/blog/periskop-exception-monitoring-service","SourceName":"Soundcloud"}},{"node":{"ID":637,"Title":"The First Prettier Plugin For Twig is Here","Description":"","PublishedAt":"2020-03-10 00:00:00+00:00","OriginURL":"https://tech.trivago.com/post/2020-03-10-thefirstprettierpluginfortwigishere/","SourceName":"Trivago"}},{"node":{"ID":364,"Title":"Building with Web Components","Description":"<p>In the early years of web development, there were three standard fundamentals upon which every website was built: HTML, CSS, and JavaScript. As time passed, web developers became more proficient in their construction of fancy UI/UX widgets for websites. With the need for newer ways of crafting a site coming in conflict with the relatively slow adoption of newer standards, more and more developers began to build their own libraries to abstract away some of the technical details. The web ceased being a standard: now your website could be a React site, or an Angular site, or a Vue site, or any number of other web framework that are not interoperable with each other.</p>\n\n<p>Web components seek to tilt the balance of web development back towards a standard agreed upon by browser vendors and developers. Various polyfills and proprietary frameworks have achieved what web components are now trying to standardize: composable units of JavaScript and HTML that can be imported and reused across web applications. Let's explore the history of web components and the advantages they provide over third-party libraries.</p>\n<h2 class=\"anchored\">\n  <a name=\"how-it-all-began\" href=\"#how-it-all-began\">How it all began</a>\n</h2>\n\n<p>After some attempts by browser vendors to create a standard—and subsequent slow progress—front-end developers realized it was up to them to create a browser-agnostic library delivering on the promise of the web components vision. When React was released, it completely changed the paradigm of web development in two key ways. First, with a bit of JavaScript and some XML-like syntax, React allowed you to compose custom HTML tags it called components:</p>\n\n<pre><code class=\"lang-javascript\">class HelloMessage extends React.Component {\n  render() {\n    return (\n    &lt;h1&gt;\n        Hello &lt;span class=\"name\"&gt;{this.props.name}&lt;/span&gt;\n    &lt;/h1&gt;\n    );\n  }\n}\n\nReactDOM.render(\n  &lt;HelloMessage name=\"Johnny\" /&gt;,\n  document.getElementById('hello-example-container')\n);\n</code></pre>\n\n<p>This trivial example shows how you can encapsulate logic to create React components which can be reused across your app and shared with other developers.</p>\n\n<p>Second, React popularized the concept of <a href=\"https://reactkungfu.com/2015/10/the-difference-between-virtual-dom-and-dom/\">a virtual DOM</a>. The DOM is your entire HTML document, all the HTML tags that a browser slurps up to render a website. However, the relationship between HTML tags, JavaScript, and CSS which make up a website is rather fragile. Making changes to one component could inadvertently affect other aspects of the site. One of the benefits of the virtual DOM was to make sure that UI updates only redrew specific chunks of HTML through JavaScript events. Thus, developers could easily build websites rendering massive amounts of changing data without necessarily worrying about the performance implications.</p>\n\n<p>Around 2015, Google began developing <a href=\"https://www.polymer-project.org/\">the Polymer Project</a> as a means of demonstrating how they wanted web standards to evolve through polyfills. Over the years and various releases, the ideas presented by Polymer library began to be incorporated by the W3C for standardization and browser adoption. The work started back in <a href=\"https://www.w3.org/TR/2012/WD-components-intro-20120522/\">2012 by the W3C</a> (and originally introduced by <a href=\"https://fronteers.nl/congres/2011/sessions/web-components-and-model-driven-views-alex-russell\">Alex Russell at Fronteers Conference 2011</a>) began to get more attention, undergoing various design changes to address developers' concerns.</p>\n<h2 class=\"anchored\">\n  <a name=\"the-web-components-toolkit\" href=\"#the-web-components-toolkit\">The web components toolkit</a>\n</h2>\n\n<p>Let's take a look at the web standards which make up web components today.</p>\n<h3 class=\"anchored\">\n  <a name=\"custom-elements\" href=\"#custom-elements\">Custom elements</a>\n</h3>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements\">Custom elements</a> allows you to create custom HTML tags which can exhibit any JavaScript behavior:</p>\n\n<pre><code class=\"lang-javascript\">class SayHello extends HTMLElement {\n  constructor() {\n    super();\n\n    let p = document.createElement(“p”);\n    let text = document.createTextNode(“Hello world!”);\n    p.appendChild(text);\n\n    this.appendChild(p);\n  }\n}\n\ncustomElements.define('say-hello', SayHello);\n</code></pre>\n\n<p>Custom elements can be used to encapsulate logic across your site and reused wherever necessary. Since they're a web standard, you won't need to load an additional JavaScript framework to support them.</p>\n<h3 class=\"anchored\">\n  <a name=\"html-templates\" href=\"#html-templates\">HTML templates</a>\n</h3>\n\n<p>If you need to reuse markup on a website, it can be helpful to make use of <a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_templates_and_slots\">an HTML template</a>. HTML templates are ignored by the browser until they are called upon to be rendered. Thus, you can create complicated blocks of HTML and render them instantaneously via JavaScript.</p>\n\n<p>To create an HTML template, all you need to do is wrap up your HTML with the new <code>&lt;template&gt;</code> tag:</p>\n\n<pre><code class=\"lang-html\">&lt;template id=\"template\"&gt;\n  &lt;script&gt;\n    const button = document.getElementById('click-button');\n    button.addEventListener('click', event =&gt; alert(event));\n  &lt;/script&gt;\n  &lt;style&gt;\n    #click-button {\n    border: 0;\n    border-radius: 4px;\n    color: white;\n    font-size: 1.5rem;\n    padding: .5rem 1rem;\n    }\n  &lt;/style&gt;\n  &lt;button id=\"click-button\"&gt;Click Me!&lt;/button&gt;\n&lt;/template&gt;\n</code></pre>\n<h3 class=\"anchored\">\n  <a name=\"shadow-dom\" href=\"#shadow-dom\">Shadow DOM</a>\n</h3>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM\">The shadow DOM</a> is another concept which provides support for further web page encapsulation. Any elements within the shadow DOM are not affected by the CSS styles of any other markup on the page, and similarly, any CSS defined within the shadow DOM doesn't affect other elements. They can also be configured to not be affected by external JavaScript, either. Among other advantages, this results in lower memory usage for the browser and faster render times. If it's helpful, you can think of elements in the shadow DOM as more secure <code>iframe</code>s.</p>\n\n<p>To add an element to the shadow DOM, you call <code>attachShadow()</code> on it:</p>\n\n<pre><code class=\"lang-javascript\">class MyWebComponent extends HTMLElement {\n    constructor() {\n        super();\n        this.attachShadow({ mode: \"open\" });\n    }\n    connectedCallback() {\n        this.shadowRoot.innerHTML = `\n            &lt;p&gt;I'm in the Shadow Root!&lt;/p&gt;\n        `;\n    }\n}\n\nwindow.customElements.define(\"my-web-component\", MyWebComponent);\n</code></pre>\n\n<p>This creates a custom element, <code>&lt;my-web-component&gt;</code>, whose <code>p</code> tag would not be affected by any other styles on the page.</p>\n<h2 class=\"anchored\">\n  <a name=\"web-component-ecosystems\" href=\"#web-component-ecosystems\">Web component ecosystems</a>\n</h2>\n\n<p>The greatest advantage web components have over using a library is their ability to provide standards-compliant, <em>composable</em> HTML elements. What this means is that if you have built a web component, you can package it up as a release for other developers to consume as a dependency in their project, just like any other Node or Ruby package, and those developers can be assured that that web component will work across all (well, most) web browsers without requiring the browser to load a front-end framework like React, Angular, or Vue.</p>\n\n<p>To give an example, <a href=\"https://github.com/halvves/shader-doodle\">Shader Doodle</a> is a custom element which sets up the ability to easily create fragment shaders. Developers who need this functionality can just fetch the package and insert it as a <code>&lt;shader-doodle&gt;</code> tag in their HTML, rather than creating the functionality of Share Doodle from scratch.</p>\n\n<p>Now, with the great interoperability that web components give you, many frameworks and libraries like Vue or React have started to provide the option to generate web components out of their proprietary code. That way you don't have to learn all the low-level APIs of the aforementioned standards, and can instead focus on coding. There many other libraries for creating web components, like <a href=\"https://github.com/polymer\">Polymer</a>, <a href=\"https://github.com/x-tag/core\">X-Tag</a>, <a href=\"https://github.com/slimjs/slim.js\">slim.js</a>, <a href=\"https://github.com/riot/riot\">Riot.js</a>, and <a href=\"https://github.com/ionic-team/stencil\">Stencil</a>.</p>\n\n<p>Another great example of this are Salesforce’s <a href=\"https://lwc.dev/\">Lightning Web Components</a>, a lightweight framework that abstracts away the complexity of the different web standards. It provides a standards-compliant foundation for building web components which can be used in any project.</p>\n<h2 class=\"anchored\">\n  <a name=\"getting-more-involved-web-components\" href=\"#getting-more-involved-web-components\">Getting more involved web components</a>\n</h2>\n\n<p>We recorded <a href=\"https://www.heroku.com/podcasts/codeish/38-building-with-web-components\">an episode of Code[ish], our podcast on all things tech, that meticulously went through the history (and future!) of web components</a>. Be sure to check out that interview from <a href=\"https://www.manning.com/books/web-components-in-action\">someone who literally wrote the book on web components</a>.</p>\n\n<p>You can also join <a href=\"https://polymer.slack.com/messages/general/\">the Polymer Slack workspace</a> to chat with other web developers about working with these standards.</p>","PublishedAt":"2020-03-04 16:45:00+00:00","OriginURL":"https://blog.heroku.com/building-with-web-components","SourceName":"Heroku"}},{"node":{"ID":810,"Title":"How (Not) to Build Datasets and Consume Data at Your Company","Description":"The topic of datasets is not new, and they have been successfully used at SoundCloud for analytics purposes for a long time. In this blog…","PublishedAt":"2020-03-03 00:00:00+00:00","OriginURL":"https://developers.soundcloud.com/blog/how-not-to-build-datasets-and-consume-data-at-your-company","SourceName":"Soundcloud"}},{"node":{"ID":269,"Title":"Elasticsearch: Custom Analysis","Description":"GIPHY uses Elasticsearch to deliver all the best GIFs. Elasticsearch is an extremely fast, open source search engine supported by a great community. It has a robust Query API which allows us to quickly iterate our search algorithm. The Mapping API enables us to prototype new signals and account for the quirks in GIF metadata. [&#8230;]","PublishedAt":"2020-03-02 20:49:23+00:00","OriginURL":"https://engineering.giphy.com/elasticsearch-custom-analysis/","SourceName":"GIPHY"}},{"node":{"ID":638,"Title":"Why We Chose Go","Description":"","PublishedAt":"2020-03-02 00:00:00+00:00","OriginURL":"https://tech.trivago.com/post/2020-03-02-whywechosego/","SourceName":"Trivago"}},{"node":{"ID":639,"Title":"An Open Door to Open Source: Relive our OSS Conference","Description":"","PublishedAt":"2020-02-25 00:00:00+00:00","OriginURL":"https://tech.trivago.com/post/2020-02-25-videosfromouropensourceconferencein2019/","SourceName":"Trivago"}},{"node":{"ID":811,"Title":"The Magic of Generating an Xcode Project","Description":"Planet Earth vs. Jupiter. There is the same order of magnitude between the ratio of these two planets and the amount of code that defined…","PublishedAt":"2020-02-20 00:00:00+00:00","OriginURL":"https://developers.soundcloud.com/blog/tuist-project-generation","SourceName":"Soundcloud"}},{"node":{"ID":640,"Title":"Better URL Search with Elasticsearch","Description":"","PublishedAt":"2020-02-11 00:00:00+00:00","OriginURL":"https://tech.trivago.com/post/2020-02-11-betterurlsearchwithelasticsearch/","SourceName":"Trivago"}},{"node":{"ID":812,"Title":"A Happy New Employee","Description":"My first six months at SoundCloud as an iOS engineer on the Recommendations team have just finished. In that time, I’ve already contributed…","PublishedAt":"2020-02-07 00:00:00+00:00","OriginURL":"https://developers.soundcloud.com/blog/a-happy-new-employee","SourceName":"Soundcloud"}},{"node":{"ID":365,"Title":"Chrome's Changes Could Break Your App: Prepare for SameSite Cookie Updates","Description":"<p>In this post, we will cover changes coming to Chrome (and other browsers) that affect how third-party cookies are handled—specifically <code>SameSite</code> changes, how to test to see if your site is impacted and how to fix it.</p>\n\n<p><img src=\"https://heroku-blog-files.s3.amazonaws.com/posts/1580744350-samesite-twitter.png\" alt=\"Blog post cover image showing a jar with cookies in it\"></p>\n\n<ul>\n<li>⚓️ <a href=\"https://blog.heroku.com/chrome-changes-samesite-cookie#what-is-code-samesite-code-and-why-the-big-change\">What is <code>SameSite</code> and why the big change?</a>\n</li>\n<li>⚓️ <a href=\"https://blog.heroku.com/chrome-changes-samesite-cookie#prepare-for-chrome-80-updates\">Prepare for Chrome 80 updates</a>\n\n<ul>\n<li>⚓️ <a href=\"https://blog.heroku.com/chrome-changes-samesite-cookie#step-1-enabling-code-samesite-code-chrome-flags-and-test-to-see-if-your-site-faces-potential-code-samesite-code-errors\">Step 1: Enabling <code>SameSite</code> Chrome flags and test to see if your site faces <code>SameSite</code> errors</a>\n</li>\n<li>⚓️ <a href=\"https://blog.heroku.com/chrome-changes-samesite-cookie#step-2-fixing-cookie-errors-using-appropriate-attributes\">Step 2: Fixing cookie errors using appropriate attributes</a>\n</li>\n</ul>\n</li>\n</ul>\n<h2 class=\"anchored\">\n  <a name=\"what-is-code-samesite-code-and-why-the-big-change\" href=\"#what-is-code-samesite-code-and-why-the-big-change\">What is <code>SameSite</code> and why the big change?</a>\n</h2>\n\n<p>Back in May 2019, Chrome announced its plan to develop a secure-by-default model for handling cookies. This initiative highlights Chrome’s promise of a more secure and faster browsing experience. Chrome's goal is to increase transparency, choice and control. Users should be aware of how they are tracked, who is tracking them, and ways to control the information shared. With the influx of privacy concerns and potential cross-site attacks, Chrome is taking action to protect its users. These changes will dramatically impact advertisers, publishers, or any company relying on cookies to target their audience. Be sure to prepare in advance so your users won't experience disruptions.</p>\n\n<p>Now, the day is finally at hand. Starting February 4, 2020, Google Chrome will stop sending third-party cookies in cross-site requests unless the cookies are secured and flagged using an IETF standard called <a href=\"https://web.dev/samesite-cookies-explained/\"><strong><code>SameSite</code></strong></a>.</p>\n<h3 class=\"anchored\">\n  <a name=\"what-does-this-mean-what-are-third-party-cookies-what-are-cross-site-request\" href=\"#what-does-this-mean-what-are-third-party-cookies-what-are-cross-site-request\">What does this mean? What are third-party cookies? What are cross-site request?</a>\n</h3>\n\n<p>When you visit a website, a browser cookie is generated and saved inside a folder in your web browser. This browser cookie is then used as a way to identify you and provide a personalized browsing experience. </p>\n\n<p>There are two types of cookies — first-party and third-party. Both types can hold the same information; however, they are accessed and created differently.</p>\n\n<p><img src=\"https://heroku-blog-files.s3.amazonaws.com/posts/1580750955-Same-Site%20Cookie%20Comparison.png\" alt=\"SameSite Cookie Comparison\"></p>\n\n<p>As illustrated above, if you visit website  <code>a.com</code> and you attempt to access a service from the same domain name <code>a.com</code>,  cookies generated will be considered first-party cookies. Being that the cookies were created by the same site, you'll be able to enjoy same-site luxuries while visiting <code>a.com</code>'s web service. These luxuries include saved login information, shopping cart items, site preferences, etc.</p>\n\n<p>Whereas, if you visit a website  <code>a.com</code>  but that page includes content (image, iframe, etc.) from a different domain name  <code>b.com</code>, cookies set by <code>b.com</code> will be considered third-party cookies because they come from a different name than in the URL bar:  <code>a.com</code>.</p>\n\n<p>These cookies were created by a different site and <code>b.com</code> accessing them from  <code>a.com</code>  (or any other domain) would constitute a cross-site request. A page on <code>a.com</code> making requests to <code>b.com</code> (for images, iframes, etc.) is what allows services like Facebook, Google Analytics, Doubleclick, etc. to track users and provide online-advertisements. In that example, Facebook, Google, and Doubleclick are the <code>b.com</code>. This allows, for example, Doubleclick to show targeted ads to you on multiple other sites you visit, like a news site, a hotel site, or a blog you read.</p>\n\n<p>As previously stated, Google Chrome will stop sending third-party cookies in cross-site requests unless the cookies are secured and flagged using an IETF standard called <a href=\"https://web.dev/samesite-cookies-explained/\"><strong><code>SameSite</code></strong></a>. In other words, the content from <code>b.com</code> (images, iframe, etc.) on <code>a.com</code>’s page will no longer be able to access <code>b.com</code>'s cookies unless those cookies are secured and flagged appropriately.</p>\n<h3 class=\"anchored\">\n  <a name=\"why-is-google-making-such-a-huge-change\" href=\"#why-is-google-making-such-a-huge-change\">Why is Google making such a huge change?</a>\n</h3>\n\n<p>Sharing cross-site cookies is not always an issue; however, it has the potential for abuse. Google Chrome's current behavior allows third-party websites to access all cookies by default.  This creates the possibility of <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/CSRF\"><strong>cross-site request forgery</strong></a> (CSRF) attacks, other security vulnerabilities and privacy leaks.</p>\n<h3 class=\"anchored\">\n  <a name=\"what-s-cross-site-request-forgery-csrf\" href=\"#what-s-cross-site-request-forgery-csrf\">What’s cross-site request forgery (CSRF)?</a>\n</h3>\n\n<p>Cross-site request forgery is a web security vulnerability that allows a hacker to exploit users through session surfing or one-click attacks. For example, hackers can trick an innocent user to click a believable link. If this user is already logged into a website the hacker wants to access, the hacker can surf on the already authenticated session and make request to a site the user didn't intend to make. Being that the user already authenticated, the site cannot distinguish between the forged or legitimate request.</p>\n\n<p>There are a few ways to create these malicious commands: image tags, link tags, hidden forms, and JavaScript XMLHttpRequests. With Chrome's current default behavior, the requested cookie will be sent by default, and the hacker will have access to the user's session, which means they are effectively logged in as the user. To fight against this web vulnerability, web frameworks often require unique tokens/identifiers that are not accessible to attackers and would not be sent along (like cookies) with requests.</p>\n\n<p>As an example, let’s assume you sign into your bank account.</p>\n\n<pre><code>www.bankpal.com\n</code></pre>\n\n<p>While browsing your transaction history, you get an email letting you know about a recent suspicious transaction. To investigate further, the email requires you to log into your bank account. It provides a convenient link for you as well. </p>\n\n<p>💡Note: You are still logged in to BankPal in another tab.</p>\n\n<p><img src=\"https://heroku-blog-files.s3.amazonaws.com/posts/1580744964-Cross-Forgery%20Email%20%281%29.png\" alt=\"BankPal Cross-Forgery Email\"></p>\n\n<p>The link’s HTML is as follows:</p>\n\n<pre><code class=\"language-html\">&lt;a href=\"http://www.bank.com/transfer?acct=888888&amp;amount=100000\"&gt;Log In&lt;/a&gt;\n</code></pre>\n\n<p>The hacker has already studied BankPal so they know how to mimic account transfers quite well. For example, here is how BankPal typically creates money transfers:</p>\n\n<pre><code>GET http://www.bankpal.com/transfer?acct=AccountId&amp;amount=DollarAmount HTTP/1.1\n</code></pre>\n\n<p>This hacker has sent this email to a large number of bank customers and they know at least one person will click this believable link. </p>\n\n<p>You are that one customer.</p>\n\n<p><img src=\"https://heroku-blog-files.s3.amazonaws.com/posts/1580745029-BUTTON%20click.png\" alt=\"Clicking log in button in email\"></p>\n\n<p>From a quick glance, this email looks legitimate. There is no way it could be suspicious and cause harm to a user's account. It even has the BankPal logo! With full trust, you click the link. Since you are already authenticated in the previous tab, clicking that link ends up creating an unauthorized transaction behind the scenes. This attacker has forged your identity, transferred $100,000 from your account, and has completely ruined your life (or at least your bank account) in seconds.</p>\n\n<p>Let's say BankPal only allows a <code>POST</code> request for money transfers. It would be impossible to create a malicious request using an <code>&lt;a href&gt;</code> tag. This attacker could very well create a <code>&lt;form&gt;</code> tag instead with automatic execution of the embedded JavaScript.</p>\n\n<p>This form's HTML code could look like this:</p>\n\n<pre><code class=\"language-html\"> &lt;body onload=\"document.forms[0].submit()\"&gt;\n   &lt;form action=\"http://www.bankpal.com/transfer\" method=\"POST\"&gt;\n     &lt;input type=\"hidden\" name=\"acct\" value=\"AttackerAccountId\"/&gt;\n     &lt;input type=\"hidden\" name=\"amount\" value=\"100000\"/&gt;\n     &lt;input type=\"submit\" value=\"Log In\"/&gt;\n   &lt;/form&gt;\n &lt;/body&gt;\n</code></pre>\n\n<p>In a real-life scenario, the example above would not happen. Banks prevent CSRF attacks using dynamically generated session tokens, session timeouts and other preventive methods. And now, with the <code>SameSite</code> attribute <code>Strict</code> (read more below), banks have yet another preventive measure. Large companies have found methods of protection; however, there are lots of smaller websites without protection. If an attacker can forge a transaction, they can also forge a password reset request, an email change request, and then gain full control of an account or web application.</p>\n<h3 class=\"anchored\">\n  <a name=\"how-is-chrome-protecting-users-against-csrf-attacks\" href=\"#how-is-chrome-protecting-users-against-csrf-attacks\">How is Chrome protecting users against CSRF attacks?</a>\n</h3>\n\n<p>To alleviate this issue, Chrome version 51 (2016-05-25) introduced the concept of the SameSite attribute. With the SameSite attribute, website developers have the power to set rules around how cookies are shared and accessed.  </p>\n\n<p>The <code>SameSite</code> attribute can be set with the following values: <strong><code>Strict</code></strong>, <strong><code>Lax</code></strong>, or <strong><code>None</code></strong>.</p>\n\n<p><img src=\"https://heroku-blog-files.s3.amazonaws.com/posts/1580745160-Same-Site%20Cookie%20Infographic.png\" alt=\"SameSite Cookie Infographic\"></p>\n\n<p><strong>Strict: Restricts cross-site sharing altogether.</strong>\nCookies with this setting can be accessed only when visiting the domain from which it was initially set. In other words, <code>Strict</code> completely blocks a cookie being sent to <code>a.com</code> when a page from <code>b.com</code> makes the request. Even when clicking a top-level link on a third-party domain to your site, the browser will refuse to send the cookie. This option would be best for applications that require high security, such as banks.</p>\n\n<p><strong>Lax: All the sites belonging to the same domain can set and access cookies.</strong>\nUnlike <code>None</code> where cookies are always sent, <code>Lax</code> cookies are only sent on same-site request like <code>Strict</code>. However,  <code>Lax</code> allows top-level (sometimes called <a href=\"https://publicsuffix.org/\">public suffix</a>) navigation access with a safe HTTP method, like HTTP <code>GET</code>. The cookie will not be sent with cross-domain <code>POST</code> requests or when loading the site in a cross-origin frame, but it will be sent when you navigate to the site via a standard top-level <code>&lt;a href=...&gt;</code> link.</p>\n\n<p><strong>None: Allows third-party cookies to track users across sites.</strong>\nCookies with this setting will work the same way as cookies work today. Cookies will be able to be used across sites. \n💡Note that you need both the <code>None</code> and <code>Secure</code> attributes together. If you just specify <code>None</code> without <code>Secure</code> the cookie will be rejected. <code>Secure</code> ensures that the browser request is sent by a secure (HTTPS) connection.</p>\n<h3 class=\"anchored\">\n  <a name=\"real-world-example-of-the-difference-between-code-strict-code-and-code-lax-code\" href=\"#real-world-example-of-the-difference-between-code-strict-code-and-code-lax-code\">Real-world example of the difference between <code>Strict</code> and <code>Lax</code></a>\n</h3>\n\n<p>The <code>None</code> attribute is pretty understandable; however, there seems to be confusion around <code>Strict</code> and <code>Lax</code>. Let's dive into a real-world example.</p>\n\n<p>Let's say you are the CEO of TalkToMe, Inc., a feature rich commenting system. You allow your users to embed TalkToMe on their websites and they gain social network integration, advanced moderation options and other extensive community functions. If TalkToMe, Inc.'s first-party cookies are set to <code>Lax</code>, your customers are still able to access their embedded comments. If TalkToMe, Inc.'s first-party cookies are set to <code>Strict</code>, your customers will not be able to access data from an external site.</p>\n<h3 class=\"anchored\">\n  <a name=\"chrome-80-code-samesite-code-update\" href=\"#chrome-80-code-samesite-code-update\">Chrome 80 <code>SameSite</code> update</a>\n</h3>\n\n<p>With the Chrome 51 update, Google gave website developers power to set rules around how cookies are shared; however, many developers don't follow the recommended practice. Instead of leaving the user's cookies exposed to potential security vulnerabilities (allowing third-party requests by default), the Chrome 80 update takes the power back and sets all cookies to <code>SameSite=Lax</code> by default. In other words, Chrome has decided to make all cookies limited to first-party context by default, and will require developers to mark a cookie as needing third-party visibility using <code>SameSite=None</code> explicitly.</p>\n\n<blockquote>\n<p>“We’ve been focused on giving users transparency and choice over how they are tracked on the web through easy to use controls.”</p>\n<p>- Ben Galbraith, Director, Chrome Product Management</p>\n</blockquote>\n<h3 class=\"anchored\">\n  <a name=\"will-this-change-break-anything\" href=\"#will-this-change-break-anything\">Will this change break anything?</a>\n</h3>\n\n<p>This <code>SameSite</code> update requires explicit labeling for third-party cookies. Cookies that aren’t labeled appropriately may cease to function in Chrome. Even more than that: all cookies previously set may no longer be accessible.</p>\n<h3 class=\"anchored\">\n  <a name=\"how-many-users-will-this-change-affect\" href=\"#how-many-users-will-this-change-affect\">How many users will this change affect?</a>\n</h3>\n\n<p>According to the online traffic monitor <a href=\"https://gs.statcounter.com/browser-market-share\">StatCounter</a>, Chrome is the most popular web browser, and this change will affect <strong>64%</strong> of the world’s internet users in 2020. Keep reading to find out how you can keep this change from affecting your users!</p>\n<h3 class=\"anchored\">\n  <a name=\"will-my-website-be-affected\" href=\"#will-my-website-be-affected\">Will my website be affected?</a>\n</h3>\n\n<p>If either of the following is true, you will be affected and you must update your cookies:</p>\n\n<ul>\n<li>If your website integrates with external services for advertising, content recommendations, third-party widgets, social media embeds, or any custom integration that relies on cookies</li>\n<li>If your website uses non-secure (HTTP rather than HTTPS) browser access</li>\n</ul>\n<h2 class=\"anchored\">\n  <a name=\"prepare-for-chrome-80-updates\" href=\"#prepare-for-chrome-80-updates\">Prepare for Chrome 80 updates</a>\n</h2>\n<h3 class=\"anchored\">\n  <a name=\"step-1-enabling-code-samesite-code-chrome-flags-and-test-to-see-if-your-site-faces-potential-code-samesite-code-errors\" href=\"#step-1-enabling-code-samesite-code-chrome-flags-and-test-to-see-if-your-site-faces-potential-code-samesite-code-errors\">Step 1: Enabling <code>SameSite</code> Chrome flags and test to see if your site faces potential <code>SameSite</code> errors</a>\n</h3>\n\n<p>As of Chrome 76, you can enable the new <code>#same-site-by-default-cookies</code> flag and test your site before the February 4, 2020 deadline.</p>\n\n<p>Let's enable the flag:</p>\n\n<ol>\n<li>Go to chrome://flags/\n<img src=\"https://heroku-blog-files.s3.amazonaws.com/posts/1580746066-image-16.png\" alt=\"image-16\">\n</li>\n<li>Enable #same-site-by-default-cookies and #cookies-without-same-site-must-be-secure\n<img src=\"https://heroku-blog-files.s3.amazonaws.com/posts/1580746263-Screen%20Shot%202020-01-09%20at%206.28.20%20PM.png\" alt=\"Screen Shot 2020-01-09 at 6\">\n</li>\n<li>Restart the browser for the changes to take effect.\n<img src=\"https://heroku-blog-files.s3.amazonaws.com/posts/1580746297-Screen%20Shot%202020-01-09%20at%206.26.57%20PM.png\" alt=\"Screen Shot 2020-01-09 at 6\">\n</li>\n<li>Visit your website and see if you can spot error messages in the console of your browser's dev tools.\n<img src=\"https://heroku-blog-files.s3.amazonaws.com/posts/1580746311-Screen%20Shot%202019-12-17%20at%204.44.39%20PM.png\" alt=\"Screen Shot 2019-12-17 at 4\">\n</li>\n</ol>\n\n<p>If you see error messages like the one above, this means your site is not ready for the 2020 Chrome 80 release. You should continue reading to learn how to set your cookies.</p>\n<h3 class=\"anchored\">\n  <a name=\"step-2-fixing-cookie-errors-using-appropriate-attributes\" href=\"#step-2-fixing-cookie-errors-using-appropriate-attributes\">Step 2: Fixing cookie errors using appropriate attributes</a>\n</h3>\n<h4 class=\"anchored\">\n  <a name=\"common-use-cases-auditing-your-cookie-usage\" href=\"#common-use-cases-auditing-your-cookie-usage\">Common use cases: Auditing your cookie usage</a>\n</h4>\n\n<p><a href=\"https://www.chromium.org/updates/same-site\">Chrome</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#SameSite_cookies\">Firefox</a>, <a href=\"https://blogs.windows.com/msedgedev/2018/05/17/samesite-cookies-microsoft-edge-internet-explorer/\">Edge</a>, and other browsers will also change their default cookie behavior to the following:</p>\n\n<ol>\n<li>Cookies without a <code>SameSite</code> attribute will be treated as <code>SameSite=Lax</code> (See variants below), meaning all cookies will be restricted to first-party context only. <strong>If you need third-party access, you will need to update your cookies.</strong>\n</li>\n<li>Cookies needing third-party access must specify <code>SameSite=None; Secure</code> to enable access.</li>\n</ol>\n\n<p>If you don't know whether you provide cookies that are intended for cross-site usage, some common use-cases are</p>\n\n<ul>\n<li>You present ads on your website.</li>\n<li>You present content in an <code>&lt;iframe&gt;</code>.</li>\n<li>You present content within a WebView.</li>\n<li>You present images from another site on your website.</li>\n<li>You embed content shared from other sites, such as videos, maps, code samples, chat widgets and social post.</li>\n<li>You use third-party services on your website like Facebook, Twitter, Instagram, LinkedIn, Gravatar, Google Calendar, User Tracking (CrazyEgg, Google Analytics, etc.), CRM and/or reservations, booking, anti-fraud and payments services.</li>\n</ul>\n\n<p>💡 NOTE:\nCookie warnings triggered from domains you don't control will need to be set appropriately by the domain owner. If you are getting a warning like this from Google, Google will have to set this cookie appropriately. If the warning messages list a domain you control, you will need to add the correct attributes.  </p>\n\n<pre><code>(index):1 A cookie associated with a resource at http://google.com/ was set with \nSameSite=None but without Secure. A future release of Chrome will only deliver \ncookies marked SameSite=None if they are also marked Secure. You can review cookies\n in developer tools under Application&gt;Storage&gt;Cookies and see more details at \n https://www.chromestatus.com/feature/5633521622188032.\n</code></pre>\n<h4 class=\"anchored\">\n  <a name=\"knowing-which-attribute-to-use\" href=\"#knowing-which-attribute-to-use\">Knowing which attribute to use</a>\n</h4>\n\n<p>First, a quick recap of <code>SameSite</code> attributes:</p>\n\n<table>\n<thead>\n<tr>\n<th>Value</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Strict</strong></td>\n<td>Cookies with this setting can be accessed only when visiting the domain from which it was initially set. In other words, <code>Strict</code> completely blocks a cookie being sent to <code>a.com</code> when it is being sent from a page on <code>b.com</code> (i.e. <code>b.com</code> is in the URL bar). Even when clicking a top-level link on a third-party domain to your site, the browser will refuse to send the cookie. This option would be best for applications that require high security, such as banks.</td>\n</tr>\n<tr>\n<td><strong>Lax</strong></td>\n<td>Unlike <code>None</code> where cookies are always sent, <code>Lax</code> cookies are only sent on same-site request like <code>Strict</code>. However,  <code>Lax</code> allows top-level navigation access with a safe HTTP method, like HTTP <code>GET</code>. The cookie will not be sent with cross-domain <code>POST</code> requests or when loading the site in a cross-origin frame, but it will be sent when you navigate to the site via a standard top-level <code>&lt;a href=...&gt;</code> link.</td>\n</tr>\n<tr>\n<td><strong>None</strong></td>\n<td>Cookies with this setting will work the same way as cookies work today. Cookies will be able to be used across sites. 💡Note that you need both the <code>None</code> and <code>Secure</code> attributes together. If you just specify <code>None</code> without <code>Secure</code> the cookie will be rejected. <code>Secure</code> ensures that the browser request is sent by a secure (HTTPS) connection.</td>\n</tr>\n</tbody>\n</table>\n\n<p><strong>🍪 When to use <code>SameSite=Strict</code></strong></p>\n\n<p>Use when the domain in the URL bar equals the cookie’s domain (first-party) AND the link isn’t coming from a third-party.</p>\n\n<pre><code>Set-Cookie: first_party_var=value; SameSite=Strict\n</code></pre>\n\n<p><strong>🍪 When to use <code>SameSite=Lax</code></strong></p>\n\n<p>Use when the domain in the URL bar equals the cookie’s domain (first-party). Note: Third party content (images, iframes, etc.) is allowed.</p>\n\n<pre><code>Set-Cookie: first_party_var=value; SameSite=Lax\n</code></pre>\n\n<p><strong>🍪 When to use <code>SameSite=None; Secure</code></strong></p>\n\n<p>Use when you don't need cross-domain limitations.</p>\n\n<pre><code>Set-Cookie: third_party_var=value; SameSite=None; Secure\n</code></pre>\n\n<p><strong>Common scenarios</strong></p>\n\n<table>\n<thead>\n<tr>\n<th>When to...</th>\n<th>Scenario</th>\n<th>Attribute</th>\n<th>If you do nothing</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Use <code>SameSite=Strict</code></strong></td>\n<td>Your website offers banking services or your website needs a very secure environment</td>\n<td>Update your <code>SameSite</code> attribute to <code>SameSite=Strict</code>  to add a layer of protection from web threats.</td>\n<td>Your site may be susceptible to potential web vulnerabilities and data leaks.</td>\n</tr>\n<tr>\n<td><strong>Use <code>SameSite=Lax</code></strong></td>\n<td>You have a social community website and you offer embedded chat widgets</td>\n<td>Update your <code>SameSite</code> attribute to <code>SameSite=Lax</code>\n</td>\n<td>You'll be good to go. Chrome's default behavior will be <code>SameSite=Lax</code>. Even if <code>SameSite</code> is not set, the default is still <code>SameSite=Lax</code>\n</td>\n</tr>\n<tr>\n<td><strong>Use <code>SameSite=None</code></strong></td>\n<td>Your website offers data analytics services <strong>OR</strong> your website offers retargeting, advertising and conversion tracking.</td>\n<td>Update your <code>SameSite</code> attribute to <code>SameSite=None; Secure</code> to ensure Chrome doesn't reject your third-party cookies.</td>\n<td>Your cookies will no longer work on Feb 4, 2020.</td>\n</tr>\n<tr>\n<td><strong>\"Speak to a representative\"</strong></td>\n<td>You've monetized your website with third-party ad programs <strong>OR</strong> you're utilizing third-party services like Google Calendar, Cloudflare, Facebook, Twitter, Instagram, LinkedIn, Gravatar, User Tracking services, CRM, reservations plugin, anti-fraud, third-party fonts, image/video hosting and/or payments services.</td>\n<td>Speak with the ad program company to ensure they have a plan to update their cookies. You can't update cookies on a domain you don't control.</td>\n<td>You may see a decline in the ad revenue you receive and or business engagement.</td>\n</tr>\n</tbody>\n</table>\n<h4 class=\"anchored\">\n  <a name=\"now-set-your-cookies\" href=\"#now-set-your-cookies\">Now, set your cookies</a>\n</h4>\n\n<p>Most server-side applications support <code>SameSite</code> attributes; however, there are a few clients who don't support it (see <a href=\"https://www.chromium.org/updates/same-site/incompatible-clients\"><strong>Known Incompatible Clients</strong></a>).</p>\n\n<ul>\n<li>\n<strong>For Server-Side Applications</strong>: Support for <code>SameSite=None</code> in languages, libraries, and frameworks\n\n<ul>\n<li><a href=\"https://github.com/GoogleChromeLabs/samesite-examples/blob/master/php.md\">PHP</a></li>\n<li><a href=\"https://github.com/GoogleChromeLabs/samesite-examples/blob/master/javascript-nodejs.md\">NodeJS</a></li>\n<li><a href=\"https://github.com/GoogleChromeLabs/samesite-examples/blob/master/python.md\">Python</a></li>\n<li><a href=\"https://github.com/GoogleChromeLabs/samesite-examples/blob/master/python-flask.md\">Python Flask</a></li>\n<li>\n<a href=\"https://api.rubyonrails.org/classes/ActionDispatch/Cookies.html\">Ruby on Rails</a>\n\n<ul>\n<li>Recent pull request: <a href=\"https://github.com/rails/rails/pull/28297\">https://github.com/rails/rails/pull/28297</a>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<strong>Directly</strong>: <code>document.cookie</code>\n\n<ul>\n<li><a href=\"https://github.com/GoogleChromeLabs/samesite-examples/blob/master/javascript.md\">JavaScript</a></li>\n</ul>\n</li>\n</ul>\n<h2 class=\"anchored\">\n  <a name=\"need-more-help\" href=\"#need-more-help\">Need more help?</a>\n</h2>\n\n<p>Rowan Merewood, Developer Advocate for Chrome, listed a few helpful ways to get help with setting cookies. Keep in mind, this will be a new update so if you run into an issue, it may be the first time anyone has encountered the issue. It is best to just raise the issue, be vocal, and publicly address your concerns because someone else is very likely to encounter the same issue!</p>\n\n<ul>\n<li>Raise an issue on the <a href=\"https://github.com/GoogleChromeLabs/samesite-examples\"><code>SameSite</code> examples repo on GitHub</a>.</li>\n<li>Post a question on the <a href=\"https://stackoverflow.com/questions/tagged/samesite\">\"samesite\" tag on StackOverflow</a>.</li>\n<li>For issues with Chromium's behavior, raise a bug via the <a href=\"https://bit.ly/2lJMd5c\">[<code>SameSite</code> cookies] issue template</a>.</li>\n<li>Follow Chrome's progress on the <a href=\"https://www.chromium.org/updates/same-site\"><code>SameSite</code> updates page</a>.</li>\n</ul>","PublishedAt":"2020-02-03 21:30:00+00:00","OriginURL":"https://blog.heroku.com/chrome-changes-samesite-cookie","SourceName":"Heroku"}},{"node":{"ID":641,"Title":"Meet us at A New Dawn, IxDA20 in Milan, Italy","Description":"","PublishedAt":"2020-01-31 00:00:00+00:00","OriginURL":"https://tech.trivago.com/post/2020-01-31-findusatanewdawnixda20inmilanitaly/","SourceName":"Trivago"}},{"node":{"ID":813,"Title":"Speeding Up Builds with Dagger Reflect","Description":"A large portion of an Android app’s build time can consist of Dagger annotation processing, and most developers agree that productivity is…","PublishedAt":"2020-01-30 00:00:00+00:00","OriginURL":"https://developers.soundcloud.com/blog/dagger-reflect","SourceName":"Soundcloud"}},{"node":{"ID":642,"Title":"trivago Magazine's Journey to Server-Side Rendering","Description":"","PublishedAt":"2020-01-29 00:00:00+00:00","OriginURL":"https://tech.trivago.com/post/2020-01-29-trivagomagazinesjourneytoserversiderende/","SourceName":"Trivago"}},{"node":{"ID":643,"Title":"Meet us at FOSDEM, Brussels, Belgium","Description":"","PublishedAt":"2020-01-28 00:00:00+00:00","OriginURL":"https://tech.trivago.com/post/2020-01-28-fosdem/","SourceName":"Trivago"}},{"node":{"ID":381,"Title":"Five things I learned about working on content quality at Instagram","Description":"","PublishedAt":"2020-01-25 01:13:36+00:00","OriginURL":"https://instagram-engineering.com/five-things-i-learned-about-working-on-content-quality-at-instagram-5031b1342bea?source=rss----37dc2a3034f2---4","SourceName":"Instagram"}},{"node":{"ID":814,"Title":"The Power of Types for Errors","Description":"At KotlinConf 2019, I talked about the power of types. In essence, I discussed limiting the number of primitives we use in our code in favor…","PublishedAt":"2020-01-20 00:00:00+00:00","OriginURL":"https://developers.soundcloud.com/blog/power-of-types-for-errors","SourceName":"Soundcloud"}},{"node":{"ID":366,"Title":"Terrier: An Open-Source Tool for Identifying and Analyzing Container and Image Components","Description":"<style scoped>\n@media only screen and\n  (min-width: 415px) {\n    #cover-image { width: 70%; }\n}\n\n@media only screen and\n  (max-width: 414px) \n  and (orientation: portrait) { \n    #cover-image { width: 100%; }\n}\n</style>\n\n<p>As part of our Blackhat Europe talk <a href=\"https://www.blackhat.com/eu-19/briefings/schedule/#reverse-engineering-and-exploiting-builds-in-the-cloud-17287\">“Reverse Engineering and Exploiting Builds in the Cloud”</a> we publicly released a new tool called Terrier. </p>\n\n<figure style=\"text-align: center;\">\n<img id=\"cover-image\" src=\"https://heroku-blog-files.s3.amazonaws.com/posts/1578942799-terrier-twitter.png\" alt=\"Announcing Terrier: An open-source tool for identifying and analysing container and image components\">\n<figcaption>Announcing Terrier: An open-source tool for identifying and analysing container and image components.</figcaption>\n</figure>\n\n<p>In this blog post, I am going to show you how Terrier can help you identify and verify container and image components for a wide variety of use-cases, be it from a supply-chain perspective or forensics perspective. Terrier can be found on Github <a href=\"https://github.com/heroku/terrier\">https://github.com/heroku/terrier</a>.</p>\n<h2 class=\"anchored\">\n  <a name=\"containers-and-images\" href=\"#containers-and-images\">Containers and images</a>\n</h2>\n\n<p>In this blog post, I am not going to go into too much detail about containers and images (you can learn more <a href=\"https://www.opencontainers.org/about\">here</a>) however it is important to highlight a few characteristics of containers and images that make them interesting in terms of Terrier. Containers are run from images and currently the Open Containers Initiative (OCI) is the most popular format for images. The remainder of this blog post refers to OCI images as images.</p>\n\n<p>Essentially images are tar archives that container multiple tar archives and meta-information that represent the “layers” of an image. The OCI format of images makes images relatively simple to work with which makes analysis relatively simple. If you only had access to a terminal and the tar command, you could pretty much get what you need from the image’s tar archive.</p>\n\n<p>When images are utilised at runtime for a container, their contents become the contents of the running container and the layers are essentially extracted to a location on the container’s runtime host. The container runtime host is the host that is running and maintaining the containers. This location is typically <code>/var/lib/docker/overlay2/&lt;containerID&gt;/</code>. This location contains a few folders of interest, particularly the \"merged\" folder. The \"merged\" folder contains the contents of the image and any changes that have occurred in the container since its creation. For example, if the image contained a location such as <code>/usr/chris/stuff</code> and after creating a container from this image I created a file called <code>helloworld.txt</code> at the location <code>/usr/chris/stuff</code>. This would result in the following valid path on the container runtime host <code>/var/lib/docker/overlay2/&lt;containerID&gt;/merged/usr/chris/stuff/helloworld.txt</code>.</p>\n<h2 class=\"anchored\">\n  <a name=\"what-does-terrier-do\" href=\"#what-does-terrier-do\">What does Terrier do?</a>\n</h2>\n\n<p>Now that we have a brief understanding of images and containers, we can look at what Terrier does. Often it is the case that you would like to determine if an image or container contains a specific file. This requirement may be due to a forensic analysis need or to identify and prevent a certain supply-chain attack vector. Regardless of the requirement, having the ability to determine the presence of a specific file in an image or container is useful.</p>\n<h3 class=\"anchored\">\n  <a name=\"identifying-files-in-oci-images\" href=\"#identifying-files-in-oci-images\">Identifying files in OCI images</a>\n</h3>\n\n<p>Terrier can be used to determine if a specific image contains a specific file. In order to do this, you need the following:</p>\n\n<ol>\n<li>An OCI Image i.e TAR archive</li>\n<li>A SHA256 hash of a specific file/s</li>\n</ol>\n\n<p>The first point can be easily achieved with Docker by using the following command:</p>\n\n<pre><code class=\"language-term\">$ docker save imageid -o myImage.tar\n</code></pre>\n\n<p>The command above uses a Docker image ID which can be obtained using the following command:</p>\n\n<pre><code class=\"language-term\">$ docker images\n</code></pre>\n\n<p>Once you have your image exported as a tar archive, you will then need to establish the SHA256 hash of the particular file you would like to identify in the image. There are multiple ways to achieve this but in this example, we are going to use the hash of the Golang binary <em>go1.13.4 linux/amd64</em> which can be achieved with following command on a Linux host:</p>\n\n<pre><code class=\"language-term\">$ cat /usr/local/go/bin/go | sha256sum\n</code></pre>\n\n<p>The command above should result in the following SHA256 hash: <code>82bce4b98d7aaeb4f841a36f7141d540bb049f89219f9e377245a91dd3ff92dd</code></p>\n\n<p>Now that we have a hash, we can use this hash to determine if the Golang binary is in the image <code>myImage.tar</code>. To achieve this, we need to populate a configuration file for Terrier. Terrier makes use of YAML configuration files and below is our config file that we save as <code>cfg.yml</code>:</p>\n\n<pre><code class=\"language-yaml\">mode: image\nimage: myImage.tar\n\nhashes:\n    - hash: '82bce4b98d7aaeb4f841a36f7141d540bb049f89219f9e377245a91dd3ff92dd'\n</code></pre>\n\n<p>The config file above has multiple entries which allow us to specify the <code>mode</code> that Terrier will operate in and in this case, we are working with an image file (tar archive) so the mode is <code>image</code>. The image file we are working with is <code>myImage.tar</code> and the hash we are looking to identify is in the <code>hashes</code> list.</p>\n\n<p>We are now ready to run Terrier and this can be done with the following command:</p>\n\n<pre><code class=\"language-term\">$ ./terrier\n</code></pre>\n\n<p>The command above should result in output similar to the following:</p>\n\n<pre><code class=\"language-term\">$ ./terrier \n[+] Loading config:  cfg.yml\n[+] Analysing Image\n[+] Docker Image Source:  myImage.tar\n[*] Inspecting Layer:  34a9e0f17132202a82565578a3c2dae1486bb198cde76928c8c2c5c461e11ccf\n[*] Inspecting Layer:  6539a80dd09da08132a525494ff97e92f4148d413e7c48b3583883fda8a40560\n[*] Inspecting Layer:  6d2d61c78a65b6e6c82b751a38727da355d59194167b28b3f8def198cd116759\n[!] Found file '6d2d61c78a65b6e6c82b751a38727da355d59194167b28b3f8def198cd116759/usr/local/go/bin/go' with hash: 82bce4b98d7aaeb4f841a36f7141d540bb049f89219f9e377245a91dd3ff92dd\n[*] Inspecting Layer:  a6e646c34d2d2c2f4ab7db95e4c9f128721f63c905f107887839d3256f1288e1\n[*] Inspecting Layer:  aefc8f0c87a14230e30e510915cbbe13ebcabd611e68db02b050b6ceccf9c545\n[*] Inspecting Layer:  d4468fff8d0f28d87d48f51fc0a6afd4b38946bbbe91480919ebfdd55e43ce8c\n[*] Inspecting Layer:  dbf9da5e4e5e1ecf9c71452f6b67b2b0225cec310a20891cc5dedbfd4ead667c\n</code></pre>\n\n<p>We have identified a file <code>/usr/local/go/bin/go</code> located at layer <code>6d2d61c78a65b6e6c82b751a38727da355d59194167b28b3f8def198cd116759</code> that has the same SHA256 hash as the one we provided. We now have verification that the image “myImage.tar” contains a file with the SHA256 hash we provided.</p>\n\n<p>This example can be extended upon and you can instruct Terrier to search for multiple hashes. In this case, we are going to search for a malicious file. Recently a malicious Python library was identified in the wild and went by the name “Jeilyfish”. Terrier could be used to check if a Docker image of yours contained this malicious package. To do this, we can determine the SHA256 of one of the malicious Python files that contains the backdoor:</p>\n\n<pre><code class=\"language-term\">$ cat jeIlyfish-0.7.1/jeIlyfish/_jellyfish.py | sha256sum\ncf734865dd344cd9b0b349cdcecd83f79a751150b5fd4926f976adddb93d902c\n</code></pre>\n\n<p>We then update our Terrier config to include the hash calculated above.</p>\n\n<pre><code class=\"language-yaml\">mode: image\nimage: myImage.tar\n\nhashes:\n    - hash: '82bce4b98d7aaeb4f841a36f7141d540bb049f89219f9e377245a91dd3ff92dd'\n    - hash: 'cf734865dd344cd9b0b349cdcecd83f79a751150b5fd4926f976adddb93d902c'\n</code></pre>\n\n<p>We then run Terrier against and analyse the results:</p>\n\n<pre><code class=\"language-term\">$ ./terrier \n[+] Loading config:  cfg.yml\n[+] Analysing Image\n[+] Docker Image Source:  myImage.tar\n[*] Inspecting Layer:  34a9e0f17132202a82565578a3c2dae1486bb198cde76928c8c2c5c461e11ccf\n[*] Inspecting Layer:  6539a80dd09da08132a525494ff97e92f4148d413e7c48b3583883fda8a40560\n[*] Inspecting Layer:  6d2d61c78a65b6e6c82b751a38727da355d59194167b28b3f8def198cd116759\n[!] Found file '6d2d61c78a65b6e6c82b751a38727da355d59194167b28b3f8def198cd116759/usr/local/go/bin/go' with hash: 82bce4b98d7aaeb4f841a36f7141d540bb049f89219f9e377245a91dd3ff92dd\n[*] Inspecting Layer:  a6e646c34d2d2c2f4ab7db95e4c9f128721f63c905f107887839d3256f1288e1\n[*] Inspecting Layer:  aefc8f0c87a14230e30e510915cbbe13ebcabd611e68db02b050b6ceccf9c545\n[*] Inspecting Layer:  d4468fff8d0f28d87d48f51fc0a6afd4b38946bbbe91480919ebfdd55e43ce8c\n[*] Inspecting Layer:  dbf9da5e4e5e1ecf9c71452f6b67b2b0225cec310a20891cc5dedbfd4ead667c\n</code></pre>\n\n<p>The results above indicate that our image did not contain the malicious Python package.</p>\n\n<p>There is no limit as to how many hashes you can search for however it should be noted that Terrier performs all its actions in-memory for performance reasons so you might hit certain limits if you do not have enough accessible memory.</p>\n<h3 class=\"anchored\">\n  <a name=\"identifying-and-verifying-specific-files-in-oci-images\" href=\"#identifying-and-verifying-specific-files-in-oci-images\">Identifying and verifying specific files in OCI images</a>\n</h3>\n\n<p>Terrier can also be used to determine if a specific image contains a specific file <em>at a specific location</em>. This can be useful to ensure that an image is using a specific component i.e binary, shared object or dependency.  This can also be seen as “pinning” components by ensuring that you are images are using specific components i.e a specific version of cURL.</p>\n\n<p>In order to do this, you need the following:</p>\n\n<ol>\n<li>An OCI Image i.e TAR archive</li>\n<li>A SHA256 hash of a specific file/s</li>\n<li>The path and name of the specific file/s</li>\n</ol>\n\n<p>The first point can be easily achieved with Docker by using the following command:</p>\n\n<pre><code class=\"language-term\">$ docker save imageid -o myImage.tar\n</code></pre>\n\n<p>The command above utilises a Docker image id which can be obtained using the following command:</p>\n\n<pre><code class=\"language-term\">$ docker images\n</code></pre>\n\n<p>Once you have your image exported as a tar archive, you will need to determine the path of the file you would like to identify and verify in the image. For example, if we would like to ensure that our images are making use of a specific version of cURL, we can run the following commands in a container or some other environment that resembles the image.</p>\n\n<pre><code class=\"language-term\">$ which curl\n/usr/bin/curl\n</code></pre>\n\n<p>We now have the path to cURL and can now generate the SHA256 of this instance of cURL because in this case, we trust this instance of cURL. We could determine the hash by other means for example many binaries are released with a corresponding hash from the developer which can be acquired from the developer’s website.</p>\n\n<pre><code class=\"language-term\">$ cat /usr/bin/curl | sha256sum \n9a43cb726fef31f272333b236ff1fde4beab363af54d0bc99c304450065d9c96\n</code></pre>\n\n<p>With this information, we can now populate our config file for Terrier:</p>\n\n<pre><code class=\"language-yaml\">mode: image\nimage: myImage.tar\nfiles:\n  - name: '/usr/bin/curl'\n    hashes:\n      - hash: '9a43cb726fef31f272333b236ff1fde4beab363af54d0bc99c304450065d9c96'\n</code></pre>\n\n<p>We’ve saved the above config as <code>cfg.yml</code> and when we run Terrier with this config, we get the following output:</p>\n\n<pre><code class=\"language-term\">$ ./terrier\n[+] Loading config:  cfg.yml\n[+] Analysing Image\n[+] Docker Image Source:  myImage.tar\n[*] Inspecting Layer:  34a9e0f17132202a82565578a3c2dae1486bb198cde76928c8c2c5c461e11ccf\n[*] Inspecting Layer:  34a9e0f17132202a82565578a3c2dae1486bb198cde76928c8c2c5c461e11ccf\n[*] Inspecting Layer:  6539a80dd09da08132a525494ff97e92f4148d413e7c48b3583883fda8a40560\n[*] Inspecting Layer:  6539a80dd09da08132a525494ff97e92f4148d413e7c48b3583883fda8a40560\n[*] Inspecting Layer:  6d2d61c78a65b6e6c82b751a38727da355d59194167b28b3f8def198cd116759\n[*] Inspecting Layer:  6d2d61c78a65b6e6c82b751a38727da355d59194167b28b3f8def198cd116759\n[*] Inspecting Layer:  a6e646c34d2d2c2f4ab7db95e4c9f128721f63c905f107887839d3256f1288e1\n[*] Inspecting Layer:  a6e646c34d2d2c2f4ab7db95e4c9f128721f63c905f107887839d3256f1288e1\n[*] Inspecting Layer:  aefc8f0c87a14230e30e510915cbbe13ebcabd611e68db02b050b6ceccf9c545\n[*] Inspecting Layer:  aefc8f0c87a14230e30e510915cbbe13ebcabd611e68db02b050b6ceccf9c545\n[*] Inspecting Layer:  d4468fff8d0f28d87d48f51fc0a6afd4b38946bbbe91480919ebfdd55e43ce8c\n[*] Inspecting Layer:  d4468fff8d0f28d87d48f51fc0a6afd4b38946bbbe91480919ebfdd55e43ce8c\n[*] Inspecting Layer:  dbf9da5e4e5e1ecf9c71452f6b67b2b0225cec310a20891cc5dedbfd4ead667c\n[*] Inspecting Layer:  dbf9da5e4e5e1ecf9c71452f6b67b2b0225cec310a20891cc5dedbfd4ead667c\n[!] All components were identified: (1/1)\n[!] All components were identified and verified: (1/1)\n$ echo $?\n0\n</code></pre>\n\n<p>The output above indicates that the file <code>/usr/bin/curl</code> was successfully identified and verified, meaning that the image contained a file at the location <code>/usr/bin/curl</code> and that the SHA256 of that file matched the hash we provided in the config. Terrier also makes use of return codes and if we analyse the return code from the output above, we can see that the value is <code>0</code> which indicates a success. If Terrier cannot identify or verify all the provided files, a return code of <code>1</code> is returned which indicates a failure. The setting of return codes is particularly useful in testing environments or CI/CD environments.</p>\n\n<p>We can also run Terrier with verbose mode enable to get more information:</p>\n\n<pre><code class=\"language-term\">$ ./terrier \n[+] Loading config:  cfg.yml\n[+] Analysing Image\n[+] Docker Image Source:  myImage.tar\n[*] Inspecting Layer:  34a9e0f17132202a82565578a3c2dae1486bb198cde76928c8c2c5c461e11ccf\n[*] Inspecting Layer:  6539a80dd09da08132a525494ff97e92f4148d413e7c48b3583883fda8a40560\n        [!] Identified  instance of '/usr/bin/curl' at: 6539a80dd09da08132a525494ff97e92f4148d413e7c48b3583883fda8a40560/usr/bin/curl \n        [!] Verified matching instance of '/usr/bin/curl' at: 6539a80dd09da08132a525494ff97e92f4148d413e7c48b3583883fda8a40560/usr/bin/curl with hash: 9a43cb726fef31f272333b236ff1fde4beab363af54d0bc99c304450065d9c96\n[*] Inspecting Layer:  6d2d61c78a65b6e6c82b751a38727da355d59194167b28b3f8def198cd116759\n[*] Inspecting Layer:  a6e646c34d2d2c2f4ab7db95e4c9f128721f63c905f107887839d3256f1288e1\n[*] Inspecting Layer:  aefc8f0c87a14230e30e510915cbbe13ebcabd611e68db02b050b6ceccf9c545\n[*] Inspecting Layer:  d4468fff8d0f28d87d48f51fc0a6afd4b38946bbbe91480919ebfdd55e43ce8c\n[*] Inspecting Layer:  dbf9da5e4e5e1ecf9c71452f6b67b2b0225cec310a20891cc5dedbfd4ead667c\n[!] All components were identified: (1/1)\n[!] All components were identified and verified: (1/1)\n</code></pre>\n\n<p>The output above provides some more detailed information such as which layer the cURL files was located at. If you wanted more information, you could enable the <strong>veryveryverbose</strong> option in the config file but beware, this is a lot of output and grep will be your friend.</p>\n\n<p>There is no limit for how many hashes you can specify for a file. This can be useful for when you want to allow more than one version of a specific file i.e multiple versions of cURL. An example config of multiple hashes for a file might look like:</p>\n\n<pre><code class=\"language-yaml\">mode: image\nimage: myImage.tar\nfiles:\n  - name: '/usr/bin/curl'\n    hashes:\n      - hash: '9a43cb726fef31f272333b236ff1fde4beab363af54d0bc99c304450065d9c96'\n      - hash: 'aefc8f0c87a14230e30e510915cbbe13ebcabd611e68db02b050b6ceccf9c545'\n      - hash: '6d2d61c78a65b6e6c82b751a38727da355d59194167b28b3f8def198cd116759'\n      - hash: 'd4468fff8d0f28d87d48f51fc0a6afd4b38946bbbe91480919ebfdd55e43ce8c'\n</code></pre>\n\n<p>The config above allows Terrier to verify if the identified cURL instance is one of the provided hashes. There is also no limit for the amount of files Terrier can attempt to identify and verify.</p>\n\n<p>Terrier’s Github repo also contains a useful script called <code>convertSHA.sh</code> which can be used to convert a list of SHA256 hashes and filenames into a Terrier config file. This is useful when converting the output from other tools into a Terrier friendly format. For example, we could have the following contents of a file:</p>\n\n<pre><code>8946690bfe12308e253054ea658b1552c02b67445763439d1165c512c4bc240d ./bin/uname\n6de8254cfd49543097ae946c303602ffd5899b2c88ec27cfcd86d786f95a1e92 ./bin/gzexe\n74ff9700d623415bc866c013a1d8e898c2096ec4750adcb7cd0c853b4ce11c04 ./bin/wdctl\n61c779de6f1b9220cdedd7dfee1fa4fb44a4777fff7bd48d12c21efb87009877 ./bin/dmesg\n7bdde142dc5cb004ab82f55adba0c56fc78430a6f6b23afd33be491d4c7c238b ./bin/which\n3ed46bd8b4d137cad2830974a78df8d6b1d28de491d7a23d305ad58742a07120 ./bin/mknod\ne8ca998df296413624b2bcf92a31ee3b9852f7590f759cc4a8814d3e9046f1eb ./bin/mv\na91d40b349e2bccd3c5fe79664e70649ef0354b9f8bd4658f8c164f194b53d0f ./bin/chown\n091abe52520c96a75cf7d4ff38796fc878cd62c3a75a3fd8161aa3df1e26bebd ./bin/uncompress\nc5ebd611260a9057144fd1d7de48dbefc14e16240895cb896034ae05a94b5750 ./bin/echo\nd4ba9ffb5f396a2584fec1ca878930b677196be21aee16ee6093eb9f0a93bf8f ./bin/df\n5fb515ff832650b2a25aeb9c21f881ca2fa486900e736dfa727a5442a6de83e5 ./bin/tar\n6936c9aa8e17781410f286bb1cbc35b5548ea4e7604c1379dc8e159d91a0193d ./bin/zforce\n8d641329ea7f93b1caf031b70e2a0a3288c49a55c18d8ba86cc534eaa166ec2e ./bin/gzip\n0c1a1f53763ab668fb085327cdd298b4a0c1bf2f0b51b912aa7bc15392cd09e7 ./bin/su\n20c358f7ee877a3fd2138ecce98fada08354810b3e9a0e849631851f92d09cc4 ./bin/bzexe\n01764d96697b060b2a449769073b7cf2df61b5cb604937e39dd7a47017e92ee0 ./bin/znew\n0d1a106dc28c3c41b181d3ba2fc52086ede4e706153e22879e60e7663d2f6aad ./bin/login\nfb130bda68f6a56e2c2edc3f7d5b805fd9dcfbcc26fb123a693b516a83cfb141 ./bin/dir\n0e7ca63849eebc9ea476ea1fefab05e60b0ac8066f73c7d58e8ff607c941f212 ./bin/bzmore\n14dc8106ec64c9e2a7c9430e1d0bef170aaad0f5f7f683c1c1810b466cdf5079 ./bin/zless\n9cf4cda0f73875032436f7d5c457271f235e59c968c1c101d19fc7bf137e6e37 ./bin/chmod\nc5f12f157b605b1141e6f97796732247a26150a0a019328d69095e9760b42e38 ./bin/sleep\nb9711301d3ab42575597d8a1c015f49fddba9a7ea9934e11d38b9ff5248503a8 ./bin/zfgrep\n0b2840eaf05bb6802400cc5fa793e8c7e58d6198334171c694a67417c687ffc7 ./bin/stty\nd9393d0eca1de788628ad0961b74ec7a648709b24423371b208ae525f60bbdad ./bin/bunzip2\nd2a56d64199e674454d2132679c0883779d43568cd4c04c14d0ea0e1307334cf ./bin/mkdir\n1c48ade64b96409e6773d2c5c771f3b3c5acec65a15980d8dca6b1efd3f95969 ./bin/cat\n09198e56abd1037352418279eb51898ab71cc733642b50bcf69d8a723602841e ./bin/true\n97f3993ead63a1ce0f6a48cda92d6655ffe210242fe057b8803506b57c99b7bc ./bin/zdiff\n0d06f9724af41b13cdacea133530b9129a48450230feef9632d53d5bbb837c8c ./bin/ls\nda2da96324108bbe297a75e8ebfcb2400959bffcdaa4c88b797c4d0ce0c94c50 ./bin/zegrep\n</code></pre>\n\n<p>The file contents above are trusted SHA256 hashes for specific files. If we would like to use this list for ensuring that a particular image is making use of the files listed above, we can do the following:</p>\n\n<pre><code class=\"language-term\">$ ./convertSHA.sh trustedhashes.txt terrier.yml\n</code></pre>\n\n<p>The script above takes the input file <code>trustedhashes.txt</code> which contains our trusted hashes listed above and converts them into a Terrier friendly config file called <code>terrier.yml</code> which looks like the following:</p>\n\n<pre><code class=\"language-yaml\">mode: image\nimage: myImage.tar\nfiles:\n  - name: '/bin/uname'\n    hashes:\n       - hash: '8946690bfe12308e253054ea658b1552c02b67445763439d1165c512c4bc240d'\n  - name: '/bin/gzexe'\n    hashes:\n       - hash: '6de8254cfd49543097ae946c303602ffd5899b2c88ec27cfcd86d786f95a1e92'\n  - name: '/bin/wdctl'\n    hashes:\n       - hash: '74ff9700d623415bc866c013a1d8e898c2096ec4750adcb7cd0c853b4ce11c04'\n  - name: '/bin/dmesg'\n    hashes:\n       - hash: '61c779de6f1b9220cdedd7dfee1fa4fb44a4777fff7bd48d12c21efb87009877'\n  - name: '/bin/which'\n    hashes:\n       - hash: '7bdde142dc5cb004ab82f55adba0c56fc78430a6f6b23afd33be491d4c7c238b'\n  - name: '/bin/mknod'\n</code></pre>\n\n<p>The config file <code>terrier.yml</code> is ready to be used:</p>\n\n<pre><code class=\"language-term\">$ ./terrier -cfg=terrier.yml\n[+] Loading config:  terrier.yml\n[+] Analysing Image\n[+] Docker Image Source:  myImage.tar\n[*] Inspecting Layer:  34a9e0f17132202a82565578a3c2dae1486bb198cde76928c8c2c5c461e11ccf\n[*] Inspecting Layer:  6539a80dd09da08132a525494ff97e92f4148d413e7c48b3583883fda8a40560\n[*] Inspecting Layer:  6d2d61c78a65b6e6c82b751a38727da355d59194167b28b3f8def198cd116759\n[*] Inspecting Layer:  a6e646c34d2d2c2f4ab7db95e4c9f128721f63c905f107887839d3256f1288e1\n[*] Inspecting Layer:  aefc8f0c87a14230e30e510915cbbe13ebcabd611e68db02b050b6ceccf9c545\n[*] Inspecting Layer:  d4468fff8d0f28d87d48f51fc0a6afd4b38946bbbe91480919ebfdd55e43ce8c\n[*] Inspecting Layer:  dbf9da5e4e5e1ecf9c71452f6b67b2b0225cec310a20891cc5dedbfd4ead667c\n[!] Not all components were identifed: (4/31)\n[!] Component not identified:  /bin/uncompress\n[!] Component not identified:  /bin/bzexe\n[!] Component not identified:  /bin/bzmore\n[!] Component not identified:  /bin/bunzip2\n$ echo $?\n1\n</code></pre>\n\n<p>As we can see from the output above, Terrier was unable to identify 4/31 of the components provided in the config. The return code is also 1 which indicates a failure. If we were to remove the components that are not in the provided image, the output from the previous command would look like the following:</p>\n\n<pre><code class=\"language-term\">$ ./terrier -cfg=terrier.yml\n[+] Loading config: terrier.yml\n[+] Analysing Image\n[+] Docker Image Source: myImage.tar\n[*] Inspecting Layer: 34a9e0f17132202a82565578a3c2dae1486bb198cde76928c8c2c5c461e11ccf\n[*] Inspecting Layer: 6539a80dd09da08132a525494ff97e92f4148d413e7c48b3583883fda8a40560\n[*] Inspecting Layer: 6d2d61c78a65b6e6c82b751a38727da355d59194167b28b3f8def198cd116759\n[*] Inspecting Layer: a6e646c34d2d2c2f4ab7db95e4c9f128721f63c905f107887839d3256f1288e1\n[*] Inspecting Layer: aefc8f0c87a14230e30e510915cbbe13ebcabd611e68db02b050b6ceccf9c545\n[*] Inspecting Layer: d4468fff8d0f28d87d48f51fc0a6afd4b38946bbbe91480919ebfdd55e43ce8c\n[*] Inspecting Layer: dbf9da5e4e5e1ecf9c71452f6b67b2b0225cec310a20891cc5dedbfd4ead667c\n[!] All components were identified: (27/27)\n[!] Not all components were verified: (26/27)\n[!] Component not verified: /bin/cat\n[!] Component not verified: /bin/chmod\n[!] Component not verified: /bin/chown\n[!] Component not verified: /bin/df\n[!] Component not verified: /bin/dir\n[!] Component not verified: /bin/dmesg\n[!] Component not verified: /bin/echo\n[!] Component not verified: /bin/gzexe\n[!] Component not verified: /bin/gzip\n[!] Component not verified: /bin/login\n[!] Component not verified: /bin/ls\n[!] Component not verified: /bin/mkdir\n[!] Component not verified: /bin/mknod\n[!] Component not verified: /bin/mv\n[!] Component not verified: /bin/sleep\n[!] Component not verified: /bin/stty\n[!] Component not verified: /bin/su\n[!] Component not verified: /bin/tar\n[!] Component not verified: /bin/true\n[!] Component not verified: /bin/uname\n[!] Component not verified: /bin/wdctl\n[!] Component not verified: /bin/zdiff\n[!] Component not verified: /bin/zfgrep\n[!] Component not verified: /bin/zforce\n[!] Component not verified: /bin/zless\n[!] Component not verified: /bin/znew\n$ echo $?\n1\n</code></pre>\n\n<p>The output above indicates that Terrier was able to identify all the components provided but many were not verifiable, the hashes did not match and once again, the return code is <code>1</code> to indicate this failure.</p>\n<h3 class=\"anchored\">\n  <a name=\"identifying-files-in-containers\" href=\"#identifying-files-in-containers\">Identifying files in containers</a>\n</h3>\n\n<p>The previous sections focused on identifying files in images, which can be referred to as a form of “static analysis,” however it is also possible to perform this analysis to running containers. In order to do this, you need the following:</p>\n\n<ol>\n<li>Location of the container’s <code>merged</code> folder </li>\n<li>A SHA256 hash of a specific file/s</li>\n</ol>\n\n<p>The <code>merged</code> folder is Docker specific, in this case, we are using it because this is where the contents of the Docker container reside, this might be another location if it were LXC.</p>\n\n<p>The location of the container’s <code>merged</code> folder can be determined by running the following commands. First obtain the container’s ID:</p>\n\n<pre><code class=\"language-term\">$ docker ps\nCONTAINER ID        IMAGE                    COMMAND               CREATED             STATUS              PORTS               NAMES\nb9e676fd7b09        golang                   \"bash\"                20 hours ago        Up 20 hours                             cocky_robinson\n</code></pre>\n\n<p>Once you have the container’s ID, you can run the following command which will help you identify the location of the container’s <code>merged</code> folder on the underlying host.</p>\n\n<pre><code class=\"language-term\">$ docker exec b9e676fd7b09 mount | grep diff\noverlay on / type overlay (rw,relatime,lowerdir=/var/lib/docker/overlay2/l/7ZDEFE6PX4C3I3LGIGGI5MWQD4:\n/var/lib/docker/overlay2/l/EZNIFFIXOVO2GIT5PTBI754HC4:/var/lib/docker/overlay2/l/UWKXP76FVZULHGRKZMVYJHY5IK:\n/var/lib/docker/overlay2/l/DTQQUTRXU4ZLLQTMACWMJYNRTH:/var/lib/docker/overlay2/l/R6DE2RY63EJABTON6HVSFRFICC:\n/var/lib/docker/overlay2/l/U4JNTFLQEKMFHVEQJ5BQDLL7NO:/var/lib/docker/overlay2/l/FEBURQY25XGHJNPSFY5EEPCFKA:\n/var/lib/docker/overlay2/l/ICNMAZ44JY5WZQTFMYY4VV6OOZ,\nupperdir=/var/lib/docker/overlay2/04f84ddd30a7df7cd3f8b1edeb4fb89d476ed84cf3f76d367e4ebf22cd1978a4/diff,\nworkdir=/var/lib/docker/overlay2/04f84ddd30a7df7cd3f8b1edeb4fb89d476ed84cf3f76d367e4ebf22cd1978a4/work)          \n</code></pre>\n\n<p>From the results above, we are interested in two entries, <code>upperdir</code> and <code>workdir</code> because these two entries will provide us with the path to the container’s <code>merged</code> folder. From the results above, we can determine that the container’s <code>merged</code> directory is located at <code>/var/lib/docker/overlay2/04f84ddd30a7df7cd3f8b1edeb4fb89d476ed84cf3f76d367e4ebf22cd1978a4/</code> on the underlying host.</p>\n\n<p>Now that we have the location, we need some files to identify and in this case, we are going to reuse the SHA256 hashes from the previous section. Let’s now go ahead and populate our Terrier configuration with this new information.</p>\n\n<pre><code class=\"language-yaml\">mode: container\npath: merged\n#image: myImage.tar\n\nhashes:\n    - hash: '82bce4b98d7aaeb4f841a36f7141d540bb049f89219f9e377245a91dd3ff92dd'\n    - hash: 'cf734865dd344cd9b0b349cdcecd83f79a751150b5fd4926f976adddb93d902c'\n</code></pre>\n\n<p>The configuration above shows that we have changed the <code>mode</code> from <code>image</code> to <code>container</code> and we have added the <code>path</code> to our <code>merged</code> folder. We have kept the two hashes from the previous section. </p>\n\n<p>If we run Terrier with this configuration from the location <code>/var/lib/docker/overlay2/04f84ddd30a7df7cd3f8b1edeb4fb89d476ed84cf3f76d367e4ebf22cd1978a4/</code>, we get the following output:</p>\n\n<pre><code class=\"language-term\">$ ./terrier\n[+] Loading config: cfg.yml\n[+] Analysing Container\n[!] Found matching instance of '82bce4b98d7aaeb4f841a36f7141d540bb049f89219f9e377245a91dd3ff92dd' at: merged/usr/local/go/bin/go with hash:82bce4b98d7aaeb4f841a36f7141d540bb049f89219f9e377245a91dd3ff92dd\n</code></pre>\n\n<p>From the output above, we know that the container (<code>b9e676fd7b09</code>) does not contain the malicious Python package but it does contain an instance of the Golang binary which is located at <code>merged/usr/local/go/bin/go</code>.</p>\n<h3 class=\"anchored\">\n  <a name=\"identifying-and-verifying-specific-files-in-containers\" href=\"#identifying-and-verifying-specific-files-in-containers\">Identifying and verifying specific files in containers</a>\n</h3>\n\n<p>And as you might have guessed, Terrier can also be used to verify and identify files at specific paths in containers. To do this, we need the following:</p>\n\n<ol>\n<li>Location of the container’s <code>merged</code> folder </li>\n<li>A SHA256 hash of a specific file/s</li>\n<li>The path and name of the specific file/s</li>\n</ol>\n\n<p>The points above can be determined using the same procedures described in the previous sections. Below is an example Terrier config file that we could use to identify and verify components in a running container:</p>\n\n<pre><code class=\"language-yaml\">mode: container\npath: merged\nverbose: true\nfiles:\n  - name: '/usr/bin/curl'\n    hashes:\n      - hash: '9a43cb726fef31f272333b236ff1fde4beab363af54d0bc99c304450065d9c96'\n  - name: '/usr/local/go/bin/go'\n    hashes:\n      - hash: '82bce4b98d7aaeb4f841a36f7141d540bb049f89219f9e377245a91dd3ff92dd'\n</code></pre>\n\n<p>If we run Terrier with the above config, we get the following output:</p>\n\n<pre><code class=\"language-term\">$ ./terrier\n[+] Loading config: cfg.yml\n[+] Analysing Container\n[!] Found matching instance of '/usr/bin/curl' at: merged/usr/bin/curl with hash:9a43cb726fef31f272333b236ff1fde4beab363af54d0bc99c304450065d9c96\n[!] Found matching instance of '/usr/local/go/bin/go' at: merged/usr/local/go/bin/go with hash:82bce4b98d7aaeb4f841a36f7141d540bb049f89219f9e377245a91\ndd3ff92dd\n[!] All components were identified: (2/2)\n[!] All components were identified and verified: (2/2)\n$ echo $?\n0\n</code></pre>\n\n<p>From the output above, we can see that Terrier was able to successfully identify and verify all the files in the running container. The return code is also <code>0</code> which indicates a successful execution of Terrier.</p>\n<h3 class=\"anchored\">\n  <a name=\"using-terrier-with-ci-cd\" href=\"#using-terrier-with-ci-cd\">Using Terrier with CI/CD</a>\n</h3>\n\n<p>In addition to Terrier being used as a standalone CLI tool, Terrier can also be integrated easily with existing CI/CD technologies such as GitHub Actions and CircleCI. Below are two example configurations that show how Terrier can be used to identify and verify certain components of Docker files in a pipeline and prevent the pipeline from continuing if all verifications do not pass. This can be seen as an extra mitigation for supply-chain attacks.</p>\n\n<p>Below is a CircleCI example configuration using Terrier to verify the contents of an image.</p>\n\n<pre><code class=\"language-yaml\">version: 2\njobs:\nbuild:\n  machine: true\n  steps:\n    - checkout\n    - run:\n       name: Build Docker Image\n       command: |\n             docker build -t builditall .\n    - run:\n       name: Save Docker Image Locally\n       command: |\n             docker save builditall -o builditall.tar\n    - run:\n       name: Verify Docker Image Binaries\n       command: |\n             ./terrier\n</code></pre>\n\n<p>Below is a Github Actions example configuration using Terrier to verify the contents of an image.</p>\n\n<pre><code class=\"language-yaml\">name: Go\non: [push]\njobs:\nbuild:\n  name: Build\n  runs-on: ubuntu-latest\n  steps:\n\n  - name: Get Code\n    uses: actions/checkout@master\n  - name: Build Docker Image\n    run: |\n      docker build -t builditall .\n  - name: Save Docker Image Locally\n    run: |\n      docker save builditall -o builditall.tar\n  - name: Verify Docker Image Binaries\n    run: |\n      ./terrier\n</code></pre>\n<h2 class=\"anchored\">\n  <a name=\"conclusion\" href=\"#conclusion\">Conclusion</a>\n</h2>\n\n<p>In this blog post, we have looked at how to perform multiple actions on Docker (and OCI) containers and images via Terrier. The actions performed allowed us to identify specific files according to their hashes in images and containers. The actions performed have also allowed us to identify and verify multiple components in images and containers. These actions performed by Terrier are useful when attempting to prevent certain supply-chain attacks.</p>\n\n<p>We have also seen how Terrier can be used in a DevOps pipeline via GitHub Actions and CircleCI.</p>\n\n<p>Learn more about Terrier on GitHub at <a href=\"https://github.com/heroku/terrier\">https://github.com/heroku/terrier</a>.</p>","PublishedAt":"2020-01-14 21:30:00+00:00","OriginURL":"https://blog.heroku.com/terrier-open-source-identifying-analyzing-containers","SourceName":"Heroku"}},{"node":{"ID":644,"Title":"Makefiles in 2019 — Why They Still Matter","Description":"Make was created in 1976 by Stuart Feldman at Bell Labs to help build C programs. But how can this 40+ year old piece of software help us develop and maintain our ever-growing amount of cloud-based microservices?","PublishedAt":"2019-12-20 00:00:00+00:00","OriginURL":"https://tech.trivago.com/post/2019-12-20-makefiles-in-2019/","SourceName":"Trivago"}},{"node":{"ID":367,"Title":"Know Your Database Types","Description":"<p><em>This blog post is adapted from <a href=\"https://www.youtube.com/watch?v=7QgNDhtaQMQ&amp;t=16m07s\">a lightning talk</a> by Ben Fritsch at Ruby on Ice 2019.</em></p>\n\n<p>There can be a number of reasons why your application performs poorly, but perhaps none are as challenging as issues stemming from your database. If your database's response times tend to be high, it can cause a strain on your network and your users’ patience. The usual culprit for a slow database is an inefficient query being executed somewhere in your application logic. Usually, you can implement a fix in a number of common ways, by:</p>\n\n<ul>\n<li>\n<a href=\"https://jaketrent.com/post/find-kill-locks-postgres/\">reducing the amount of open locks</a> (or more detail about database lock debugging in this other blog post by Heroku Engineer Richard Schneeman, <a href=\"https://blog.heroku.com/curious-case-table-locking-update-query\">The Curious Case of the Table-Locking UPDATE Query</a>)</li>\n<li><a href=\"http://www.postgresqltutorial.com/postgresql-indexes/postgresql-create-index/\">defining indexes for faster <code>WHERE</code> lookups</a></li>\n<li><a href=\"https://www.datadoghq.com/blog/100x-faster-postgres-performance-by-changing-1-line/\">rewriting the query to use more efficient statements</a></li>\n</ul>\n\n<p>...But what if your problem isn't resolved by any of these actions?</p>\n\n<p>Let's talk about a problem that can occur from the underlying database schema, and how to solve it.</p>\n\n<div class=\"embedded-video-wrapper\">\n<iframe title=\"Know Your Database Types\" src=\"https://www.youtube-nocookie.com/embed/7QgNDhtaQMQ?start=967\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n<h2 class=\"anchored\">\n  <a name=\"the-problem\" href=\"#the-problem\">The problem</a>\n</h2>\n\n<p>Consider this PostgreSQL database schema:</p>\n\n<pre><code class=\"language-sql\">CREATE TABLE table (\n  app_uuid uuid NOT NULL,\n  json_field json\n)\n</code></pre>\n\n<p>Postgres lets you mark a column's data type as <code>json</code>. This, as opposed to simply unstructured <code>text</code>, allows for more flexible querying and data validation.</p>\n\n<p>As part of our application’s behavior, we receive and store payloads that look like this:</p>\n\n<pre><code class=\"language-json\">{\"data\": \"very large string\", \"url\": \"https://heroku.com\"}\n</code></pre>\n\n<p>If I want to fetch the <code>url</code> values for a specific <code>app_uuid</code>, I would write a query like this:</p>\n\n<pre><code class=\"language-sql\">SELECT (table.large_json_field -&gt;&gt; 'url'::text) AS url,\nFROM table\nWHERE (\"app_uuid\" = $app_uuid)\nORDER BY  \"created_at\" DESC LIMIT 200;\n</code></pre>\n\n<p>The average execution time of this query was 10ms, although there were outliers reaching as high as 1200ms. This was becoming unacceptable, and I dug in to see exactly what was going on.</p>\n<h2 class=\"anchored\">\n  <a name=\"the-investigation\" href=\"#the-investigation\">The investigation</a>\n</h2>\n\n<p>If you need to look into slow queries, the <a href=\"https://www.postgresql.org/docs/12/sql-explain.html\"><code>EXPLAIN ANALYZE</code></a> statement is a good place to start. It will provide you with some internal metrics about how your query is planned and executed. I learned that there is also the option to use <code>EXPLAIN (ANALYZE, BUFFERS)</code>, which looks like this:</p>\n\n<pre><code class=\"language-sql\">EXPLAIN (ANALYZE, BUFFERS)\nSELECT (table.large_json_field -&gt;&gt; 'url'::text) AS url,\nFROM table\nWHERE (\"app_uuid\" = $app_uuid)\nORDER BY  \"created_at\" DESC LIMIT 200;\n</code></pre>\n\n<p><code>BUFFERS</code> provides stats on the I/O subsystem of Postgres, identifying whether information is being loaded from cache (memory) or directly from disk. It is much slower for Postgres to read data outside of the cache.</p>\n\n<p>The result of that informative query was the following information:</p>\n\n<pre><code>-&gt;   Index Cond: (app_uuid = $app_uuid::uuid)\n        Buffers: shared hit=7106\n\nPlanning time: 0.187 ms\nExecution time: 1141.296 ms\n</code></pre>\n\n<p>By default, Postgres has <a href=\"https://www.cybertec-postgresql.com/en/postgresql-block-sizes-getting-started/\">a block size of 8kb</a>. According to the Postgres planner, the query to fetch a <code>url</code> key uses over 7,100 blocks, which means that we've loaded (and discarded) about 60MB of JSON data (7,106 * 8kb), just to fetch the URLs we wanted. Even though the query took less than a millisecond to plan, it takes over a second to execute!</p>\n<h2 class=\"anchored\">\n  <a name=\"the-solution\" href=\"#the-solution\">The solution</a>\n</h2>\n\n<p>The fix for this is simple and direct. Rather than relying on a single <code>json</code> column, I converted it into two separate <code>text</code> fields: one for <code>data</code> and one for <code>url</code>. This brought the query time down from 1200ms to 10ms as we were able to scope our query to the exact piece of information we needed.</p>\n\n<p>We realized that in this use case, storing JSON was no longer a requirement for us. When we started building this feature about three or four years ago, a <code>json</code> data type was the best choice we had, given the information we had. Our system hasn't changed, but our understanding of how the system was being used did. We had been storing the same JSON structure for years, but we were essentially storing unstructured data in our database. As a result of our database design, reading information became expensive for queries which only required a small piece of information.</p>\n\n<p>I encourage you to audit your database schema for columns with data types that are no longer necessary. As our application and knowledge of users' behaviors evolves, so too should our database structure. Of course, don't change tables just for the sake of changing something! We were able to continue operating with this problem for years without any tremendous strain on our systems. If it's not a problem, don't fix it.</p>\n\n<p>Want to learn more about Postgres? Check out another article we wrote on dev.to: <a href=\"https://dev.to/heroku/postgres-is-underrated-it-handles-more-than-you-think-4ff3\">Postgres Is Underrated—It Handles More than You Think</a>.</p>","PublishedAt":"2019-12-18 18:07:49+00:00","OriginURL":"https://blog.heroku.com/know-your-database-types","SourceName":"Heroku"}}]}},"pageContext":{"limit":30,"skip":4260,"numPages":158,"currentPage":143}},"staticQueryHashes":["3649515864"]}