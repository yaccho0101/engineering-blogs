{"componentChunkName":"component---src-templates-blog-list-tsx","path":"/page/133","result":{"data":{"allPost":{"edges":[{"node":{"ID":422,"Title":"Speed Matters, But It Isn’t Everything","Description":"<p>Photo by Jonathan Chng on Unsplash Over the last few years at Indeed, we noticed our public-facing web applications were loading more slowly. We tested numerous ways to improve performance. Some were very successful, others were not. We improved loading speeds by 40% but we also learned that speed is not always the most important [&#8230;]</p>\n<p> </p>\n","PublishedAt":"2022-01-31 21:43:37+00:00","OriginURL":"https://engineering.indeedblog.com/blog/2022/01/speed-matters/","SourceName":"Indeed"}},{"node":{"ID":431,"Title":"How to build a Jamstack application in Postman","Description":"","PublishedAt":"2022-01-31 16:07:46+00:00","OriginURL":"https://medium.com/better-practices/how-to-build-a-jamstack-application-in-postman-99aba45a572b?source=rss----410f2fbc015d---4","SourceName":"Postman"}},{"node":{"ID":1209,"Title":"Announcing Go 1.18 Beta 2","Description":"Go 1.18 Beta 2 is our second preview of Go 1.18. Please try it and let us know if you find problems.","PublishedAt":"2022-01-31 00:00:00+00:00","OriginURL":"https://go.dev/blog/go1.18beta2","SourceName":"The Go Blog"}},{"node":{"ID":1030,"Title":"DARWIN: Data Science and Artificial Intelligence Workbench at LinkedIn","Description":"Co-authors: Varun Saxena, Harikumar Velayutham, and Balamurugan Gangadharan LinkedIn is the largest global professional network and generates massive amounts of high-quality data. Our data infrastructure scales to store exabytes of data; data analysts, data scientists, and AI engineers then use this data to power several LinkedIn products and the platform as a whole, ranging from job recommendations to each member’s personalized feed. Over the last few years, data scientists and AI engineers at LinkedIn have been using various tools for interacting with data, via different query and [&#8230;]","PublishedAt":"2022-01-28 22:22:00+00:00","OriginURL":"https://engineering.linkedin.com/blog/2022/darwin--data-science-and-artificial-intelligence-workbench-at-li","SourceName":"Linkedin"}},{"node":{"ID":230,"Title":"Why Choose a Hybrid Data Cloud in Financial Services?","Description":"<p>The role of Business Strategy, Regulation and Data Access in Defining your Enterprise Data Cloud</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.cloudera.com/why-choose-a-hybrid-data-cloud-in-financial-services/\">Why Choose a Hybrid Data Cloud in Financial Services?</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.cloudera.com\">Cloudera Blog</a>.</p>\n","PublishedAt":"2022-01-28 16:03:39+00:00","OriginURL":"https://blog.cloudera.com/why-choose-a-hybrid-data-cloud-in-financial-services/","SourceName":"Cloudera"}},{"node":{"ID":1088,"Title":"Introduction of the CI/CD team","Description":"<p>This article is part of the Developer Productivity Engineering Camp blog series, brought to you by Yuji Kazama from the CI/CD team. Introduction Hello, I am Yuji Kazama, the Engineering Manager of the Continuous Integration(CI)/Continuous Delivery(CD) team. The CI/CD team is one of the teams in the Developer Productivity Engineering Camp. In this article, I [&hellip;]</p>\n","PublishedAt":"2022-01-28 15:26:20+00:00","OriginURL":"https://engineering.mercari.com/en/blog/entry/20220121-introduction-of-the-ci-cd-team/","SourceName":"Mercari"}},{"node":{"ID":37,"Title":"Data retention and cleanup in Asana’s Data Lake","Description":"<img width=\"1024\" height=\"655\" src=\"https://blog.asana.com/wp-content/post-images/06-Distributed-Teams-02-1024x655.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"Data Lake\" loading=\"lazy\" style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://blog.asana.com/wp-content/post-images/06-Distributed-Teams-02-1024x655.png 1024w, https://blog.asana.com/wp-content/post-images/06-Distributed-Teams-02-520x333.png 520w, https://blog.asana.com/wp-content/post-images/06-Distributed-Teams-02-1536x983.png 1536w, https://blog.asana.com/wp-content/post-images/06-Distributed-Teams-02.png 1607w, https://blog.asana.com/wp-content/post-images/06-Distributed-Teams-02-520x333@2x.png 1040w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /><p>Having configurable data retention is an important aspect of any data storage system, but there are a number of factors to consider in order to make it happen. Data retention is important because it can help limit the exposure and propagation of sensitive data, it can help to avoid the use of data that is [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.asana.com/2022/01/data-lake/\">Data retention and cleanup in Asana&#8217;s Data&nbsp;Lake</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.asana.com\">The Asana Blog</a>.</p>\n","PublishedAt":"2022-01-28 04:15:08+00:00","OriginURL":"https://blog.asana.com/2022/01/data-lake/","SourceName":"Asana"}},{"node":{"ID":1089,"Title":"Kubernetes Configuration Management with CUE","Description":"<p>This article is a part of Developer Productivity Engineering Camp blog series, brought to you by Hideto Miki (@micnncim) from the Platform DX Team Preface The Platform Developer Experience (DX) team provides a ton of internal products for internal developers, most of whom develop microservices, to allow them to focus their business. The overview is [&hellip;]</p>\n","PublishedAt":"2022-01-27 20:06:25+00:00","OriginURL":"https://engineering.mercari.com/en/blog/entry/20220127-kubernetes-configuration-management-with-cue/","SourceName":"Mercari"}},{"node":{"ID":231,"Title":"Customizing Personal Lines Insurance with Location Data","Description":"<p>Embrace Location Data to Enhance Insurance Offerings and Drive Loyalty</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.cloudera.com/customizing-personal-lines-insurance-with-location-data/\">Customizing Personal Lines Insurance with Location Data</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.cloudera.com\">Cloudera Blog</a>.</p>\n","PublishedAt":"2022-01-27 14:02:10+00:00","OriginURL":"https://blog.cloudera.com/customizing-personal-lines-insurance-with-location-data/","SourceName":"Cloudera"}},{"node":{"ID":232,"Title":"96 Percent of Businesses Can’t Be Wrong: How Hybrid Cloud Came to Dominate the Data Sector","Description":"<p>According to 451 Research, 96% of enterprises are actively pursuing a hybrid IT strategy. Modern, real-time businesses require accelerated cycles of innovation that are expensive and difficult to maintain with legacy data platforms. Cloud technologies and respective service providers have evolved solutions to address these challenges.  The hybrid cloud’s premise—two data architectures fused together—gives companies [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.cloudera.com/96-percent-of-businesses-cant-be-wrong-how-hybrid-cloud-came-to-dominate-the-data-sector/\">96 Percent of Businesses Can’t Be Wrong: How Hybrid Cloud Came to Dominate the Data Sector</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.cloudera.com\">Cloudera Blog</a>.</p>\n","PublishedAt":"2022-01-26 15:58:49+00:00","OriginURL":"https://blog.cloudera.com/96-percent-of-businesses-cant-be-wrong-how-hybrid-cloud-came-to-dominate-the-data-sector/","SourceName":"Cloudera"}},{"node":{"ID":1090,"Title":"Shifting to Zero Touch Production","Description":"<p>Author: Dylan Lau (@aidiruu), Platform DX Team Zero Touch Production (ZTP) is a concept where all changes made to production are done by automation, safe proxies or audited break-glass systems. There are many kinds of production outages that stem from human error, such as: Configuration errors Script errors Running commands in the wrong environment ZTP [&hellip;]</p>\n","PublishedAt":"2022-01-26 14:00:47+00:00","OriginURL":"https://engineering.mercari.com/en/blog/entry/20220126-shifting-to-zero-touch-production/","SourceName":"Mercari"}},{"node":{"ID":233,"Title":"Make the Leap to AI Driven Data Applications","Description":"<p>It's Time to Look Forward</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.cloudera.com/its-time-to-look-forward/\">Make the Leap to AI Driven Data Applications</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.cloudera.com\">Cloudera Blog</a>.</p>\n","PublishedAt":"2022-01-25 21:33:23+00:00","OriginURL":"https://blog.cloudera.com/its-time-to-look-forward/","SourceName":"Cloudera"}},{"node":{"ID":1091,"Title":"Developer Experience at Mercari","Description":"<p>Author: @deeeeeeeet Platform Developer Experience (DX) team is one of the Developer Productivity Engineering Camp teams. It focuses on providing a state-of-the-art developer experience where product teams can take full end-to-end service ownership without any frictions so that they can deliver great products to Mercari customers faster and easier. In this blog post, in the [&hellip;]</p>\n","PublishedAt":"2022-01-25 19:08:20+00:00","OriginURL":"https://engineering.mercari.com/en/blog/entry/20220125-developer-experience-at-mercari/","SourceName":"Mercari"}},{"node":{"ID":759,"Title":"Cost Efficiency @ Scale in Big Data File Format","Description":"<p>&#160;</p>\n<h1><span style=\"font-weight: 400;\">Background</span></h1>\n<p><span style=\"font-weight: 400;\">Our </span><a href=\"https://eng.uber.com/uber-big-data-platform/\"><span style=\"font-weight: 400;\">Apache Hadoop<sup>® </sup></span><span style=\"font-weight: 400;\">based data platform </span></a><span style=\"font-weight: 400;\">ingests hundreds of petabytes of analytical data with minimum latency and stores it in a data lake built on top of the </span><a href=\"https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-hdfs/HdfsDesign.html\"><span style=\"font-weight: 400;\">Hadoop Distributed File System</span></a><span style=\"font-weight: 400;\"> (HDFS). </span><span style=\"font-weight: 400;\">We use Apache </span><a href=\"https://eng.uber.com/apache-hudi-graduation/\"><span style=\"font-weight: 400;\">Hudi</span></a>&#8230;</p>\n<p>The post <a rel=\"nofollow\" href=\"https://eng.uber.com/cost-efficiency-big-data/\">Cost Efficiency @ Scale in Big Data File Format</a> appeared first on <a rel=\"nofollow\" href=\"https://eng.uber.com\">Uber Engineering Blog</a>.</p>\n","PublishedAt":"2022-01-25 17:30:56+00:00","OriginURL":"https://eng.uber.com/cost-efficiency-big-data/","SourceName":"Uber"}},{"node":{"ID":522,"Title":"Netflix: A Culture of Learning","Description":"","PublishedAt":"2022-01-25 16:23:45+00:00","OriginURL":"https://netflixtechblog.com/netflix-a-culture-of-learning-394bc7d0f94c?source=rss----2615bd06b42e---4","SourceName":"Netflix"}},{"node":{"ID":234,"Title":"Data for Good","Description":"<p>Recognizing three organizations who have addressed some of the most challenging issues affecting society and the planet</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.cloudera.com/data-for-good/\">Data for Good</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.cloudera.com\">Cloudera Blog</a>.</p>\n","PublishedAt":"2022-01-24 14:00:33+00:00","OriginURL":"https://blog.cloudera.com/data-for-good/","SourceName":"Cloudera"}},{"node":{"ID":1092,"Title":"Observability-kit: Adventures of using CUE at scale","Description":"<p>This article is a part of Developer Productivity Engineering Camp blog series, brought to you by Harpratap (@harpratap) from the Platform Infra Team Preface In the increasingly config driven world of infrastructure (aka Infrastructure-as-Data) the decision of which Data Configuration Language to choose is a very important one. Yaml Hell is more than just a [&hellip;]</p>\n","PublishedAt":"2022-01-23 16:32:32+00:00","OriginURL":"https://engineering.mercari.com/en/blog/entry/20220122-adventures-of-using-cue-at-scale/","SourceName":"Mercari"}},{"node":{"ID":1093,"Title":"Securing Terraform monorepo CI","Description":"<p>This article is a part of Developer Productivity Engineering Camp blog series, brought to you by Daisuke FUJITA (@dtan4) from the Platform Infra Team. At Mercari, one of the core platform tenets is to manage all cloud infrastructure in declarative configurations. Our main cloud provider is Google Cloud Platform (GCP) and we use HashiCorp Terraform [&hellip;]</p>\n","PublishedAt":"2022-01-22 12:00:17+00:00","OriginURL":"https://engineering.mercari.com/en/blog/entry/20220121-securing-terraform-monorepo-ci/","SourceName":"Mercari"}},{"node":{"ID":235,"Title":"Security Reference Architecture Summary for Cloudera Data Platform","Description":"<p>The Four Security Engineering Best Practice Pillars:  Perimeter, Data, Access and Visibility.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.cloudera.com/security-reference-architecture-summary-for-cloudera-data-platform/\">Security Reference Architecture Summary for Cloudera Data Platform</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.cloudera.com\">Cloudera Blog</a>.</p>\n","PublishedAt":"2022-01-21 17:01:40+00:00","OriginURL":"https://blog.cloudera.com/security-reference-architecture-summary-for-cloudera-data-platform/","SourceName":"Cloudera"}},{"node":{"ID":1094,"Title":"Introducing Platform Infra Team at Mercari","Description":"<p>@Vishal Banthia, Engineering Manager, Platform Infra Team The Platform Infra team falls under the Developer Productivity Engineering Camp with a major focus on two domains – Cloud Infrastructure and Observability. In this blog post, I will introduce the Platform Infra team’s mission, key responsibilities, and future initiatives. Mission and key goals The Platform Infra team [&hellip;]</p>\n","PublishedAt":"2022-01-21 15:10:50+00:00","OriginURL":"https://engineering.mercari.com/en/blog/entry/20220121-introducing-platform-infra-team-at-mercari/","SourceName":"Mercari"}},{"node":{"ID":38,"Title":"How we built Asana’s Marketing Measurement Capabilities to power global customer growth","Description":"<img width=\"1024\" height=\"655\" src=\"https://blog.asana.com/wp-content/post-images/05-Distributed-Teams-01-1-1024x655.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"\" loading=\"lazy\" style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://blog.asana.com/wp-content/post-images/05-Distributed-Teams-01-1-1024x655.png 1024w, https://blog.asana.com/wp-content/post-images/05-Distributed-Teams-01-1-520x333.png 520w, https://blog.asana.com/wp-content/post-images/05-Distributed-Teams-01-1-1536x983.png 1536w, https://blog.asana.com/wp-content/post-images/05-Distributed-Teams-01-1.png 1607w, https://blog.asana.com/wp-content/post-images/05-Distributed-Teams-01-1-520x333@2x.png 1040w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /><p>Growing a customer base at scale effectively and efficiently through paid advertising is challenging in the modern digital world. It requires robust and holistic marketing measurement to give marketers visibility into how their campaigns perform at different granularities in a timely manner.&#160; Paid acquisition plays an essential role in helping Asana reach our potential customers [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.asana.com/2022/01/marketing-measurement-capabilities/\">How we built Asana’s Marketing Measurement Capabilities to power global customer&nbsp;growth</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.asana.com\">The Asana Blog</a>.</p>\n","PublishedAt":"2022-01-21 06:29:16+00:00","OriginURL":"https://blog.asana.com/2022/01/marketing-measurement-capabilities/","SourceName":"Asana"}},{"node":{"ID":460,"Title":"Machine learning and product analytics: Navigating the hype","Description":"<figure><img src=\"https://mixpanel.com/wp-content/uploads/2022/01/MXP-Blog-MachineLearningProductAnalysis-1920x1080-copy-1024x576.png\" class=\"type:primaryImage\" /></figure>\n<p>Machine learning and artificial intelligence have seen an explosion of real-world applications in the last decade. Applications such as targeting personalized content to users in real time have demonstrated impressive results. And more and more we are even seeing ML/AI features deployed in product analytics contexts. Indeed, Mixpanel was very early in building ML features</p>\n<p>The post <a rel=\"nofollow\" href=\"https://mixpanel.com/blog/machine-learning-and-product-analytics/\">Machine learning and product analytics: Navigating the hype</a> appeared first on <a rel=\"nofollow\" href=\"https://mixpanel.com\">Mixpanel</a>.</p>\n","PublishedAt":"2022-01-20 17:59:34+00:00","OriginURL":"https://mixpanel.com/blog/machine-learning-and-product-analytics/","SourceName":"Mixpanel"}},{"node":{"ID":1095,"Title":"Introduction of Web Auth Service","Description":"<p>Web authentication micro-service provides the &quot;Mercari Login&quot; feature for web products. It includes a web frontend service providing authentication screens like sign-in, sign-up, and related features. The frontend service has a web server that is implemented by Go and a SPA that is implemented by React and Typescript. It also includes a backend service that [&hellip;]</p>\n","PublishedAt":"2022-01-20 16:24:48+00:00","OriginURL":"https://engineering.mercari.com/en/blog/entry/20220120-introduction-of-web-auth-service/","SourceName":"Mercari"}},{"node":{"ID":1265,"Title":"Optimize SPA bundle size to speed up application loading","Description":"","PublishedAt":"2022-01-20 12:27:45+00:00","OriginURL":"https://medium.com/miro-engineering/optimize-spa-bundle-size-to-speed-up-application-loading-c988cef57257?source=rss----555f7fd62a50---4","SourceName":"Miro Engineering"}},{"node":{"ID":1096,"Title":"Trying to run DML with Priority specified in Cloud Spanner","Description":"<p>This article is a translation of the Japanese article written on September 28, 2021. Hello all, this is @iwata, a backend engineer at Merpay. This article is for day 18 of Merpay Tech Openness Month 2021. All of the microservices I’ve been developing use Cloud Spanner as their data store, so I’ve been playing around [&hellip;]</p>\n","PublishedAt":"2022-01-20 12:08:11+00:00","OriginURL":"https://engineering.mercari.com/en/blog/entry/20210924-cloud-spanner-priority/","SourceName":"Mercari"}},{"node":{"ID":236,"Title":"Gartner® Magic Quadrant™ for Cloud Database Report Recognizes Cloudera as a Visionary","Description":"<p>Gartner® recognized Cloudera in three recent reports – Magic Quadrant™ for Cloud Database Management Systems (DBMS), Critical Capabilities for Cloud Database Management Systems for Analytical Use Cases and Critical Capabilities for Cloud Database Management Systems for Operational Use Cases. Our position as a Visionary in the Gartner Magic Quadrant for Cloud DBMS market speaks to [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.cloudera.com/gartner-magic-quadrant-for-cloud-database-report-recognizes-cloudera-as-a-visionary/\">Gartner® Magic Quadrant™ for Cloud Database Report Recognizes Cloudera as a Visionary</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.cloudera.com\">Cloudera Blog</a>.</p>\n","PublishedAt":"2022-01-20 02:00:47+00:00","OriginURL":"https://blog.cloudera.com/gartner-magic-quadrant-for-cloud-database-report-recognizes-cloudera-as-a-visionary/","SourceName":"Cloudera"}},{"node":{"ID":760,"Title":"Capacity Recommendation Engine: Throughput and Utilization Based Predictive Scaling","Description":"<h1>Introduction</h1>\n<p><span style=\"font-weight: 400;\">Capacity is a key component of reliability. Uber&#8217;s services require enough resources in order to handle daily peak traffic and to support our different kinds of business units. These services are deployed across different cloud platforms and data centers </span>&#8230;</p>\n<p>The post <a rel=\"nofollow\" href=\"https://eng.uber.com/capacity-recommendation-engine/\">Capacity Recommendation Engine: Throughput and Utilization Based Predictive Scaling</a> appeared first on <a rel=\"nofollow\" href=\"https://eng.uber.com\">Uber Engineering Blog</a>.</p>\n","PublishedAt":"2022-01-19 17:43:42+00:00","OriginURL":"https://eng.uber.com/capacity-recommendation-engine/","SourceName":"Uber"}},{"node":{"ID":350,"Title":"The Adventures of Rendezvous in Heroku’s New Architecture","Description":"<p><em>This article was originally authored by Srinath Ananthakrishnan, an engineer on the Heroku Runtime Networking Team</em> </p>\n<h2 class=\"anchored\">\n  <a name=\"summary\" href=\"#summary\">Summary</a>\n</h2>\n\n<p>This following story outlines a recent issue we saw with migrating one of our internal systems over to a new EC2 substrate and in the process breaking one of our customer’s use cases. We also outline how we went about discovering the root of the issue, how we fixed it, and how we enjoyed solving a complex problem that helped keep the Heroku customer experience as simple and straightforward as possible!</p>\n<h2 class=\"anchored\">\n  <a name=\"history\" href=\"#history\">History 📖</a>\n</h2>\n\n<p>Heroku has been leveraging AWS and EC2 since the very early days. All these years, the <a href=\"https://devcenter.heroku.com/articles/dyno-runtime#common-runtime\">Common Runtime</a> has been running on <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-classic-platform.html\">EC2 Classic</a> and while there have always been talks about moving to the more performant and feature rich VPC architecture that AWS offers, we hadn’t had the time and personnel investment to make it a reality until very recently. The results of that effort were captured in a previous blog post titled <a href=\"https://blog.heroku.com/faster-dynos-for-all\">Faster Dynos for All</a></p>\n\n<p>While our Common Runtime contains many critical components, including our instance fleet to run app containers, our routers and several other control plane components, one of the often overlooked but yet critical components is Rendezvous, our bidirectional proxy server that enables <a href=\"https://devcenter.heroku.com/articles/one-off-dynos\">Heroku Run</a> sessions to containers. This is the component that lets customers run what are called one-off dynos that are used for a wide range of use-cases ranging from a simple prompt to execute/test a piece of code to complex CI scenarios.</p>\n<h2 class=\"anchored\">\n  <a name=\"architecture-of-rendezvous\" href=\"#architecture-of-rendezvous\">Architecture of Rendezvous 💪</a>\n</h2>\n\n<p>Rendezvous has been a single-instance server from time immemorial. It is a sub-200 line Ruby script that runs on an EC2 instance with an EIP attached to it. The ruby process receives TLS connections directly, performs TLS termination and proxies bidirectional connections that match a given hash.</p>\n\n<p><img src=\"https://heroku-blog-files.s3.amazonaws.com/posts/1642548509-Screen%20Shot%202021-12-07%20at%2011.16.39%20AM.png\" alt=\"Screen Shot 2021-12-07 at 11\"></p>\n\n<p>Every Heroku Run/One-off dyno invocation involves two parties - the client which is usually the Heroku CLI or custom implementations that use the <a href=\"https://devcenter.heroku.com/articles/platform-api-reference\">Heroku API</a> and the dyno on one of Heroku’s instances deep in the cloud. The existence of Rendezvous is necessitated by one of the painful yet essential warts of the Internet - NATs.</p>\n\n<p>Both the client and the dyno are behind NATs and there’s no means for them to talk to each other through these pesky devices. To combat this, the Heroku API returns an <code>attach_url</code> as part of the <code>create_dyno</code> <a href=\"https://devcenter.heroku.com/articles/platform-api-reference#dyno-create\">request</a> which lets the client reach the dyno. The <code>attach_url</code> also contains a 64 bit hash to identify this specific session in Rendezvous. The same <code>attach_url</code> with the exact hash is passed on by our dyno management system to an agent that runs on our EC2 instance fleet which is responsible for the lifecycle of dynos.</p>\n\n<p><img src=\"https://heroku-blog-files.s3.amazonaws.com/posts/1642548531-Screen%20Shot%202021-12-07%20at%2011.57.32%20AM.png\" alt=\"Screen Shot 2021-12-07 at 11\"></p>\n\n<p>Once both the systems receive the <code>attach_url</code> with the same hash, they make a TLS request to the host, which is a specific instance of Rendezvous. Once the TLS session is established, both sides send the hash as the first message which lets Rendezvous identify which session the connection belongs to. Once the two sides of the session are established, Rendezvous splices them together, thus creating a bi-directional session between the CLI/user and the dyno.</p>\n<h2 class=\"anchored\">\n  <a name=\"a-unique-use-case-of-rendezvous\" href=\"#a-unique-use-case-of-rendezvous\">A unique use-case of Rendezvous 💡</a>\n</h2>\n\n<p>While the majority of customers use Rendezvous via <code>heroku run</code> commands executed via the CLI, some clients have more sophisticated ways of needing containers to be started arbitrarily via the <a href=\"https://devcenter.heroku.com/articles/platform-api-reference#dyno-create\">Heroku API</a>. These clients programmatically create a dyno via the API and also establish a session to the <code>attach_url</code>.</p>\n\n<p>One of our customers utilized Rendezvous in a very unique way by running an app in a Private Space that received client HTTP requests and within the context of a request, issued another request to the Heroku API and to Rendezvous. They had a requirement to support requests across multiple customers and to ensure isolation between them, they opted to run each of their individual customer’s requests inside <a href=\"https://devcenter.heroku.com/articles/one-off-dynos#one-off-dynos\">one-off dynos</a>. The tasks in the one-off dyno runs are expected to take a few seconds and were usually well within the expected maximum response time limit of <a href=\"https://devcenter.heroku.com/articles/limits#http-timeouts\">30s by the Heroku router</a>.</p>\n<h2 class=\"anchored\">\n  <a name=\"oh-something-s-broken\" href=\"#oh-something-s-broken\">Oh! Something’s broken!</a>\n</h2>\n\n<p>In July 2021, we moved Rendezvous into AWS VPCs as part of our effort to evacuate EC2 classic. We chose similar generation instances for this as our instance in classic. As part of this effort, we also wanted to remove a few of the architectural shortcomings of rendezvous - having a single EIP ingress and also manual certificate management for terminating TLS.</p>\n\n<p><img src=\"https://heroku-blog-files.s3.amazonaws.com/posts/1642548541-Screen%20Shot%202022-01-07%20at%201.36.18%20PM.png\" alt=\"Screen Shot 2022-01-07 at 1\"></p>\n\n<p>Based on experience with other routing projects, we decided to leverage <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/network/introduction.html\">Network Load Balancers</a> that AWS offers. From a performance perspective, these were also significantly better - our internal tests revealed that NLBs offered 5-7x more throughput in comparison to the EIP approach. We also decided to leverage the NLB’s TLS termination capabilities which allowed us to stop managing our own certificate and private key manually and rely on AWS ACM to take care of renewals in the future.</p>\n\n<p>While the move was largely a success and most customers didn’t notice this and their <code>heroku run</code> sessions continued to work after the transition, our unique customer immediately hit <a href=\"https://devcenter.heroku.com/articles/error-codes#h12-request-timeout\">H12s</a> on their app that spawns one-off dynos. Almost immediately, we identified this issue to Rendezvous sessions taking longer than the 30s limit imposed by the Heroku Router. We temporarily switched their app to use the classic path and sat down to investigate.</p>\n<h2 class=\"anchored\">\n  <a name=\"where-s-the-problem\" href=\"#where-s-the-problem\">Where’s the problem! 😱</a>\n</h2>\n\n<p>Our first hunch was that the TLS termination on the NLB wasn’t happening as expected but our investigations revealed that TLS was appropriately terminated and the client was able to make progress following that. The next line of investigation was in Rendezvous itself. The new VPC-based instances were supposed to be faster, so the slowdown was something of a mystery. We even tried out an instance type that supported 100Gbps networking but the issue persisted. As part of this effort, we also had upgraded the Ruby version that Rendezvous was running on - and you guessed it right - we attempted a downgrade as well. This proved to be inconclusive as well.</p>\n\n<p>All along we also suspected this could possibly be a problem in the language runtime of the recipient of the connection, where the bytes were available in the userspace buffer of the runtime but the API call was not notified or there is a race condition. We attempted to mimic the data pattern between the client and the process in the one-off dyno by writing our own sample applications. We actually built sample applications in two different languages with very different runtimes. Both these ended up having the same issues in the new environment as well. 🤔</p>\n\n<p>We even briefly considered altering the Heroku Router’s timeout from 30s, but it largely felt like spinning a roulette wheel since we weren’t absolutely sure where the problem was.</p>\n<h2 class=\"anchored\">\n  <a name=\"nailing-it-down\" href=\"#nailing-it-down\">Nailing it down! 🔍</a>\n</h2>\n\n<p>As part of the troubleshooting effort, we also added some more logging on the agent that runs on every EC2 instance that is responsible for maintaining a connection with Rendezvous and the dyno. This agent negotiates TLS with Rendezvous and establishes a connection and sets up a <code>pty</code> terminal connection on the dyno side and sets up stdin/stdout/stderr channels with the same. The client would send requests in a set-size byte chunks which would be streamed by this agent to the dyno. The same agent would also receive bytes from the dyno and stream it back to Rendezvous to send it back to the client. Through the logs on the agent, we determined that there were logs back and forth indicating traffic between the dyno and Rendezvous when connections worked. However, for the abnormal case, there were no logs indicating traffic coming from the dyno after a while and the last log was bytes being sent to the dyno.</p>\n\n<p>Digging more, we identified two issues with this piece of code:</p>\n\n<ol>\n<li>This piece of code was single threaded - i.e. a single thread was performing an <code>IO.select</code> on the TCP socket on the Rendezvous side and the terminal reader on the dyno.</li>\n<li>While #1 itself is not a terrible problem, it became a problem with the use of NLBs which are more performant and have different TLS frame characteristics.</li>\n</ol>\n\n<p>#2 meant that the NLB could potentially send much larger TLS frames than the classic setup where the Rendezvous ruby process would have performed TLS.</p>\n\n<p>The snippet of code that had the bug was as follows.</p>\n\n<pre><code># tcp_socket can be used with IO.select\n# ssl_socket is after openssl has its say\n# pty_reader and pty_writer are towards the dyno\ndef rendezvous_channel(tcp_socket, ssl_socket, pty_reader, pty_writer)\n    if o = IO.select([tcp_socket, pty_reader], nil, nil, IDLE_TIMEOUT)\n        if o.first.first == pty_reader\n\n            # read from the pty_reader and write to ssl_socket\n\n        elsif o.first.first == tcp_socket\n\n            # read from the ssl_socket and write to pty_writer\n\n        end\n    end\nend\n</code></pre>\n\n<p>Since the majority of the bytes were from the client, this thread would have read from the <code>ssl_socket</code> and written them to the <code>pty_writer</code>. With classic, these would have been small TLS frames which would mean that an <code>IO.select</code> readability notification would correspond to a single read from the SSL socket which would in-turn read from the TCP socket.</p>\n\n<p>However, with the shards, the TLS frames from the NLB end up being larger, and a previous read from the <code>ssl_socket</code> could end up reading more bytes off of the <code>tcp_socket</code> which could potentially block <code>IO.select</code> till the <code>IDLE_TIMEOUT</code> has passed. It’s not a problem if the <code>IDLE_TIMEOUT</code> is a relatively smaller number but since this was larger than the 30s limit imposed by the Heroku Router, <code>IO.select</code> blocking here resulted in that timer elapsing resulting in H12s.</p>\n\n<p>In fact, the <a href=\"https://www.rubydoc.info/stdlib/core/IO.select\">Ruby docs</a> for <code>IO.select</code> specifically talk about this <a href=\"https://www.rubydoc.info/stdlib/core/IO.select#:%7E:text=The%20most%20likely%20situation%20is%20that%20OpenSSL%3A%3ASSL%3A%3ASSLSocket%20buffers%20some%20data.%20IO.select%20doesn%27t%20see%20the%20buffer.%20So%20IO.select%20can%20block%20when%20OpenSSL%3A%3ASSL%3A%3ASSLSocket%23readpartial%20doesn%27t%20block.\">issue</a>.</p>\n\n<blockquote>\n<p>The most likely situation is that OpenSSL::SSL::SSLSocket buffers some data. IO.select doesn't see the buffer. So IO.select can block when OpenSSL::SSL::SSLSocket#readpartial doesn't block.</p>\n</blockquote>\n\n<p>According to the Linux kernel on the instance, there were no bytes to be read from the <code>tcp_socket</code> while there were still bytes being left to read from the buffers in openssl since we only read partially the last time around.</p>\n<h2 class=\"anchored\">\n  <a name=\"the-fix\" href=\"#the-fix\">The fix 💜</a>\n</h2>\n\n<p>Once we had identified the issue, it was rather straightforward for us to fix this. We made the code dual threaded - one each for one side of the connection and also fixed the way we read from the sockets and did an <code>IO.select</code>. With this code change, we ensured that we wouldn’t perennially block where there are bytes lying around to be read.</p>\n\n<p>We deployed this fix to our staging environments and after thorough testing we moved the customer over to the VPC-based rendezvous. The customer subsequently confirmed that the issue was resolved and all our remote offices erupted in roars of cheer after that. It was 🍰 time.</p>\n<h2 class=\"anchored\">\n  <a name=\"conclusion\" href=\"#conclusion\">Conclusion</a>\n</h2>\n\n<blockquote>\n<p>Computers are fun, computers are hard!</p>\n\n<p>Try to run a platform and you’ll often say, oh my god!</p>\n\n<p>Gratifying and inspiring it is, to run our stack</p>\n\n<p>For if you lose their trust, it’s hard to get it back ...</p>\n</blockquote>\n\n<p>Running a platform makes you appreciate more of <a href=\"https://www.hyrumslaw.com/\">Hyrum’s Law</a>, every day. Customers find interesting ways to use your platform and they sure do keep you on your toes to ensure you provide the best in class service. At Heroku we have always taken pride in our mission to make life easy for customers and we are grateful to have got the opportunity to demonstrate that yet again as part of this endeavor.</p>\n\n<p>Thanks are in order for all the folks who tirelessly worked on identifying this issue and fixing it. In alphabetical order - David Murray, Elizabeth Cox, Marcus Blankenship, Srinath Ananthakrishnan, Thomas Holmes, Tilman Holschuh and Will Farrington.</p>","PublishedAt":"2022-01-19 17:00:00+00:00","OriginURL":"https://blog.heroku.com/adventures-of-rendevous","SourceName":"Heroku"}},{"node":{"ID":237,"Title":"Cloudera Streaming Analytics 1.6 Release Notes","Description":"<p>We are excited to announce the release of Cloudera Streaming Analytics (CSA) 1.6 for CDP Private Cloud Base. With this release, we build on the foundation on 1.4 and 1.5 &#8211; with a number of fixes, enhancements, and features. Starting with this release, we now have an aligned release cycle for CSA Community Edition (CE). [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.cloudera.com/cloudera-streaming-analytics-1-6-release-notes/\">Cloudera Streaming Analytics 1.6 Release Notes</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.cloudera.com\">Cloudera Blog</a>.</p>\n","PublishedAt":"2022-01-19 14:02:39+00:00","OriginURL":"https://blog.cloudera.com/cloudera-streaming-analytics-1-6-release-notes/","SourceName":"Cloudera"}},{"node":{"ID":1097,"Title":"Implement the dynamic rendering service","Description":"<p>Implement the dynamic rendering service Here is awesome article written by the Google search team: https://developers.google.com/search/docs/advanced/javascript/dynamic-rendering To put it simply: Dynamic rendering means switching between client-side rendered and pre-rendered content for specific user agents. As the article suggests, we use Rendertron to implement our dynamic rendering service called Prerender. In this article, I am going [&hellip;]</p>\n","PublishedAt":"2022-01-19 12:34:12+00:00","OriginURL":"https://engineering.mercari.com/en/blog/entry/20220119-implement-the-dynamic-rendering-service/","SourceName":"Mercari"}}]}},"pageContext":{"limit":30,"skip":3960,"numPages":158,"currentPage":133}},"staticQueryHashes":["3649515864"]}