{"componentChunkName":"component---src-templates-blog-list-tsx","path":"/page/22","result":{"data":{"allPost":{"edges":[{"node":{"ID":4069,"Title":"The power of generative AI for retail and CPG","Description":"","PublishedAt":"2023-06-30 00:00:00+00:00","OriginURL":"https://www.elastic.co/blog/generative-ai-retail-cpg","SourceName":"Elastic"}},{"node":{"ID":4071,"Title":"Improving the Elastic APM UI performance with continuous rollups and service metrics","Description":"","PublishedAt":"2023-06-30 00:00:00+00:00","OriginURL":"https://www.elastic.co/blog/improving-elastic-apm-ui-performance-continuous-rollups-service-metrics","SourceName":"Elastic"}},{"node":{"ID":4072,"Title":"How we sped up data ingestion in Elasticsearch 8.6, 8.7, and 8.8","Description":"","PublishedAt":"2023-06-30 00:00:00+00:00","OriginURL":"https://www.elastic.co/blog/data-ingestion-elasticsearch","SourceName":"Elastic"}},{"node":{"ID":4064,"Title":"Meta’s Evenstar is transitioning to OCP to accelerate open RAN adoption","Description":"<p>Meta is transferring its IP for Evenstar, a program to accelerate the adoption of open RAN technologies, to the Open Compute Project (OCP). Meta will contribute Evenstar’s radio unit design to OCP, giving the telecom industry its first open, white box radio unit solution. The TIP Open RAN community will leverage the Evenstar radio unit [...]</p>\n<p><a class=\"btn btn-secondary understrap-read-more-link\" href=\"https://engineering.fb.com/2023/06/29/connectivity/evenstar-meta-ocp-open-ran/\">Read More...</a></p>\n<p>The post <a rel=\"nofollow\" href=\"https://engineering.fb.com/2023/06/29/connectivity/evenstar-meta-ocp-open-ran/\">Meta&#8217;s Evenstar is transitioning to OCP to accelerate open RAN adoption</a> appeared first on <a rel=\"nofollow\" href=\"https://engineering.fb.com\">Engineering at Meta</a>.</p>\n","PublishedAt":"2023-06-29 16:00:13+00:00","OriginURL":"https://engineering.fb.com/2023/06/29/connectivity/evenstar-meta-ocp-open-ran/","SourceName":"Facebook"}},{"node":{"ID":4065,"Title":"How Bloomberg’s engineers built a culture of knowledge sharing","Description":"<p>Thousands of the company’s engineers, data scientists, designers, and developers have asked and answered questions about how things work inside their organization. </p>\n<p>The post <a rel=\"nofollow\" href=\"https://stackoverflow.blog/2023/06/29/how-bloombergs-engineers-built-a-culture-of-knowledge-sharing/\">How Bloomberg’s engineers built a culture of knowledge sharing</a> appeared first on <a rel=\"nofollow\" href=\"https://stackoverflow.blog\">Stack Overflow Blog</a>.</p>\n","PublishedAt":"2023-06-29 14:00:22+00:00","OriginURL":"https://stackoverflow.blog/2023/06/29/how-bloombergs-engineers-built-a-culture-of-knowledge-sharing/","SourceName":"Stack Overflow"}},{"node":{"ID":4060,"Title":"How to Manage Risk with Modern Data Architectures","Description":"<p>The recent failures of regional banks in the US, such as Silicon Valley Bank (SVB), Silvergate, Signature, and First Republic, were caused by multiple factors. To ensure the stability of the US financial system, the implementation of advanced liquidity risk models and stress testing using (MI/AI) could potentially serve as a protective measure. Technology alone [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.cloudera.com/how-to-manage-risk-with-modern-data-architectures/\">How to Manage Risk with Modern Data Architectures</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.cloudera.com\">Cloudera Blog</a>.</p>\n","PublishedAt":"2023-06-29 13:35:14+00:00","OriginURL":"https://blog.cloudera.com/how-to-manage-risk-with-modern-data-architectures/","SourceName":"Cloudera"}},{"node":{"ID":4074,"Title":"Building a security-conscious CI/CD pipeline","Description":"In this post, we'll discuss CI/CD pipelines and how they can be configured to integrate security throughout the development process.","PublishedAt":"2023-06-29 05:00:00+00:00","OriginURL":"https://snyk.io/blog/building-security-conscious-ci-cd-pipeline/","SourceName":"Snyk"}},{"node":{"ID":4075,"Title":"The importance of verifying webhook signatures","Description":"Webhooks are a callback integration technique for sending and receiving information, such as event notifications, in close to real-time. In this walkthrough, we’ll implement a GitHub webhook in Node.js that detects when users push code to a repository.","PublishedAt":"2023-06-29 05:00:00+00:00","OriginURL":"https://snyk.io/blog/verifying-webhook-signatures/","SourceName":"Snyk"}},{"node":{"ID":4059,"Title":"Blog: Verifying Container Image Signatures Within CRI Runtimes","Description":"<p><strong>Author</strong>: Sascha Grunert</p>\n<p>The Kubernetes community has been signing their container image-based artifacts\nsince release v1.24. While the graduation of the <a href=\"https://github.com/kubernetes/enhancements/issues/3031\">corresponding enhancement</a>\nfrom <code>alpha</code> to <code>beta</code> in v1.26 introduced signatures for the binary artifacts,\nother projects followed the approach by providing image signatures for their\nreleases, too. This means that they either create the signatures within their\nown CI/CD pipelines, for example by using GitHub actions, or rely on the\nKubernetes <a href=\"https://github.com/kubernetes-sigs/promo-tools/blob/e2b96dd/docs/image-promotion.md\">image promotion</a> process to automatically sign the images by\nproposing pull requests to the <a href=\"https://github.com/kubernetes/k8s.io/tree/4b95cc2/k8s.gcr.io\">k/k8s.io</a> repository. A requirement for\nusing this process is that the project is part of the <code>kubernetes</code> or\n<code>kubernetes-sigs</code> GitHub organization, so that they can utilize the community\ninfrastructure for pushing images into staging buckets.</p>\n<p>Assuming that a project now produces signed container image artifacts, how can\none actually verify the signatures? It is possible to do it manually like\noutlined in the <a href=\"https://kubernetes.io/docs/tasks/administer-cluster/verify-signed-artifacts/#verifying-image-signatures\">official Kubernetes documentation</a>. The problem with this\napproach is that it involves no automation at all and should be only done for\ntesting purposes. In production environments, tools like the <a href=\"https://docs.sigstore.dev/policy-controller/overview\">sigstore\npolicy-controller</a> can help with the automation. These tools\nprovide a higher level API by using <a href=\"https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources\">Custom Resource Definitions (CRD)</a> as\nwell as an integrated <a href=\"https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers\">admission controller and webhook</a> to verify\nthe signatures.</p>\n<p>The general usage flow for an admission controller based verification is:</p>\n<figure>\n<img src=\"https://kubernetes.io/blog/2023/06/29/container-image-signature-verification/flow.svg\"\nalt=\"Create an instance of the policy and annotate the namespace to validate the signatures. Then create the pod. The controller evaluates the policy and if it passes, then it does the image pull if necessary. If the policy evaluation fails, then it will not admit the pod.\"/>\n</figure>\n<p>A key benefit of this architecture is simplicity: A single instance within the\ncluster validates the signatures before any image pull can happen in the\ncontainer runtime on the nodes, which gets initiated by the kubelet. This\nbenefit also brings along the issue of separation: The node which should pull\nthe container image is not necessarily the same node that performs the admission. This\nmeans that if the controller is compromised, then a cluster-wide policy\nenforcement can no longer be possible.</p>\n<p>One way to solve this issue is doing the policy evaluation directly within the\n<a href=\"https://kubernetes.io/docs/concepts/architecture/cri\">Container Runtime Interface (CRI)</a> compatible container runtime. The\nruntime is directly connected to the <a href=\"https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet\">kubelet</a> on a node and does all\nthe tasks like pulling images. <a href=\"https://github.com/cri-o/cri-o\">CRI-O</a> is one of those available runtimes\nand will feature full support for container image signature verification in v1.28.</p>\n<p>How does it work? CRI-O reads a file called <a href=\"https://github.com/containers/image/blob/b3e0ba2/docs/containers-policy.json.5.md#sigstoresigned\"><code>policy.json</code></a>, which\ncontains all the rules defined for container images. For example, you can define a\npolicy which only allows signed images <code>quay.io/crio/signed</code> for any tag or\ndigest like this:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-json\" data-lang=\"json\"><span style=\"display:flex;\"><span>{\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#008000;font-weight:bold\">&#34;default&#34;</span>: [{ <span style=\"color:#008000;font-weight:bold\">&#34;type&#34;</span>: <span style=\"color:#b44\">&#34;reject&#34;</span> }],\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#008000;font-weight:bold\">&#34;transports&#34;</span>: {\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#008000;font-weight:bold\">&#34;docker&#34;</span>: {\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#008000;font-weight:bold\">&#34;quay.io/crio/signed&#34;</span>: [\n</span></span><span style=\"display:flex;\"><span> {\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#008000;font-weight:bold\">&#34;type&#34;</span>: <span style=\"color:#b44\">&#34;sigstoreSigned&#34;</span>,\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#008000;font-weight:bold\">&#34;signedIdentity&#34;</span>: { <span style=\"color:#008000;font-weight:bold\">&#34;type&#34;</span>: <span style=\"color:#b44\">&#34;matchRepository&#34;</span> },\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#008000;font-weight:bold\">&#34;fulcio&#34;</span>: {\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#008000;font-weight:bold\">&#34;oidcIssuer&#34;</span>: <span style=\"color:#b44\">&#34;https://github.com/login/oauth&#34;</span>,\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#008000;font-weight:bold\">&#34;subjectEmail&#34;</span>: <span style=\"color:#b44\">&#34;sgrunert@redhat.com&#34;</span>,\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#008000;font-weight:bold\">&#34;caData&#34;</span>: <span style=\"color:#b44\">&#34;LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUI5ekNDQVh5Z0F3SUJBZ0lVQUxaTkFQRmR4SFB3amVEbG9Ed3lZQ2hBTy80d0NnWUlLb1pJemowRUF3TXcKS2pFVk1CTUdBMVVFQ2hNTWMybG5jM1J2Y21VdVpHVjJNUkV3RHdZRFZRUURFd2h6YVdkemRHOXlaVEFlRncweQpNVEV3TURjeE16VTJOVGxhRncwek1URXdNRFV4TXpVMk5UaGFNQ294RlRBVEJnTlZCQW9UREhOcFozTjBiM0psCkxtUmxkakVSTUE4R0ExVUVBeE1JYzJsbmMzUnZjbVV3ZGpBUUJnY3Foa2pPUFFJQkJnVXJnUVFBSWdOaUFBVDcKWGVGVDRyYjNQUUd3UzRJYWp0TGszL09sbnBnYW5nYUJjbFlwc1lCcjVpKzR5bkIwN2NlYjNMUDBPSU9aZHhleApYNjljNWlWdXlKUlErSHowNXlpK1VGM3VCV0FsSHBpUzVzaDArSDJHSEU3U1hyazFFQzVtMVRyMTlMOWdnOTJqCll6QmhNQTRHQTFVZER3RUIvd1FFQXdJQkJqQVBCZ05WSFJNQkFmOEVCVEFEQVFIL01CMEdBMVVkRGdRV0JCUlkKd0I1ZmtVV2xacWw2ekpDaGt5TFFLc1hGK2pBZkJnTlZIU01FR0RBV2dCUll3QjVma1VXbFpxbDZ6SkNoa3lMUQpLc1hGK2pBS0JnZ3Foa2pPUFFRREF3TnBBREJtQWpFQWoxbkhlWFpwKzEzTldCTmErRURzRFA4RzFXV2cxdENNCldQL1dIUHFwYVZvMGpoc3dlTkZaZ1NzMGVFN3dZSTRxQWpFQTJXQjlvdDk4c0lrb0YzdlpZZGQzL1Z0V0I1YjkKVE5NZWE3SXgvc3RKNVRmY0xMZUFCTEU0Qk5KT3NRNHZuQkhKCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=&#34;</span>\n</span></span><span style=\"display:flex;\"><span> },\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#008000;font-weight:bold\">&#34;rekorPublicKeyData&#34;</span>: <span style=\"color:#b44\">&#34;LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUZrd0V3WUhLb1pJemowQ0FRWUlLb1pJemowREFRY0RRZ0FFMkcyWSsydGFiZFRWNUJjR2lCSXgwYTlmQUZ3cgprQmJtTFNHdGtzNEwzcVg2eVlZMHp1ZkJuaEM4VXIvaXk1NUdoV1AvOUEvYlkyTGhDMzBNOStSWXR3PT0KLS0tLS1FTkQgUFVCTElDIEtFWS0tLS0tCg==&#34;</span>\n</span></span><span style=\"display:flex;\"><span> }\n</span></span><span style=\"display:flex;\"><span> ]\n</span></span><span style=\"display:flex;\"><span> }\n</span></span><span style=\"display:flex;\"><span> }\n</span></span><span style=\"display:flex;\"><span>}\n</span></span></code></pre></div><p>CRI-O has to be started to use that policy as the global source of truth:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex;\"><span><span style=\"color:#000080;font-weight:bold\">&gt;</span> sudo crio --log-level debug --signature-policy ./policy.json\n</span></span></code></pre></div><p>CRI-O is now able to pull the image while verifying its signatures. This can be\ndone by using <a href=\"https://github.com/kubernetes-sigs/cri-tools\"><code>crictl</code> (cri-tools)</a>, for example:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex;\"><span><span style=\"color:#000080;font-weight:bold\">&gt;</span> sudo crictl -D pull quay.io/crio/signed\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">DEBU[…] get image connection\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">DEBU[…] PullImageRequest: &amp;PullImageRequest{Image:&amp;ImageSpec{Image:quay.io/crio/signed,Annotations:map[string]string{},},Auth:nil,SandboxConfig:nil,}\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">DEBU[…] PullImageResponse: &amp;PullImageResponse{ImageRef:quay.io/crio/signed@sha256:18b42e8ea347780f35d979a829affa178593a8e31d90644466396e1187a07f3a,}\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">Image is up to date for quay.io/crio/signed@sha256:18b42e8ea347780f35d979a829affa178593a8e31d90644466396e1187a07f3a\n</span></span></span></code></pre></div><p>The CRI-O debug logs will also indicate that the signature got successfully\nvalidated:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex;\"><span><span style=\"color:#888\">DEBU[…] IsRunningImageAllowed for image docker:quay.io/crio/signed:latest\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">DEBU[…] Using transport &#34;docker&#34; specific policy section quay.io/crio/signed\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">DEBU[…] Reading /var/lib/containers/sigstore/crio/signed@sha256=18b42e8ea347780f35d979a829affa178593a8e31d90644466396e1187a07f3a/signature-1\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">DEBU[…] Looking for sigstore attachments in quay.io/crio/signed:sha256-18b42e8ea347780f35d979a829affa178593a8e31d90644466396e1187a07f3a.sig\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">DEBU[…] GET https://quay.io/v2/crio/signed/manifests/sha256-18b42e8ea347780f35d979a829affa178593a8e31d90644466396e1187a07f3a.sig\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">DEBU[…] Content-Type from manifest GET is &#34;application/vnd.oci.image.manifest.v1+json&#34;\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">DEBU[…] Found a sigstore attachment manifest with 1 layers\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">DEBU[…] Fetching sigstore attachment 1/1: sha256:8276724a208087e73ae5d9d6e8f872f67808c08b0acdfdc73019278807197c45\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">DEBU[…] Downloading /v2/crio/signed/blobs/sha256:8276724a208087e73ae5d9d6e8f872f67808c08b0acdfdc73019278807197c45\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">DEBU[…] GET https://quay.io/v2/crio/signed/blobs/sha256:8276724a208087e73ae5d9d6e8f872f67808c08b0acdfdc73019278807197c45\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">DEBU[…] Requirement 0: allowed\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">DEBU[…] Overall: allowed\n</span></span></span></code></pre></div><p>All of the defined fields like <code>oidcIssuer</code> and <code>subjectEmail</code> in the policy\nhave to match, while <code>fulcio.caData</code> and <code>rekorPublicKeyData</code> are the public\nkeys from the upstream <a href=\"https://github.com/sigstore/fulcio\">fulcio (OIDC PKI)</a> and <a href=\"https://github.com/sigstore/rekor\">rekor\n(transparency log)</a> instances.</p>\n<p>This means that if you now invalidate the <code>subjectEmail</code> of the policy, for example to\n<code>wrong@mail.com</code>:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex;\"><span><span style=\"color:#000080;font-weight:bold\">&gt;</span> jq <span style=\"color:#b44\">&#39;.transports.docker.&#34;quay.io/crio/signed&#34;[0].fulcio.subjectEmail = &#34;wrong@mail.com&#34;&#39;</span> policy.json &gt; new-policy.json\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#000080;font-weight:bold\">&gt;</span> mv new-policy.json policy.json\n</span></span></code></pre></div><p>Then remove the image, since it already exists locally:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex;\"><span><span style=\"color:#000080;font-weight:bold\">&gt;</span> sudo crictl rmi quay.io/crio/signed\n</span></span></code></pre></div><p>Now when you pull the image, CRI-O complains that the required email is wrong:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex;\"><span><span style=\"color:#000080;font-weight:bold\">&gt;</span> sudo crictl pull quay.io/crio/signed\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">FATA[…] pulling image: rpc error: code = Unknown desc = Source image rejected: Required email wrong@mail.com not found (got []string{&#34;sgrunert@redhat.com&#34;})\n</span></span></span></code></pre></div><p>It is also possible to test an unsigned image against the policy. For that you\nhave to modify the key <code>quay.io/crio/signed</code> to something like\n<code>quay.io/crio/unsigned</code>:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex;\"><span><span style=\"color:#000080;font-weight:bold\">&gt;</span> sed -i <span style=\"color:#b44\">&#39;s;quay.io/crio/signed;quay.io/crio/unsigned;&#39;</span> policy.json\n</span></span></code></pre></div><p>If you now pull the container image, CRI-O will complain that no signature exists\nfor it:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex;\"><span><span style=\"color:#000080;font-weight:bold\">&gt;</span> sudo crictl pull quay.io/crio/unsigned\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">FATA[…] pulling image: rpc error: code = Unknown desc = SignatureValidationFailed: Source image rejected: A signature was required, but no signature exists\n</span></span></span></code></pre></div><p>It is important to mention that CRI-O will match the\n<code>.critical.identity.docker-reference</code> field within the signature to match with\nthe image repository. For example, if you verify the image\n<code>registry.k8s.io/kube-apiserver-amd64:v1.28.0-alpha.3</code>, then the corresponding\n<code>docker-reference</code> should be <code>registry.k8s.io/kube-apiserver-amd64</code>:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex;\"><span><span style=\"color:#000080;font-weight:bold\">&gt;</span> cosign verify registry.k8s.io/kube-apiserver-amd64:v1.28.0-alpha.3 <span style=\"color:#b62;font-weight:bold\">\\\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b62;font-weight:bold\"></span><span style=\"color:#888\"> --certificate-identity krel-trust@k8s-releng-prod.iam.gserviceaccount.com \\\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\"> --certificate-oidc-issuer https://accounts.google.com \\\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\"> | jq -r &#39;.[0].critical.identity.&#34;docker-reference&#34;&#39;\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">…\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\"></span><span style=\"\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"\"></span><span style=\"color:#888\">registry.k8s.io/kubernetes/kube-apiserver-amd64\n</span></span></span></code></pre></div><p>The Kubernetes community introduced <code>registry.k8s.io</code> as proxy mirror for\nvarious registries. Before the release of <a href=\"https://github.com/kubernetes-sigs/promo-tools/releases/tag/v4.0.2\">kpromo v4.0.2</a>, images\nhad been signed with the actual mirror rather than <code>registry.k8s.io</code>:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex;\"><span><span style=\"color:#000080;font-weight:bold\">&gt;</span> cosign verify registry.k8s.io/kube-apiserver-amd64:v1.28.0-alpha.2 <span style=\"color:#b62;font-weight:bold\">\\\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b62;font-weight:bold\"></span><span style=\"color:#888\"> --certificate-identity krel-trust@k8s-releng-prod.iam.gserviceaccount.com \\\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\"> --certificate-oidc-issuer https://accounts.google.com \\\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\"> | jq -r &#39;.[0].critical.identity.&#34;docker-reference&#34;&#39;\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">…\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\"></span><span style=\"\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"\"></span><span style=\"color:#888\">asia-northeast2-docker.pkg.dev/k8s-artifacts-prod/images/kubernetes/kube-apiserver-amd64\n</span></span></span></code></pre></div><p>The change of the <code>docker-reference</code> to <code>registry.k8s.io</code> makes it easier for\nend users to validate the signatures, because they cannot know anything about the\nunderlying infrastructure being used. The feature to set the identity on image\nsigning has been added to <a href=\"https://github.com/sigstore/cosign/pull/2984\">cosign</a> via the flag <code>sign --sign-container-identity</code> as well and will be part of its upcoming release.</p>\n<p>The Kubernetes image pull error code <code>SignatureValidationFailed</code> got <a href=\"https://github.com/kubernetes/kubernetes/pull/117717\">recently added to\nKubernetes</a> and will be available from v1.28. This error code allows\nend-users to understand image pull failures directly from the kubectl CLI. For\nexample, if you run CRI-O together with Kubernetes using the policy which requires\n<code>quay.io/crio/unsigned</code> to be signed, then a pod definition like this:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex;\"><span><span style=\"color:#008000;font-weight:bold\">apiVersion</span>:<span style=\"color:#bbb\"> </span>v1<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">kind</span>:<span style=\"color:#bbb\"> </span>Pod<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">metadata</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>pod<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">spec</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">containers</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>- <span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>container<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">image</span>:<span style=\"color:#bbb\"> </span>quay.io/crio/unsigned<span style=\"color:#bbb\">\n</span></span></span></code></pre></div><p>Will cause the <code>SignatureValidationFailed</code> error when applying the pod manifest:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex;\"><span><span style=\"color:#000080;font-weight:bold\">&gt;</span> kubectl apply -f pod.yaml\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">pod/pod created\n</span></span></span></code></pre></div><div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex;\"><span><span style=\"color:#000080;font-weight:bold\">&gt;</span> kubectl get pods\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">NAME READY STATUS RESTARTS AGE\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">pod 0/1 SignatureValidationFailed 0 4s\n</span></span></span></code></pre></div><div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex;\"><span><span style=\"color:#000080;font-weight:bold\">&gt;</span> kubectl describe pod pod | tail -n8\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#888\"> Type Reason Age From Message\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\"> ---- ------ ---- ---- -------\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\"> Normal Scheduled 58s default-scheduler Successfully assigned default/pod to 127.0.0.1\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\"> Normal BackOff 22s (x2 over 55s) kubelet Back-off pulling image &#34;quay.io/crio/unsigned&#34;\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\"> Warning Failed 22s (x2 over 55s) kubelet Error: ImagePullBackOff\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\"> Normal Pulling 9s (x3 over 58s) kubelet Pulling image &#34;quay.io/crio/unsigned&#34;\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\"> Warning Failed 6s (x3 over 55s) kubelet Failed to pull image &#34;quay.io/crio/unsigned&#34;: SignatureValidationFailed: Source image rejected: A signature was required, but no signature exists\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\"> Warning Failed 6s (x3 over 55s) kubelet Error: SignatureValidationFailed\n</span></span></span></code></pre></div><p>This overall behavior provides a more Kubernetes native experience and does not\nrely on third party software to be installed in the cluster.</p>\n<p>There are still a few corner cases to consider: For example, what if you want to\nallow policies per namespace in the same way the policy-controller supports it?\nWell, there is an upcoming CRI-O feature in v1.28 for that! CRI-O will support\nthe <code>--signature-policy-dir</code> / <code>signature_policy_dir</code> option, which defines the\nroot path for pod namespace-separated signature policies. This means that CRI-O\nwill lookup that path and assemble a policy like <code>&lt;SIGNATURE_POLICY_DIR&gt;/&lt;NAMESPACE&gt;.json</code>,\nwhich will be used on image pull if existing. If no pod namespace is\nprovided on image pull (<a href=\"https://github.com/kubernetes/cri-api/blob/e5515a5/pkg/apis/runtime/v1/api.proto#L1448\">via the sandbox config</a>), or the\nconcatenated path is non-existent, then CRI-O's global policy will be used as\nfallback.</p>\n<p>Another corner case to consider is critical for the correct signature\nverification within container runtimes: The kubelet only invokes container image\npulls if the image does not already exist on disk. This means that an\nunrestricted policy from Kubernetes namespace A can allow pulling an image,\nwhile namespace B is not able to enforce the policy because it already exits on\nthe node. Finally, CRI-O has to verify the policy not only on image pull, but\nalso on container creation. This fact makes things even a bit more complicated,\nbecause the CRI does not really pass down the user specified image reference on\ncontainer creation, but an already resolved image ID, or digest. A <a href=\"https://github.com/kubernetes/kubernetes/pull/118652\">small\nchange to the CRI</a> can help with that.</p>\n<p>Now that everything happens within the container runtime, someone has to\nmaintain and define the policies to provide a good user experience around that\nfeature. The CRDs of the policy-controller are great, while we could imagine that\na daemon within the cluster can write the policies for CRI-O per namespace. This\nwould make any additional hook obsolete and moves the responsibility of\nverifying the image signature to the actual instance which pulls the image. <a href=\"https://groups.google.com/g/kubernetes-sig-node/c/kgpxqcsJ7Vc/m/7X7t_ElsAgAJ\">I\nevaluated</a> other possible paths toward a better container image\nsignature verification within plain Kubernetes, but I could not find a great fit\nfor a native API. This means that I believe that a CRD is the way to go, but\nusers still need an instance which actually serves it.</p>\n<p>Thank you for reading this blog post! If you're interested in more, providing\nfeedback or asking for help, then feel free to get in touch with me directly via\n<a href=\"https://kubernetes.slack.com/messages/crio\">Slack (#crio)</a> or the <a href=\"https://groups.google.com/forum/#!forum/kubernetes-sig-node\">SIG Node mailing list</a>.</p>","PublishedAt":"2023-06-29 00:00:00+00:00","OriginURL":"https://kubernetes.io/blog/2023/06/29/container-image-signature-verification/","SourceName":"Kubernetes"}},{"node":{"ID":4061,"Title":"Elastic Stack container images signed with Sigstore!","Description":"","PublishedAt":"2023-06-29 00:00:00+00:00","OriginURL":"https://www.elastic.co/blog/elastic-stack-container-images-signed-sigstore","SourceName":"Elastic"}},{"node":{"ID":4062,"Title":"Elastic Stack 8.8.2 released","Description":"<p>Version 8.8.2 of the Elastic Stack was released today. We recommend you <a href=\"https://www.elastic.co/downloads\">upgrade to this latest version</a>. We recommend 8.8.2 over the previous patch versions in 7.17.x.</p>\n<p>From the 8.8.0 release onwards, container images are now signed with <a href=\"https://www.elastic.co/blog/elastic-stack-container-images-signed-sigstore\">cosign/Sigstore</a>.</p>\n<p>The 8.8.2 patch release contains a fix for a potential security vulnerability. Please see our <a href=\"https://discuss.elastic.co/c/announcements/security-announcements/31\">security advisory for more details</a>.</p>\n<p>For details of the issues that have been fixed and a full list of changes for each product in this version, please refer to <a href=\"https://www.elastic.co/guide/en/welcome-to-elastic/8.8/new.html\">the release notes</a>.</p>","PublishedAt":"2023-06-29 00:00:00+00:00","OriginURL":"https://www.elastic.co/blog/elastic-stack-8-8-2-released","SourceName":"Elastic"}},{"node":{"ID":4063,"Title":"Elastic Stack 7.17.11 released","Description":"<p>Version 7.17.11 of the Elastic Stack was released today. We recommend you <a href=\"https://www.elastic.co/downloads\">upgrade to this latest version</a>. We recommend 7.17.11 over the previous patch versions in 7.17.x.</p>\n<p>The 7.17.11 patch release contains a fix for a potential security vulnerability. Please see our <a href=\"https://discuss.elastic.co/c/announcements/security-announcements/31\">security advisory for more details</a>.</p>\n<p>For details of the issues that have been fixed and a full list of changes for each product in this version, please refer to <a href=\"https://www.elastic.co/guide/en/welcome-to-elastic/7.17/new.html\">the release notes</a>.</p>","PublishedAt":"2023-06-29 00:00:00+00:00","OriginURL":"https://www.elastic.co/blog/elastic-stack-7-17-11-released","SourceName":"Elastic"}},{"node":{"ID":4066,"Title":"How does Elastic Security drive value to your organization?","Description":"","PublishedAt":"2023-06-29 00:00:00+00:00","OriginURL":"https://www.elastic.co/blog/how-elastic-security-drive-value-organization","SourceName":"Elastic"}},{"node":{"ID":4056,"Title":"Get started using Google Cloud APIs to manage cloud infrastructure","Description":"","PublishedAt":"2023-06-28 19:03:35+00:00","OriginURL":"https://medium.com/better-practices/get-started-using-google-cloud-apis-to-manage-cloud-infrastructure-bace9cac42e1?source=rss----410f2fbc015d---4","SourceName":"Postman"}},{"node":{"ID":4053,"Title":"Generative AI with Large Language Models — New Hands-on Course by DeepLearning.AI and AWS","Description":"Generative AI has taken the world by storm, and we’re starting to see the next wave of widespread adoption of AI with the potential for every customer experience and application to be reinvented with generative AI. Generative AI lets you to create new content and ideas including conversations, stories, images, videos, and music. Generative AI […]","PublishedAt":"2023-06-28 15:54:55+00:00","OriginURL":"https://aws.amazon.com/blogs/aws/generative-ai-with-large-language-models-new-hands-on-course-by-deeplearning-ai-and-aws/","SourceName":"AWS"}},{"node":{"ID":4051,"Title":"#ClouderaLife Employee Spotlight: Peyton Kettering, Account Executive","Description":"<p>Making connections to help customers and community.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.cloudera.com/clouderalife-employee-spotlight-peyton-kettering-account-executive/\">#ClouderaLife Employee Spotlight: Peyton Kettering, Account Executive</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.cloudera.com\">Cloudera Blog</a>.</p>\n","PublishedAt":"2023-06-28 13:19:20+00:00","OriginURL":"https://blog.cloudera.com/clouderalife-employee-spotlight-peyton-kettering-account-executive/","SourceName":"Cloudera"}},{"node":{"ID":4058,"Title":"Career stories: The power of an impactful mentor","Description":"Initially a Chicago-based data analyst, Jelanah had her heart set on a more meaningful career in frontend (UI) engineering. She chronicles for us how a life-changing engineering mentor at LinkedIn unlocked her frontend technical skills, supported a relocation to Atlanta, and championed a promotion to software engineer. Finding the right fit at LinkedIn After I graduated from college with an interdisciplinary marketing, math and computer science degree, I wanted to find a role that combined my interests in computer science, math, and marketing. I started my career at Allstate in an [&#8230;]","PublishedAt":"2023-06-28 13:00:00+00:00","OriginURL":"https://engineering.linkedin.com/blog/2023/career-stories--the-power-of-an-impactful-mentor","SourceName":"Linkedin"}},{"node":{"ID":4078,"Title":"Designing iOS Screen Navigation for Best UX","Description":"<p>This article from day 17 of Merpay Tech Openness Month 2023 is brought to you by @kris from the Merpay iOS team. The Power of UX in iOS App Development An app’s user experience, or UX for short, simply refers to the experience a user has while interacting with an app. This is usually handled [&hellip;]</p>\n","PublishedAt":"2023-06-28 10:00:10+00:00","OriginURL":"https://engineering.mercari.com/en/blog/entry/20230627-designing-ios-screen-navigation-for-best-ux/","SourceName":"Mercari"}},{"node":{"ID":4076,"Title":"Using insecure npm package manager defaults to steal your macOS keyboard shortcuts","Description":"In this post, we'll discuss npm postinstall, recent security events involving it, and how to protect the sensitive data stored shortcuts stored in your keyboard shortcuts from insecure npm package manager defaults.","PublishedAt":"2023-06-28 05:01:00+00:00","OriginURL":"https://snyk.io/blog/using-insecure-npm-package-manager-defaults/","SourceName":"Snyk"}},{"node":{"ID":4050,"Title":"Improving the developer experience in the energy sector","Description":"<p>And how software underlies the second-largest electric vehicle charging network. </p>\n<p>The post <a rel=\"nofollow\" href=\"https://stackoverflow.blog/2023/06/28/improving-the-developer-experience-in-the-energy-sector/\">Improving the developer experience in the energy sector</a> appeared first on <a rel=\"nofollow\" href=\"https://stackoverflow.blog\">Stack Overflow Blog</a>.</p>\n","PublishedAt":"2023-06-28 04:40:00+00:00","OriginURL":"https://stackoverflow.blog/2023/06/28/improving-the-developer-experience-in-the-energy-sector/","SourceName":"Stack Overflow"}},{"node":{"ID":4052,"Title":"Open-sourcing sysgrok — An AI assistant for analyzing, understanding, and optimizing systems","Description":"","PublishedAt":"2023-06-28 00:00:00+00:00","OriginURL":"https://www.elastic.co/blog/open-sourcing-sysgrok-ai-assistant","SourceName":"Elastic"}},{"node":{"ID":4055,"Title":"Troubleshoot with Kubernetes events","Description":"<img class=\"webfeedsFeaturedVisual rss\" src=\"https://imgix.datadoghq.com/img/blog/monitor-kubernetes-events/hero.png\" width=\"100%\"/>When Kubernetes components like nodes, pods, or containers change state—for example, if a pod transitions from pending to running—they automatically generate objects called events to document the change. Events provide key information about the health and status of your clusters—for example, they inform you if container creations are failing, or if pods are being rescheduled again and again. Monitoring these events can help you troubleshoot issues affecting your infrastructure.All components of a cluster create events, so the volume of events generated by your system will grow quickly as you scale your Kubernetes environment.","PublishedAt":"2023-06-28 00:00:00+00:00","OriginURL":"https://www.datadoghq.com/blog/monitor-kubernetes-events/","SourceName":"Datadog"}},{"node":{"ID":4057,"Title":"Best practices for monitoring CDN logs","Description":"<img class=\"webfeedsFeaturedVisual rss\" src=\"https://imgix.datadoghq.com/img/blog/monitoring-cdn-logs/cdn_logs_hero.png\" width=\"100%\"/>By storing copies of your content in geographically distributed servers, content delivery networks (CDNs) enable you to extend the reach of your app without sacrificing performance. CDNs lessen the demand on individual web hosts by increasing the number and regional spread of servers that are able to respond to incoming requests for cached content. As a result, they can deliver web content faster and provide a better experience for your end users.","PublishedAt":"2023-06-28 00:00:00+00:00","OriginURL":"https://www.datadoghq.com/blog/monitoring-cdn-logs/","SourceName":"Datadog"}},{"node":{"ID":4047,"Title":"New AWS AppFabric Improves Application Observability for SaaS Applications","Description":"In today’s business landscape, companies strive to equip their employees with the most suitable and efficient tools to perform their jobs effectively. To achieve this goal, many companies turn to Software-as-a-Service (SaaS) applications. This approach allows companies to optimize their workflows, enhance employee productivity, and focus their resources on core business activities rather than software […]","PublishedAt":"2023-06-27 17:35:20+00:00","OriginURL":"https://aws.amazon.com/blogs/aws/new-aws-appfabric-improves-application-observability-for-saas-applications/","SourceName":"AWS"}},{"node":{"ID":4044,"Title":"Meta developer tools: Working at scale","Description":"<p>Every day, thousands of developers at Meta are working in repositories with millions of files. Those developers need tools that help them at every stage of the workflow while working at extreme scale. In this article we’ll go through a few of the tools in the development process. And, as an added bonus, those we [...]</p>\n<p><a class=\"btn btn-secondary understrap-read-more-link\" href=\"https://engineering.fb.com/2023/06/27/developer-tools/meta-developer-tools-open-source/\">Read More...</a></p>\n<p>The post <a rel=\"nofollow\" href=\"https://engineering.fb.com/2023/06/27/developer-tools/meta-developer-tools-open-source/\">Meta developer tools: Working at scale</a> appeared first on <a rel=\"nofollow\" href=\"https://engineering.fb.com\">Engineering at Meta</a>.</p>\n","PublishedAt":"2023-06-27 16:00:51+00:00","OriginURL":"https://engineering.fb.com/2023/06/27/developer-tools/meta-developer-tools-open-source/","SourceName":"Facebook"}},{"node":{"ID":4045,"Title":"HashiCorp acquires BluBracket to add secrets scanning","Description":"BluBracket’s secrets-scanning functionality will complement HashiCorp Vault’s secrets management to help prevent accidental leaks and fight secret sprawl.","PublishedAt":"2023-06-27 16:00:00+00:00","OriginURL":"https://www.hashicorp.com/blog/announcing-acquisition-of-blubracket","SourceName":"HashiCorp"}},{"node":{"ID":4054,"Title":"Nomad 1.6 beta adds node pools, UX updates, and more","Description":"HashiCorp Nomad 1.6 introduces node pools to help manage multi-tenant Nomad clusters, along with a redesigned job UI, Nomad Pack improvements, and more.","PublishedAt":"2023-06-27 16:00:00+00:00","OriginURL":"https://www.hashicorp.com/blog/nomad-1-6-adds-node-pools-ux-updates-and-more","SourceName":"HashiCorp"}},{"node":{"ID":4041,"Title":"Five Ways A Modern Data Architecture Can Reduce Costs in Telco","Description":"<p>During the COVID-19 pandemic, telcos made unprecedented use of data and data-driven automation to optimize their network operations, improve customer support, and identify opportunities to expand into new markets. This is no less crucial today, as telcos balance the needs to cut costs and improve efficiencies while delivering innovative products and services. The way to [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.cloudera.com/five-ways-a-modern-data-architecture-can-reduce-costs-in-telco/\">Five Ways A Modern Data Architecture Can Reduce Costs in Telco</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.cloudera.com\">Cloudera Blog</a>.</p>\n","PublishedAt":"2023-06-27 14:54:42+00:00","OriginURL":"https://blog.cloudera.com/five-ways-a-modern-data-architecture-can-reduce-costs-in-telco/","SourceName":"Cloudera"}},{"node":{"ID":4042,"Title":"Introducing the new Developer Hub to help you build Miro apps fast","Description":"","PublishedAt":"2023-06-27 14:17:06+00:00","OriginURL":"https://medium.com/miro-engineering/introducing-the-new-developer-hub-to-help-you-build-miro-apps-fast-f2e50800ba76?source=rss----555f7fd62a50---4","SourceName":"Miro Engineering"}},{"node":{"ID":4039,"Title":"Cloudflare Zaraz supports JSONata","Description":"Discover the seamless integration of Cloudflare Zaraz and JSONata, enabling precise data customization for enhanced workflows. Effortlessly optimize data transmission to providers and APIs with ease. Unlock the power of fine-tuned data today","PublishedAt":"2023-06-27 13:00:56+00:00","OriginURL":"http://blog.cloudflare.com/zaraz-adds-jsonata-support/","SourceName":"Cloudflare"}}]}},"pageContext":{"limit":30,"skip":630,"numPages":158,"currentPage":22}},"staticQueryHashes":["3649515864"]}